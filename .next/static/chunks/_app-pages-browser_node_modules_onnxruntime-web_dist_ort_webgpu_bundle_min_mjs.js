"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_onnxruntime-web_dist_ort_webgpu_bundle_min_mjs"],{

/***/ "(app-pages-browser)/./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs?7f57":
/*!*********************************************************************!*\
  !*** ./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = __webpack_require__.p + "static/media/ort.webgpu.bundle.min.5535e168.mjs";

/***/ }),

/***/ "(app-pages-browser)/./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm":
/*!****************************************************************************!*\
  !*** ./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

module.exports = __webpack_require__.p + "static/media/ort-wasm-simd-threaded.jsep.da7a4538.wasm";

/***/ }),

/***/ "(app-pages-browser)/./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs?4709":
/*!*********************************************************************!*\
  !*** ./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InferenceSession: function() { return /* binding */ Fp; },\n/* harmony export */   TRACE: function() { return /* binding */ wr; },\n/* harmony export */   TRACE_FUNC_BEGIN: function() { return /* binding */ Ue; },\n/* harmony export */   TRACE_FUNC_END: function() { return /* binding */ De; },\n/* harmony export */   Tensor: function() { return /* binding */ He; },\n/* harmony export */   \"default\": function() { return /* binding */ $1; },\n/* harmony export */   env: function() { return /* binding */ ve; },\n/* harmony export */   registerBackend: function() { return /* binding */ St; }\n/* harmony export */ });\n/*!\n * ONNX Runtime Web v1.21.0-dev.20250114-228dd16893\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */ var Un = Object.defineProperty;\nvar Vp = Object.getOwnPropertyDescriptor;\nvar Wp = Object.getOwnPropertyNames;\nvar Lp = Object.prototype.hasOwnProperty;\nvar Nn = ((e1)=>typeof require < \"u\" ? require : typeof Proxy < \"u\" ? new Proxy(e1, {\n        get: (t, r)=>(typeof require < \"u\" ? require : t)[r]\n    }) : e1)(function(e1) {\n    if (typeof require < \"u\") return require.apply(this, arguments);\n    throw Error('Dynamic require of \"' + e1 + '\" is not supported');\n});\nvar U = (e1, t)=>()=>(e1 && (t = e1(e1 = 0)), t);\nvar Ft = (e1, t)=>{\n    for(var r in t)Un(e1, r, {\n        get: t[r],\n        enumerable: !0\n    });\n}, Gp = (e1, t, r, n)=>{\n    if (t && typeof t == \"object\" || typeof t == \"function\") for (let o of Wp(t))!Lp.call(e1, o) && o !== r && Un(e1, o, {\n        get: ()=>t[o],\n        enumerable: !(n = Vp(t, o)) || n.enumerable\n    });\n    return e1;\n};\nvar br = (e1)=>Gp(Un({}, \"__esModule\", {\n        value: !0\n    }), e1);\nvar yr, xt, St, Hp, Ji, Vn = U(()=>{\n    \"use strict\";\n    yr = new Map, xt = [], St = (e1, t, r)=>{\n        if (t && typeof t.init == \"function\" && typeof t.createInferenceSessionHandler == \"function\") {\n            let n = yr.get(e1);\n            if (n === void 0) yr.set(e1, {\n                backend: t,\n                priority: r\n            });\n            else {\n                if (n.priority > r) return;\n                if (n.priority === r && n.backend !== t) throw new Error('cannot register backend \"'.concat(e1, '\" using priority ').concat(r));\n            }\n            if (r >= 0) {\n                let o = xt.indexOf(e1);\n                o !== -1 && xt.splice(o, 1);\n                for(let i = 0; i < xt.length; i++)if (yr.get(xt[i]).priority <= r) {\n                    xt.splice(i, 0, e1);\n                    return;\n                }\n                xt.push(e1);\n            }\n            return;\n        }\n        throw new TypeError(\"not a valid backend\");\n    }, Hp = async (e1)=>{\n        let t = yr.get(e1);\n        if (!t) return \"backend not found.\";\n        if (t.initialized) return t.backend;\n        if (t.aborted) return t.error;\n        {\n            let r = !!t.initPromise;\n            try {\n                return r || (t.initPromise = t.backend.init(e1)), await t.initPromise, t.initialized = !0, t.backend;\n            } catch (n) {\n                return r || (t.error = \"\".concat(n), t.aborted = !0), t.error;\n            } finally{\n                delete t.initPromise;\n            }\n        }\n    }, Ji = async (e1)=>{\n        let t = e1.executionProviders || [], r = t.map((l)=>typeof l == \"string\" ? l : l.name), n = r.length === 0 ? xt : r, o, i = [], a = new Set;\n        for (let l of n){\n            let p = await Hp(l);\n            typeof p == \"string\" ? i.push({\n                name: l,\n                err: p\n            }) : (o || (o = p), o === p && a.add(l));\n        }\n        if (!o) throw new Error(\"no available backend found. ERR: \".concat(i.map((l)=>\"[\".concat(l.name, \"] \").concat(l.err)).join(\", \")));\n        for (let { name: l, err: p } of i)r.includes(l) && console.warn('removing requested execution provider \"'.concat(l, '\" from session options because it is not available: ').concat(p));\n        let d = t.filter((l)=>a.has(typeof l == \"string\" ? l : l.name));\n        return [\n            o,\n            new Proxy(e1, {\n                get: (l, p)=>p === \"executionProviders\" ? d : Reflect.get(l, p)\n            })\n        ];\n    };\n});\nvar ea = U(()=>{\n    \"use strict\";\n    Vn();\n});\nvar ta, ra = U(()=>{\n    \"use strict\";\n    ta = \"1.21.0-dev.20241212-1f88284f96\";\n});\nvar na, Re, Wn = U(()=>{\n    \"use strict\";\n    ra();\n    na = \"warning\", Re = {\n        wasm: {},\n        webgl: {},\n        webgpu: {},\n        versions: {\n            common: ta\n        },\n        set logLevel (e){\n            if (e !== void 0) {\n                if (typeof e != \"string\" || [\n                    \"verbose\",\n                    \"info\",\n                    \"warning\",\n                    \"error\",\n                    \"fatal\"\n                ].indexOf(e) === -1) throw new Error(\"Unsupported logging level: \".concat(e));\n                na = e;\n            }\n        },\n        get logLevel () {\n            return na;\n        }\n    };\n    Object.defineProperty(Re, \"logLevel\", {\n        enumerable: !0\n    });\n});\nvar ve, oa = U(()=>{\n    \"use strict\";\n    Wn();\n    ve = Re;\n});\nvar ia, aa, sa = U(()=>{\n    \"use strict\";\n    ia = (e1, t)=>{\n        let r = typeof document < \"u\" ? document.createElement(\"canvas\") : new OffscreenCanvas(1, 1);\n        r.width = e1.dims[3], r.height = e1.dims[2];\n        let n = r.getContext(\"2d\");\n        if (n != null) {\n            let o, i;\n            (t === null || t === void 0 ? void 0 : t.tensorLayout) !== void 0 && t.tensorLayout === \"NHWC\" ? (o = e1.dims[2], i = e1.dims[3]) : (o = e1.dims[3], i = e1.dims[2]);\n            let a = (t === null || t === void 0 ? void 0 : t.format) !== void 0 ? t.format : \"RGB\", d = t === null || t === void 0 ? void 0 : t.norm, l, p;\n            d === void 0 || d.mean === void 0 ? l = [\n                255,\n                255,\n                255,\n                255\n            ] : typeof d.mean == \"number\" ? l = [\n                d.mean,\n                d.mean,\n                d.mean,\n                d.mean\n            ] : (l = [\n                d.mean[0],\n                d.mean[1],\n                d.mean[2],\n                0\n            ], d.mean[3] !== void 0 && (l[3] = d.mean[3])), d === void 0 || d.bias === void 0 ? p = [\n                0,\n                0,\n                0,\n                0\n            ] : typeof d.bias == \"number\" ? p = [\n                d.bias,\n                d.bias,\n                d.bias,\n                d.bias\n            ] : (p = [\n                d.bias[0],\n                d.bias[1],\n                d.bias[2],\n                0\n            ], d.bias[3] !== void 0 && (p[3] = d.bias[3]));\n            let m = i * o, u = 0, h = m, _ = m * 2, y = -1;\n            a === \"RGBA\" ? (u = 0, h = m, _ = m * 2, y = m * 3) : a === \"RGB\" ? (u = 0, h = m, _ = m * 2) : a === \"RBG\" && (u = 0, _ = m, h = m * 2);\n            for(let g = 0; g < i; g++)for(let x = 0; x < o; x++){\n                let $ = (e1.data[u++] - p[0]) * l[0], v = (e1.data[h++] - p[1]) * l[1], S = (e1.data[_++] - p[2]) * l[2], T = y === -1 ? 255 : (e1.data[y++] - p[3]) * l[3];\n                n.fillStyle = \"rgba(\" + $ + \",\" + v + \",\" + S + \",\" + T + \")\", n.fillRect(x, g, 1, 1);\n            }\n            if (\"toDataURL\" in r) return r.toDataURL();\n            throw new Error(\"toDataURL is not supported\");\n        } else throw new Error(\"Can not access image data\");\n    }, aa = (e1, t)=>{\n        let r = typeof document < \"u\" ? document.createElement(\"canvas\").getContext(\"2d\") : new OffscreenCanvas(1, 1).getContext(\"2d\"), n;\n        if (r != null) {\n            let o, i, a;\n            (t === null || t === void 0 ? void 0 : t.tensorLayout) !== void 0 && t.tensorLayout === \"NHWC\" ? (o = e1.dims[2], i = e1.dims[1], a = e1.dims[3]) : (o = e1.dims[3], i = e1.dims[2], a = e1.dims[1]);\n            let d = t !== void 0 && t.format !== void 0 ? t.format : \"RGB\", l = t === null || t === void 0 ? void 0 : t.norm, p, m;\n            l === void 0 || l.mean === void 0 ? p = [\n                255,\n                255,\n                255,\n                255\n            ] : typeof l.mean == \"number\" ? p = [\n                l.mean,\n                l.mean,\n                l.mean,\n                l.mean\n            ] : (p = [\n                l.mean[0],\n                l.mean[1],\n                l.mean[2],\n                255\n            ], l.mean[3] !== void 0 && (p[3] = l.mean[3])), l === void 0 || l.bias === void 0 ? m = [\n                0,\n                0,\n                0,\n                0\n            ] : typeof l.bias == \"number\" ? m = [\n                l.bias,\n                l.bias,\n                l.bias,\n                l.bias\n            ] : (m = [\n                l.bias[0],\n                l.bias[1],\n                l.bias[2],\n                0\n            ], l.bias[3] !== void 0 && (m[3] = l.bias[3]));\n            let u = i * o;\n            if (t !== void 0 && (t.format !== void 0 && a === 4 && t.format !== \"RGBA\" || a === 3 && t.format !== \"RGB\" && t.format !== \"BGR\")) throw new Error(\"Tensor format doesn't match input tensor dims\");\n            let h = 4, _ = 0, y = 1, g = 2, x = 3, $ = 0, v = u, S = u * 2, T = -1;\n            d === \"RGBA\" ? ($ = 0, v = u, S = u * 2, T = u * 3) : d === \"RGB\" ? ($ = 0, v = u, S = u * 2) : d === \"RBG\" && ($ = 0, S = u, v = u * 2), n = r.createImageData(o, i);\n            for(let A = 0; A < i * o; _ += h, y += h, g += h, x += h, A++)n.data[_] = (e1.data[$++] - m[0]) * p[0], n.data[y] = (e1.data[v++] - m[1]) * p[1], n.data[g] = (e1.data[S++] - m[2]) * p[2], n.data[x] = T === -1 ? 255 : (e1.data[T++] - m[3]) * p[3];\n        } else throw new Error(\"Can not access image data\");\n        return n;\n    };\n});\nvar Ln, ua, da, la, ca, pa, ma = U(()=>{\n    \"use strict\";\n    _r();\n    Ln = (e1, t)=>{\n        if (e1 === void 0) throw new Error(\"Image buffer must be defined\");\n        if (t.height === void 0 || t.width === void 0) throw new Error(\"Image height and width must be defined\");\n        if (t.tensorLayout === \"NHWC\") throw new Error(\"NHWC Tensor layout is not supported yet\");\n        var _t_norm;\n        let { height: r, width: n } = t, o = (_t_norm = t.norm) !== null && _t_norm !== void 0 ? _t_norm : {\n            mean: 255,\n            bias: 0\n        }, i, a;\n        var _o_mean_, _o_bias_;\n        typeof o.mean == \"number\" ? i = [\n            o.mean,\n            o.mean,\n            o.mean,\n            o.mean\n        ] : i = [\n            o.mean[0],\n            o.mean[1],\n            o.mean[2],\n            (_o_mean_ = o.mean[3]) !== null && _o_mean_ !== void 0 ? _o_mean_ : 255\n        ], typeof o.bias == \"number\" ? a = [\n            o.bias,\n            o.bias,\n            o.bias,\n            o.bias\n        ] : a = [\n            o.bias[0],\n            o.bias[1],\n            o.bias[2],\n            (_o_bias_ = o.bias[3]) !== null && _o_bias_ !== void 0 ? _o_bias_ : 0\n        ];\n        let d = t.format !== void 0 ? t.format : \"RGBA\", l = t.tensorFormat !== void 0 && t.tensorFormat !== void 0 ? t.tensorFormat : \"RGB\", p = r * n, m = l === \"RGBA\" ? new Float32Array(p * 4) : new Float32Array(p * 3), u = 4, h = 0, _ = 1, y = 2, g = 3, x = 0, $ = p, v = p * 2, S = -1;\n        d === \"RGB\" && (u = 3, h = 0, _ = 1, y = 2, g = -1), l === \"RGBA\" ? S = p * 3 : l === \"RBG\" ? (x = 0, v = p, $ = p * 2) : l === \"BGR\" && (v = 0, $ = p, x = p * 2);\n        for(let A = 0; A < p; A++, h += u, y += u, _ += u, g += u)m[x++] = (e1[h] + a[0]) / i[0], m[$++] = (e1[_] + a[1]) / i[1], m[v++] = (e1[y] + a[2]) / i[2], S !== -1 && g !== -1 && (m[S++] = (e1[g] + a[3]) / i[3]);\n        return l === \"RGBA\" ? new ze(\"float32\", m, [\n            1,\n            4,\n            r,\n            n\n        ]) : new ze(\"float32\", m, [\n            1,\n            3,\n            r,\n            n\n        ]);\n    }, ua = async (e1, t)=>{\n        let r = typeof HTMLImageElement < \"u\" && e1 instanceof HTMLImageElement, n = typeof ImageData < \"u\" && e1 instanceof ImageData, o = typeof ImageBitmap < \"u\" && e1 instanceof ImageBitmap, i = typeof e1 == \"string\", a, d = t !== null && t !== void 0 ? t : {}, l = ()=>{\n            if (typeof document < \"u\") return document.createElement(\"canvas\");\n            if (typeof OffscreenCanvas < \"u\") return new OffscreenCanvas(1, 1);\n            throw new Error(\"Canvas is not supported\");\n        }, p = (m)=>typeof HTMLCanvasElement < \"u\" && m instanceof HTMLCanvasElement || m instanceof OffscreenCanvas ? m.getContext(\"2d\") : null;\n        if (r) {\n            let m = l();\n            m.width = e1.width, m.height = e1.height;\n            let u = p(m);\n            if (u != null) {\n                let h = e1.height, _ = e1.width;\n                if (t !== void 0 && t.resizedHeight !== void 0 && t.resizedWidth !== void 0 && (h = t.resizedHeight, _ = t.resizedWidth), t !== void 0) {\n                    if (d = t, t.tensorFormat !== void 0) throw new Error(\"Image input config format must be RGBA for HTMLImageElement\");\n                    d.tensorFormat = \"RGBA\", d.height = h, d.width = _;\n                } else d.tensorFormat = \"RGBA\", d.height = h, d.width = _;\n                u.drawImage(e1, 0, 0), a = u.getImageData(0, 0, _, h).data;\n            } else throw new Error(\"Can not access image data\");\n        } else if (n) {\n            let m, u;\n            if (t !== void 0 && t.resizedWidth !== void 0 && t.resizedHeight !== void 0 ? (m = t.resizedHeight, u = t.resizedWidth) : (m = e1.height, u = e1.width), t !== void 0 && (d = t), d.format = \"RGBA\", d.height = m, d.width = u, t !== void 0) {\n                let h = l();\n                h.width = u, h.height = m;\n                let _ = p(h);\n                if (_ != null) _.putImageData(e1, 0, 0), a = _.getImageData(0, 0, u, m).data;\n                else throw new Error(\"Can not access image data\");\n            } else a = e1.data;\n        } else if (o) {\n            if (t === void 0) throw new Error(\"Please provide image config with format for Imagebitmap\");\n            let m = l();\n            m.width = e1.width, m.height = e1.height;\n            let u = p(m);\n            if (u != null) {\n                let h = e1.height, _ = e1.width;\n                return u.drawImage(e1, 0, 0, _, h), a = u.getImageData(0, 0, _, h).data, d.height = h, d.width = _, Ln(a, d);\n            } else throw new Error(\"Can not access image data\");\n        } else {\n            if (i) return new Promise((m, u)=>{\n                let h = l(), _ = p(h);\n                if (!e1 || !_) return u();\n                let y = new Image;\n                y.crossOrigin = \"Anonymous\", y.src = e1, y.onload = ()=>{\n                    h.width = y.width, h.height = y.height, _.drawImage(y, 0, 0, h.width, h.height);\n                    let g = _.getImageData(0, 0, h.width, h.height);\n                    d.height = h.height, d.width = h.width, m(Ln(g.data, d));\n                };\n            });\n            throw new Error(\"Input data provided is not supported - aborted tensor creation\");\n        }\n        if (a !== void 0) return Ln(a, d);\n        throw new Error(\"Input data provided is not supported - aborted tensor creation\");\n    }, da = (e1, t)=>{\n        let { width: r, height: n, download: o, dispose: i } = t, a = [\n            1,\n            n,\n            r,\n            4\n        ];\n        return new ze({\n            location: \"texture\",\n            type: \"float32\",\n            texture: e1,\n            dims: a,\n            download: o,\n            dispose: i\n        });\n    }, la = (e1, t)=>{\n        let { dataType: r, dims: n, download: o, dispose: i } = t;\n        return new ze({\n            location: \"gpu-buffer\",\n            type: r !== null && r !== void 0 ? r : \"float32\",\n            gpuBuffer: e1,\n            dims: n,\n            download: o,\n            dispose: i\n        });\n    }, ca = (e1, t)=>{\n        let { dataType: r, dims: n, download: o, dispose: i } = t;\n        return new ze({\n            location: \"ml-tensor\",\n            type: r !== null && r !== void 0 ? r : \"float32\",\n            mlTensor: e1,\n            dims: n,\n            download: o,\n            dispose: i\n        });\n    }, pa = (e1, t, r)=>new ze({\n            location: \"cpu-pinned\",\n            type: e1,\n            data: t,\n            dims: r !== null && r !== void 0 ? r : [\n                t.length\n            ]\n        });\n});\nvar Tt, qt, fa, ha, ga = U(()=>{\n    \"use strict\";\n    Tt = new Map([\n        [\n            \"float32\",\n            Float32Array\n        ],\n        [\n            \"uint8\",\n            Uint8Array\n        ],\n        [\n            \"int8\",\n            Int8Array\n        ],\n        [\n            \"uint16\",\n            Uint16Array\n        ],\n        [\n            \"int16\",\n            Int16Array\n        ],\n        [\n            \"int32\",\n            Int32Array\n        ],\n        [\n            \"bool\",\n            Uint8Array\n        ],\n        [\n            \"float64\",\n            Float64Array\n        ],\n        [\n            \"uint32\",\n            Uint32Array\n        ],\n        [\n            \"int4\",\n            Uint8Array\n        ],\n        [\n            \"uint4\",\n            Uint8Array\n        ]\n    ]), qt = new Map([\n        [\n            Float32Array,\n            \"float32\"\n        ],\n        [\n            Uint8Array,\n            \"uint8\"\n        ],\n        [\n            Int8Array,\n            \"int8\"\n        ],\n        [\n            Uint16Array,\n            \"uint16\"\n        ],\n        [\n            Int16Array,\n            \"int16\"\n        ],\n        [\n            Int32Array,\n            \"int32\"\n        ],\n        [\n            Float64Array,\n            \"float64\"\n        ],\n        [\n            Uint32Array,\n            \"uint32\"\n        ]\n    ]), fa = !1, ha = ()=>{\n        if (!fa) {\n            fa = !0;\n            let e1 = typeof BigInt64Array < \"u\" && BigInt64Array.from, t = typeof BigUint64Array < \"u\" && BigUint64Array.from, r = typeof Float16Array < \"u\" && Float16Array.from;\n            e1 && (Tt.set(\"int64\", BigInt64Array), qt.set(BigInt64Array, \"int64\")), t && (Tt.set(\"uint64\", BigUint64Array), qt.set(BigUint64Array, \"uint64\")), r ? (Tt.set(\"float16\", Float16Array), qt.set(Float16Array, \"float16\")) : Tt.set(\"float16\", Uint16Array);\n        }\n    };\n});\nvar ba, ya, _a = U(()=>{\n    \"use strict\";\n    _r();\n    ba = (e1)=>{\n        let t = 1;\n        for(let r = 0; r < e1.length; r++){\n            let n = e1[r];\n            if (typeof n != \"number\" || !Number.isSafeInteger(n)) throw new TypeError(\"dims[\".concat(r, \"] must be an integer, got: \").concat(n));\n            if (n < 0) throw new RangeError(\"dims[\".concat(r, \"] must be a non-negative integer, got: \").concat(n));\n            t *= n;\n        }\n        return t;\n    }, ya = (e1, t)=>{\n        switch(e1.location){\n            case \"cpu\":\n                return new ze(e1.type, e1.data, t);\n            case \"cpu-pinned\":\n                return new ze({\n                    location: \"cpu-pinned\",\n                    data: e1.data,\n                    type: e1.type,\n                    dims: t\n                });\n            case \"texture\":\n                return new ze({\n                    location: \"texture\",\n                    texture: e1.texture,\n                    type: e1.type,\n                    dims: t\n                });\n            case \"gpu-buffer\":\n                return new ze({\n                    location: \"gpu-buffer\",\n                    gpuBuffer: e1.gpuBuffer,\n                    type: e1.type,\n                    dims: t\n                });\n            case \"ml-tensor\":\n                return new ze({\n                    location: \"ml-tensor\",\n                    mlTensor: e1.mlTensor,\n                    type: e1.type,\n                    dims: t\n                });\n            default:\n                throw new Error(\"tensorReshape: tensor location \".concat(e1.location, \" is not supported\"));\n        }\n    };\n});\nvar ze, _r = U(()=>{\n    \"use strict\";\n    sa();\n    ma();\n    ga();\n    _a();\n    ze = class {\n        static async fromImage(t, r) {\n            return ua(t, r);\n        }\n        static fromTexture(t, r) {\n            return da(t, r);\n        }\n        static fromGpuBuffer(t, r) {\n            return la(t, r);\n        }\n        static fromMLTensor(t, r) {\n            return ca(t, r);\n        }\n        static fromPinnedBuffer(t, r, n) {\n            return pa(t, r, n);\n        }\n        toDataURL(t) {\n            return ia(this, t);\n        }\n        toImageData(t) {\n            return aa(this, t);\n        }\n        get data() {\n            if (this.ensureValid(), !this.cpuData) throw new Error(\"The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.\");\n            return this.cpuData;\n        }\n        get location() {\n            return this.dataLocation;\n        }\n        get texture() {\n            if (this.ensureValid(), !this.gpuTextureData) throw new Error(\"The data is not stored as a WebGL texture.\");\n            return this.gpuTextureData;\n        }\n        get gpuBuffer() {\n            if (this.ensureValid(), !this.gpuBufferData) throw new Error(\"The data is not stored as a WebGPU buffer.\");\n            return this.gpuBufferData;\n        }\n        get mlTensor() {\n            if (this.ensureValid(), !this.mlTensorData) throw new Error(\"The data is not stored as a WebNN MLTensor.\");\n            return this.mlTensorData;\n        }\n        async getData(t) {\n            switch(this.ensureValid(), this.dataLocation){\n                case \"cpu\":\n                case \"cpu-pinned\":\n                    return this.data;\n                case \"texture\":\n                case \"gpu-buffer\":\n                case \"ml-tensor\":\n                    {\n                        if (!this.downloader) throw new Error(\"The current tensor is not created with a specified data downloader.\");\n                        if (this.isDownloading) throw new Error(\"The current tensor is being downloaded.\");\n                        try {\n                            this.isDownloading = !0;\n                            let r = await this.downloader();\n                            return this.downloader = void 0, this.dataLocation = \"cpu\", this.cpuData = r, t && this.disposer && (this.disposer(), this.disposer = void 0), r;\n                        } finally{\n                            this.isDownloading = !1;\n                        }\n                    }\n                default:\n                    throw new Error(\"cannot get data from location: \".concat(this.dataLocation));\n            }\n        }\n        dispose() {\n            if (this.isDownloading) throw new Error(\"The current tensor is being downloaded.\");\n            this.disposer && (this.disposer(), this.disposer = void 0), this.cpuData = void 0, this.gpuTextureData = void 0, this.gpuBufferData = void 0, this.mlTensorData = void 0, this.downloader = void 0, this.isDownloading = void 0, this.dataLocation = \"none\";\n        }\n        ensureValid() {\n            if (this.dataLocation === \"none\") throw new Error(\"The tensor is disposed.\");\n        }\n        reshape(t) {\n            if (this.ensureValid(), this.downloader || this.disposer) throw new Error(\"Cannot reshape a tensor that owns GPU resource.\");\n            return ya(this, t);\n        }\n        constructor(t, r, n){\n            ha();\n            let o, i;\n            if (typeof t == \"object\" && \"location\" in t) switch(this.dataLocation = t.location, o = t.type, i = t.dims, t.location){\n                case \"cpu-pinned\":\n                    {\n                        let d = Tt.get(o);\n                        if (!d) throw new TypeError('unsupported type \"'.concat(o, '\" to create tensor from pinned buffer'));\n                        if (!(t.data instanceof d)) throw new TypeError(\"buffer should be of type \".concat(d.name));\n                        this.cpuData = t.data;\n                        break;\n                    }\n                case \"texture\":\n                    {\n                        if (o !== \"float32\") throw new TypeError('unsupported type \"'.concat(o, '\" to create tensor from texture'));\n                        this.gpuTextureData = t.texture, this.downloader = t.download, this.disposer = t.dispose;\n                        break;\n                    }\n                case \"gpu-buffer\":\n                    {\n                        if (o !== \"float32\" && o !== \"float16\" && o !== \"int32\" && o !== \"int64\" && o !== \"uint32\" && o !== \"uint8\" && o !== \"bool\" && o !== \"uint4\" && o !== \"int4\") throw new TypeError('unsupported type \"'.concat(o, '\" to create tensor from gpu buffer'));\n                        this.gpuBufferData = t.gpuBuffer, this.downloader = t.download, this.disposer = t.dispose;\n                        break;\n                    }\n                case \"ml-tensor\":\n                    {\n                        if (o !== \"float32\" && o !== \"float16\" && o !== \"int32\" && o !== \"int64\" && o !== \"uint32\" && o !== \"uint64\" && o !== \"int8\" && o !== \"uint8\" && o !== \"bool\" && o !== \"uint4\" && o !== \"int4\") throw new TypeError('unsupported type \"'.concat(o, '\" to create tensor from MLTensor'));\n                        this.mlTensorData = t.mlTensor, this.downloader = t.download, this.disposer = t.dispose;\n                        break;\n                    }\n                default:\n                    throw new Error(\"Tensor constructor: unsupported location '\".concat(this.dataLocation, \"'\"));\n            }\n            else {\n                let d, l;\n                if (typeof t == \"string\") if (o = t, l = n, t === \"string\") {\n                    if (!Array.isArray(r)) throw new TypeError(\"A string tensor's data must be a string array.\");\n                    d = r;\n                } else {\n                    let p = Tt.get(t);\n                    if (p === void 0) throw new TypeError(\"Unsupported tensor type: \".concat(t, \".\"));\n                    if (Array.isArray(r)) {\n                        if (t === \"float16\" && p === Uint16Array || t === \"uint4\" || t === \"int4\") throw new TypeError(\"Creating a \".concat(t, \" tensor from number array is not supported. Please use \").concat(p.name, \" as data.\"));\n                        t === \"uint64\" || t === \"int64\" ? d = p.from(r, BigInt) : d = p.from(r);\n                    } else if (r instanceof p) d = r;\n                    else if (r instanceof Uint8ClampedArray) if (t === \"uint8\") d = Uint8Array.from(r);\n                    else throw new TypeError(\"A Uint8ClampedArray tensor's data must be type of uint8\");\n                    else throw new TypeError(\"A \".concat(o, \" tensor's data must be type of \").concat(p));\n                }\n                else if (l = r, Array.isArray(t)) {\n                    if (t.length === 0) throw new TypeError(\"Tensor type cannot be inferred from an empty array.\");\n                    let p = typeof t[0];\n                    if (p === \"string\") o = \"string\", d = t;\n                    else if (p === \"boolean\") o = \"bool\", d = Uint8Array.from(t);\n                    else throw new TypeError(\"Invalid element type of data array: \".concat(p, \".\"));\n                } else if (t instanceof Uint8ClampedArray) o = \"uint8\", d = Uint8Array.from(t);\n                else {\n                    let p = qt.get(t.constructor);\n                    if (p === void 0) throw new TypeError(\"Unsupported type for tensor data: \".concat(t.constructor, \".\"));\n                    o = p, d = t;\n                }\n                if (l === void 0) l = [\n                    d.length\n                ];\n                else if (!Array.isArray(l)) throw new TypeError(\"A tensor's dims must be a number array\");\n                i = l, this.cpuData = d, this.dataLocation = \"cpu\";\n            }\n            let a = ba(i);\n            if (this.cpuData && a !== this.cpuData.length && !((o === \"uint4\" || o === \"int4\") && Math.ceil(a / 2) === this.cpuData.length)) throw new Error(\"Tensor's size(\".concat(a, \") does not match data length(\").concat(this.cpuData.length, \").\"));\n            this.type = o, this.dims = i, this.size = a;\n        }\n    };\n});\nvar He, Gn = U(()=>{\n    \"use strict\";\n    _r();\n    He = ze;\n});\nvar wr, wa, Ue, De, Hn = U(()=>{\n    \"use strict\";\n    Wn();\n    wr = (e1, t)=>{\n        (typeof Re.trace > \"u\" ? !Re.wasm.trace : !Re.trace) || console.timeStamp(\"\".concat(e1, \"::ORT::\").concat(t));\n    }, wa = (e1, t)=>{\n        var _stack;\n        let r = ((_stack = new Error().stack) === null || _stack === void 0 ? void 0 : _stack.split(/\\r\\n|\\r|\\n/g)) || [], n = !1;\n        for(let o = 0; o < r.length; o++){\n            if (n && !r[o].includes(\"TRACE_FUNC\")) {\n                let i = \"FUNC_\".concat(e1, \"::\").concat(r[o].trim().split(\" \")[1]);\n                t && (i += \"::\".concat(t)), wr(\"CPU\", i);\n                return;\n            }\n            r[o].includes(\"TRACE_FUNC\") && (n = !0);\n        }\n    }, Ue = (e1)=>{\n        (typeof Re.trace > \"u\" ? !Re.wasm.trace : !Re.trace) || wa(\"BEGIN\", e1);\n    }, De = (e1)=>{\n        (typeof Re.trace > \"u\" ? !Re.wasm.trace : !Re.trace) || wa(\"END\", e1);\n    };\n});\nvar vr, va = U(()=>{\n    \"use strict\";\n    Vn();\n    Gn();\n    Hn();\n    vr = class e1 {\n        async run(t, r, n) {\n            Ue();\n            let o = {}, i = {};\n            if (typeof t != \"object\" || t === null || t instanceof He || Array.isArray(t)) throw new TypeError(\"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\");\n            let a = !0;\n            if (typeof r == \"object\") {\n                if (r === null) throw new TypeError(\"Unexpected argument[1]: cannot be null.\");\n                if (r instanceof He) throw new TypeError(\"'fetches' cannot be a Tensor\");\n                if (Array.isArray(r)) {\n                    if (r.length === 0) throw new TypeError(\"'fetches' cannot be an empty array.\");\n                    a = !1;\n                    for (let p of r){\n                        if (typeof p != \"string\") throw new TypeError(\"'fetches' must be a string array or an object.\");\n                        if (this.outputNames.indexOf(p) === -1) throw new RangeError(\"'fetches' contains invalid output name: \".concat(p, \".\"));\n                        o[p] = null;\n                    }\n                    if (typeof n == \"object\" && n !== null) i = n;\n                    else if (typeof n < \"u\") throw new TypeError(\"'options' must be an object.\");\n                } else {\n                    let p = !1, m = Object.getOwnPropertyNames(r);\n                    for (let u of this.outputNames)if (m.indexOf(u) !== -1) {\n                        let h = r[u];\n                        (h === null || h instanceof He) && (p = !0, a = !1, o[u] = h);\n                    }\n                    if (p) {\n                        if (typeof n == \"object\" && n !== null) i = n;\n                        else if (typeof n < \"u\") throw new TypeError(\"'options' must be an object.\");\n                    } else i = r;\n                }\n            } else if (typeof r < \"u\") throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");\n            for (let p of this.inputNames)if (typeof t[p] > \"u\") throw new Error(\"input '\".concat(p, \"' is missing in 'feeds'.\"));\n            if (a) for (let p of this.outputNames)o[p] = null;\n            let d = await this.handler.run(t, o, i), l = {};\n            for(let p in d)if (Object.hasOwnProperty.call(d, p)) {\n                let m = d[p];\n                m instanceof He ? l[p] = m : l[p] = new He(m.type, m.data, m.dims);\n            }\n            return De(), l;\n        }\n        async release() {\n            return this.handler.dispose();\n        }\n        static async create(t, r, n, o) {\n            Ue();\n            let i, a = {};\n            if (typeof t == \"string\") {\n                if (i = t, typeof r == \"object\" && r !== null) a = r;\n                else if (typeof r < \"u\") throw new TypeError(\"'options' must be an object.\");\n            } else if (t instanceof Uint8Array) {\n                if (i = t, typeof r == \"object\" && r !== null) a = r;\n                else if (typeof r < \"u\") throw new TypeError(\"'options' must be an object.\");\n            } else if (t instanceof ArrayBuffer || typeof SharedArrayBuffer < \"u\" && t instanceof SharedArrayBuffer) {\n                let m = t, u = 0, h = t.byteLength;\n                if (typeof r == \"object\" && r !== null) a = r;\n                else if (typeof r == \"number\") {\n                    if (u = r, !Number.isSafeInteger(u)) throw new RangeError(\"'byteOffset' must be an integer.\");\n                    if (u < 0 || u >= m.byteLength) throw new RangeError(\"'byteOffset' is out of range [0, \".concat(m.byteLength, \").\"));\n                    if (h = t.byteLength - u, typeof n == \"number\") {\n                        if (h = n, !Number.isSafeInteger(h)) throw new RangeError(\"'byteLength' must be an integer.\");\n                        if (h <= 0 || u + h > m.byteLength) throw new RangeError(\"'byteLength' is out of range (0, \".concat(m.byteLength - u, \"].\"));\n                        if (typeof o == \"object\" && o !== null) a = o;\n                        else if (typeof o < \"u\") throw new TypeError(\"'options' must be an object.\");\n                    } else if (typeof n < \"u\") throw new TypeError(\"'byteLength' must be a number.\");\n                } else if (typeof r < \"u\") throw new TypeError(\"'options' must be an object.\");\n                i = new Uint8Array(m, u, h);\n            } else throw new TypeError(\"Unexpected argument[0]: must be 'path' or 'buffer'.\");\n            let [d, l] = await Ji(a), p = await d.createInferenceSessionHandler(i, l);\n            return De(), new e1(p);\n        }\n        startProfiling() {\n            this.handler.startProfiling();\n        }\n        endProfiling() {\n            this.handler.endProfiling();\n        }\n        get inputNames() {\n            return this.handler.inputNames;\n        }\n        get outputNames() {\n            return this.handler.outputNames;\n        }\n        constructor(t){\n            this.handler = t;\n        }\n    };\n});\nvar Fp, $a = U(()=>{\n    \"use strict\";\n    va();\n    Fp = vr;\n});\nvar xa = U(()=>{\n    \"use strict\";\n});\nvar Sa = U(_c1 = ()=>{\n    \"use strict\";\n});\n_c2 = Sa;\nvar Ta = U(_c3 = ()=>{\n    \"use strict\";\n});\n_c4 = Ta;\nvar Ia = U(_c5 = ()=>{\n    \"use strict\";\n});\n_c6 = Ia;\nvar Fn = {};\nFt(Fn, {\n    InferenceSession: ()=>Fp,\n    TRACE: ()=>wr,\n    TRACE_FUNC_BEGIN: ()=>Ue,\n    TRACE_FUNC_END: ()=>De,\n    Tensor: ()=>He,\n    env: ()=>ve,\n    registerBackend: ()=>St\n});\nvar We = U(_c7 = ()=>{\n    \"use strict\";\n    ea();\n    oa();\n    $a();\n    Gn();\n    xa();\n    Sa();\n    Hn();\n    Ta();\n    Ia();\n});\n_c8 = We;\nvar $r = U(()=>{\n    \"use strict\";\n});\nvar Ea = {};\nFt(Ea, {\n    default: ()=>qp\n});\nvar Aa, ka, qp, Pa = U(()=>{\n    \"use strict\";\n    var _globalThis_self;\n    qn();\n    gt();\n    xr();\n    Aa = \"ort-wasm-proxy-worker\", ka = ((_globalThis_self = globalThis.self) === null || _globalThis_self === void 0 ? void 0 : _globalThis_self.name) === Aa;\n    ka && (self.onmessage = (e1)=>{\n        let { type: t, in: r } = e1.data;\n        try {\n            switch(t){\n                case \"init-wasm\":\n                    Sr(r.wasm).then(()=>{\n                        Tr(r).then(()=>{\n                            postMessage({\n                                type: t\n                            });\n                        }, (n)=>{\n                            postMessage({\n                                type: t,\n                                err: n\n                            });\n                        });\n                    }, (n)=>{\n                        postMessage({\n                            type: t,\n                            err: n\n                        });\n                    });\n                    break;\n                case \"init-ep\":\n                    {\n                        let { epName: n, env: o } = r;\n                        Ir(o, n).then(()=>{\n                            postMessage({\n                                type: t\n                            });\n                        }, (i)=>{\n                            postMessage({\n                                type: t,\n                                err: i\n                            });\n                        });\n                        break;\n                    }\n                case \"copy-from\":\n                    {\n                        let { buffer: n } = r, o = Kt(n);\n                        postMessage({\n                            type: t,\n                            out: o\n                        });\n                        break;\n                    }\n                case \"create\":\n                    {\n                        let { model: n, options: o } = r;\n                        Cr(n, o).then((i)=>{\n                            postMessage({\n                                type: t,\n                                out: i\n                            });\n                        }, (i)=>{\n                            postMessage({\n                                type: t,\n                                err: i\n                            });\n                        });\n                        break;\n                    }\n                case \"release\":\n                    Ar(r), postMessage({\n                        type: t\n                    });\n                    break;\n                case \"run\":\n                    {\n                        let { sessionId: n, inputIndices: o, inputs: i, outputIndices: a, options: d } = r;\n                        kr(n, o, i, a, new Array(a.length).fill(null), d).then((l)=>{\n                            l.some((p)=>p[3] !== \"cpu\") ? postMessage({\n                                type: t,\n                                err: \"Proxy does not support non-cpu tensor location.\"\n                            }) : postMessage({\n                                type: t,\n                                out: l\n                            }, Pr([\n                                ...i,\n                                ...l\n                            ]));\n                        }, (l)=>{\n                            postMessage({\n                                type: t,\n                                err: l\n                            });\n                        });\n                        break;\n                    }\n                case \"end-profiling\":\n                    Er(r), postMessage({\n                        type: t\n                    });\n                    break;\n                default:\n            }\n        } catch (n) {\n            postMessage({\n                type: t,\n                err: n\n            });\n        }\n    });\n    qp = ka ? null : (e1)=>new Worker(e1 !== null && e1 !== void 0 ? e1 : Ne, {\n            type: \"module\",\n            name: Aa\n        });\n});\nvar Oa = {};\nFt(Oa, {\n    default: ()=>Kp\n});\nvar Kn, za, Kp, Da = U(()=>{\n    \"use strict\";\n    var _globalThis_self;\n    za = (Kn = \"file:///Users/amityadav/Desktop/Text-Behind%20Image/node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs\", async function() {\n        let e1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        function t() {\n            return se.buffer != J.buffer && ye(), J;\n        }\n        function r() {\n            return se.buffer != J.buffer && ye(), ne;\n        }\n        function n() {\n            return se.buffer != J.buffer && ye(), be;\n        }\n        function o() {\n            return se.buffer != J.buffer && ye(), Oe;\n        }\n        function i() {\n            return se.buffer != J.buffer && ye(), $e;\n        }\n        function a() {\n            return se.buffer != J.buffer && ye(), le;\n        }\n        function d() {\n            return se.buffer != J.buffer && ye(), W;\n        }\n        function l() {\n            return se.buffer != J.buffer && ye(), Ge;\n        }\n        var p, m, u = Object.assign({}, e1), h = new Promise((s, c)=>{\n            p = s, m = c;\n        }), _ = \"object\" == \"object\", y = typeof importScripts == \"function\", g = y && self.name == \"em-pthread\";\n        u.mountExternalData = (s, c)=>{\n            s.startsWith(\"./\") && (s = s.substring(2)), (u.Fb || (u.Fb = new Map)).set(s, c);\n        }, u.unmountExternalData = ()=>{\n            delete u.Fb;\n        };\n        var _globalThis_SharedArrayBuffer;\n        var x = (_globalThis_SharedArrayBuffer = globalThis.SharedArrayBuffer) !== null && _globalThis_SharedArrayBuffer !== void 0 ? _globalThis_SharedArrayBuffer : new WebAssembly.Memory({\n            initial: 0,\n            maximum: 0,\n            shared: !0\n        }).buffer.constructor;\n        let $ = ()=>{\n            let s = (f, b, w)=>function() {\n                    for(var _len = arguments.length, I = new Array(_len), _key = 0; _key < _len; _key++){\n                        I[_key] = arguments[_key];\n                    }\n                    let O = Xe, B = b === null || b === void 0 ? void 0 : b();\n                    I = f(...I);\n                    let L = b === null || b === void 0 ? void 0 : b();\n                    return B !== L && (f = L, w(B), b = w = null), Xe != O ? new Promise((H, X)=>{\n                        En = {\n                            resolve: H,\n                            reject: X\n                        };\n                    }) : I;\n                }, c = (f)=>async function() {\n                    for(var _len = arguments.length, b = new Array(_len), _key = 0; _key < _len; _key++){\n                        b[_key] = arguments[_key];\n                    }\n                    try {\n                        var _u_Hb;\n                        if (u.Gb) throw Error(\"Session already started\");\n                        let w = u.Gb = {\n                            hc: b[0],\n                            errors: []\n                        }, I = await f(...b);\n                        if (u.Gb !== w) throw Error(\"Session mismatch\");\n                        (_u_Hb = u.Hb) === null || _u_Hb === void 0 ? void 0 : _u_Hb.flush();\n                        let O = w.errors;\n                        if (0 < O.length) {\n                            let B = await Promise.all(O);\n                            if (B = B.filter((L)=>L), 0 < B.length) throw Error(B.join(\"\\n\"));\n                        }\n                        return I;\n                    } finally{\n                        u.Gb = null;\n                    }\n                };\n            u._OrtCreateSession = s(u._OrtCreateSession, ()=>u._OrtCreateSession, (f)=>u._OrtCreateSession = f), u._OrtRun = c(s(u._OrtRun, ()=>u._OrtRun, (f)=>u._OrtRun = f)), u._OrtRunWithBinding = c(s(u._OrtRunWithBinding, ()=>u._OrtRunWithBinding, (f)=>u._OrtRunWithBinding = f)), u._OrtBindInput = s(u._OrtBindInput, ()=>u._OrtBindInput, (f)=>u._OrtBindInput = f), $ = void 0;\n        };\n        u.jsepInit = (s, c)=>{\n            if ($ === null || $ === void 0 ? void 0 : $(), s === \"webgpu\") {\n                [u.Hb, u.Vb, u.Zb, u.Ob, u.Yb, u.kb, u.$b, u.cc, u.Wb, u.Xb, u.ac] = c;\n                let f = u.Hb;\n                u.jsepRegisterBuffer = (b, w, I, O)=>f.registerBuffer(b, w, I, O), u.jsepGetBuffer = (b)=>f.getBuffer(b), u.jsepCreateDownloader = (b, w, I)=>f.createDownloader(b, w, I), u.jsepOnCreateSession = (b)=>{\n                    f.onCreateSession(b);\n                }, u.jsepOnReleaseSession = (b)=>{\n                    f.onReleaseSession(b);\n                }, u.jsepOnRunStart = (b)=>f.onRunStart(b), u.dc = (b, w)=>{\n                    f.upload(b, w);\n                };\n            } else if (s === \"webnn\") {\n                [u.Hb, u.bc, u.Pb, u.jsepEnsureTensor, u.ec, u.jsepDownloadTensor] = c, u.jsepReleaseTensorId = u.Pb;\n                let f = u.Hb;\n                u.jsepOnRunStart = (b)=>f.onRunStart(b), u.jsepRegisterMLContext = (b, w)=>{\n                    f.registerMLContext(b, w);\n                }, u.jsepOnReleaseSession = (b)=>{\n                    f.onReleaseSession(b);\n                }, u.jsepCreateMLTensorDownloader = (b, w)=>f.createMLTensorDownloader(b, w), u.jsepRegisterMLTensor = (b, w, I)=>f.registerMLTensor(b, w, I), u.jsepCreateMLContext = (b)=>f.createMLContext(b), u.jsepRegisterMLConstant = (b, w, I, O, B)=>f.registerMLConstant(b, w, I, O, B, u.Fb);\n            }\n        };\n        var v, S, T = Object.assign({}, u), A = \"./this.program\", k = (s, c)=>{\n            throw c;\n        }, P = \"\";\n        (_ || y) && (y ? P = self.location.href : typeof document < \"u\" && document.currentScript && (P = document.currentScript.src), Kn && (P = Kn), P = P.startsWith(\"blob:\") ? \"\" : P.substr(0, P.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1), y && (S = (s)=>{\n            var c = new XMLHttpRequest;\n            return c.open(\"GET\", s, !1), c.responseType = \"arraybuffer\", c.send(null), new Uint8Array(c.response);\n        }), v = (s, c, f)=>{\n            var b = new XMLHttpRequest;\n            b.open(\"GET\", s, !0), b.responseType = \"arraybuffer\", b.onload = ()=>{\n                b.status == 200 || b.status == 0 && b.response ? c(b.response) : f();\n            }, b.onerror = f, b.send(null);\n        });\n        var D, R = console.log.bind(console), G = console.error.bind(console), K = R, j = G;\n        if (Object.assign(u, T), T = null, g) {\n            let s = function(c) {\n                try {\n                    var f = c.data, b = f.cmd;\n                    if (b === \"load\") {\n                        let w = [];\n                        self.onmessage = (I)=>w.push(I), self.startWorker = ()=>{\n                            postMessage({\n                                cmd: \"loaded\"\n                            });\n                            for (let I of w)s(I);\n                            self.onmessage = s;\n                        };\n                        for (let I of f.handlers)u[I] && !u[I].proxy || (u[I] = function() {\n                            for(var _len = arguments.length, O = new Array(_len), _key = 0; _key < _len; _key++){\n                                O[_key] = arguments[_key];\n                            }\n                            postMessage({\n                                Nb: \"callHandler\",\n                                pc: I,\n                                args: O\n                            });\n                        }, I == \"print\" && (K = u[I]), I == \"printErr\" && (j = u[I]));\n                        se = f.wasmMemory, ye(), V(f.wasmModule);\n                    } else if (b === \"run\") {\n                        Dn(f.pthread_ptr, 0, 0, 1, 0, 0), An(f.pthread_ptr), xc(), Ho(), Q || (Wi(), Q = !0);\n                        try {\n                            Sc(f.start_routine, f.arg);\n                        } catch (w) {\n                            if (w != \"unwind\") throw w;\n                        }\n                    } else b === \"cancel\" ? Mt() && hr(-1) : f.target !== \"setimmediate\" && (b === \"checkMailbox\" ? Q && ir() : b && (j(\"worker: received unknown command \".concat(b)), j(f)));\n                } catch (w) {\n                    throw Li(), w;\n                }\n            };\n            var wg = s, V, Q = !1;\n            j = function() {\n                for(var _len = arguments.length, c = new Array(_len), _key = 0; _key < _len; _key++){\n                    c[_key] = arguments[_key];\n                }\n                c = c.join(\" \"), console.error(c);\n            }, self.alert = function() {\n                for(var _len = arguments.length, c = new Array(_len), _key = 0; _key < _len; _key++){\n                    c[_key] = arguments[_key];\n                }\n                postMessage({\n                    Nb: \"alert\",\n                    text: c.join(\" \"),\n                    rc: Mt()\n                });\n            }, u.instantiateWasm = (c, f)=>new Promise((b)=>{\n                    V = (w)=>{\n                        w = new WebAssembly.Instance(w, No()), f(w), b();\n                    };\n                }), self.onunhandledrejection = (c)=>{\n                throw c.reason || c;\n            }, self.onmessage = s;\n        }\n        u.wasmBinary && (D = u.wasmBinary);\n        var se, Y, ee, J, ne, be, Oe, $e, le, W, q, he, Ge, we = !1;\n        function ye() {\n            var s = se.buffer;\n            u.HEAP8 = J = new Int8Array(s), u.HEAP16 = be = new Int16Array(s), u.HEAPU8 = ne = new Uint8Array(s), u.HEAPU16 = Oe = new Uint16Array(s), u.HEAP32 = $e = new Int32Array(s), u.HEAPU32 = le = new Uint32Array(s), u.HEAPF32 = W = new Float32Array(s), u.HEAPF64 = Ge = new Float64Array(s), u.HEAP64 = q = new BigInt64Array(s), u.HEAPU64 = he = new BigUint64Array(s);\n        }\n        if (!g) {\n            if (!((se = new WebAssembly.Memory({\n                initial: 256,\n                maximum: 65536,\n                shared: !0\n            })).buffer instanceof x)) throw j(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"), Error(\"bad memory\");\n            ye();\n        }\n        var Ye = [], Lt = [], fn = [], Gt = 0, hn = null, Ht = null;\n        function Do() {\n            if (--Gt == 0 && (hn !== null && (clearInterval(hn), hn = null), Ht)) {\n                var s = Ht;\n                Ht = null, s();\n            }\n        }\n        function ct(s) {\n            throw j(s = \"Aborted(\" + s + \")\"), we = !0, ee = 1, s = new WebAssembly.RuntimeError(s + \". Build with -sASSERTIONS for more info.\"), m(s), s;\n        }\n        var gn, Bo = (s)=>s.startsWith(\"data:application/octet-stream;base64,\"), Mo = (s)=>s.startsWith(\"file://\");\n        function Ro(s) {\n            if (s == gn && D) return new Uint8Array(D);\n            if (S) return S(s);\n            throw \"both async and sync fetching of the wasm failed\";\n        }\n        function Uo(s, c, f) {\n            return (function(b) {\n                if (!D && (_ || y)) {\n                    if (typeof fetch == \"function\" && !Mo(b)) return fetch(b, {\n                        credentials: \"same-origin\"\n                    }).then((w)=>{\n                        if (!w.ok) throw \"failed to load wasm binary file at '\".concat(b, \"'\");\n                        return w.arrayBuffer();\n                    }).catch(()=>Ro(b));\n                    if (v) return new Promise((w, I)=>{\n                        v(b, (O)=>w(new Uint8Array(O)), I);\n                    });\n                }\n                return Promise.resolve().then(()=>Ro(b));\n            })(s).then((b)=>WebAssembly.instantiate(b, c)).then(f, (b)=>{\n                j(\"failed to asynchronously prepare wasm: \".concat(b)), ct(b);\n            });\n        }\n        function No() {\n            return {\n                a: {\n                    O: $c,\n                    Aa: vc,\n                    b: Ic,\n                    aa: jo,\n                    B: Qo,\n                    qa: Xo,\n                    Y: ei,\n                    _: ti,\n                    ra: ri,\n                    oa: ni,\n                    ha: oi,\n                    na: ii,\n                    L: ai,\n                    Z: si,\n                    W: ui,\n                    pa: di,\n                    X: li,\n                    va: Cc,\n                    F: kc,\n                    Q: Ec,\n                    P: zc,\n                    E: Dc,\n                    u: Bc,\n                    q: Mc,\n                    G: Rc,\n                    A: Hc,\n                    R: Fc,\n                    ua: qc,\n                    ka: Kc,\n                    U: jc,\n                    ba: Yc,\n                    H: Zc,\n                    ja: An,\n                    ta: Qc,\n                    t: Xc,\n                    Ba: Jc,\n                    x: rp,\n                    n: np,\n                    l: ip,\n                    c: In,\n                    o: ap,\n                    j: dp,\n                    w: lp,\n                    p: cp,\n                    f: pp,\n                    s: mp,\n                    m: fp,\n                    e: hp,\n                    k: gp,\n                    i: bp,\n                    h: yp,\n                    d: _p,\n                    ea: wp,\n                    fa: vp,\n                    ga: $p,\n                    ca: Si,\n                    da: Ti,\n                    T: xp,\n                    g: Sp,\n                    D: Tp,\n                    I: Ip,\n                    M: Cp,\n                    y: Ap,\n                    sa: kp,\n                    V: Ep,\n                    v: Ci,\n                    z: Pp,\n                    N: zp,\n                    S: Op,\n                    za: Dp,\n                    ya: Bp,\n                    la: Ei,\n                    ma: Pi,\n                    $: vn,\n                    C: zi,\n                    K: Oi,\n                    ia: Di,\n                    J: Bi,\n                    a: se,\n                    xa: wn,\n                    wa: Ui,\n                    r: Up\n                }\n            };\n        }\n        var bn = {\n            913700: (s, c, f, b, w)=>{\n                if (u === void 0 || !u.Fb) return 1;\n                if ((s = Ce(Number(s >>> 0))).startsWith(\"./\") && (s = s.substring(2)), !(s = u.Fb.get(s))) return 2;\n                if (c = Number(c >>> 0), f = Number(f >>> 0), b = Number(b >>> 0), c + f > s.byteLength) return 3;\n                try {\n                    let I = s.subarray(c, c + f);\n                    switch(w){\n                        case 0:\n                            r().set(I, b >>> 0);\n                            break;\n                        case 1:\n                            u.dc(b, I);\n                            break;\n                        default:\n                            return 4;\n                    }\n                    return 0;\n                } catch (e1) {\n                    return 4;\n                }\n            },\n            914415: (s, c, f)=>{\n                u.ec(s, r().subarray(c >>> 0, c + f >>> 0));\n            },\n            914478: ()=>u.bc(),\n            914519: (s)=>{\n                u.Pb(s);\n            },\n            914555: ()=>{\n                u.Wb();\n            },\n            914586: ()=>{\n                u.Xb();\n            },\n            914615: ()=>{\n                u.ac();\n            },\n            914640: (s)=>u.Vb(s),\n            914673: (s)=>u.Zb(s),\n            914705: (s, c, f)=>{\n                u.Ob(Number(s), Number(c), Number(f), !0);\n            },\n            914768: (s, c, f)=>{\n                u.Ob(Number(s), Number(c), Number(f));\n            },\n            914825: ()=>typeof wasmOffsetConverter < \"u\",\n            914882: (s)=>{\n                u.kb(\"Abs\", s, void 0);\n            },\n            914933: (s)=>{\n                u.kb(\"Neg\", s, void 0);\n            },\n            914984: (s)=>{\n                u.kb(\"Floor\", s, void 0);\n            },\n            915037: (s)=>{\n                u.kb(\"Ceil\", s, void 0);\n            },\n            915089: (s)=>{\n                u.kb(\"Reciprocal\", s, void 0);\n            },\n            915147: (s)=>{\n                u.kb(\"Sqrt\", s, void 0);\n            },\n            915199: (s)=>{\n                u.kb(\"Exp\", s, void 0);\n            },\n            915250: (s)=>{\n                u.kb(\"Erf\", s, void 0);\n            },\n            915301: (s)=>{\n                u.kb(\"Sigmoid\", s, void 0);\n            },\n            915356: (s, c, f)=>{\n                u.kb(\"HardSigmoid\", s, {\n                    alpha: c,\n                    beta: f\n                });\n            },\n            915435: (s)=>{\n                u.kb(\"Log\", s, void 0);\n            },\n            915486: (s)=>{\n                u.kb(\"Sin\", s, void 0);\n            },\n            915537: (s)=>{\n                u.kb(\"Cos\", s, void 0);\n            },\n            915588: (s)=>{\n                u.kb(\"Tan\", s, void 0);\n            },\n            915639: (s)=>{\n                u.kb(\"Asin\", s, void 0);\n            },\n            915691: (s)=>{\n                u.kb(\"Acos\", s, void 0);\n            },\n            915743: (s)=>{\n                u.kb(\"Atan\", s, void 0);\n            },\n            915795: (s)=>{\n                u.kb(\"Sinh\", s, void 0);\n            },\n            915847: (s)=>{\n                u.kb(\"Cosh\", s, void 0);\n            },\n            915899: (s)=>{\n                u.kb(\"Asinh\", s, void 0);\n            },\n            915952: (s)=>{\n                u.kb(\"Acosh\", s, void 0);\n            },\n            916005: (s)=>{\n                u.kb(\"Atanh\", s, void 0);\n            },\n            916058: (s)=>{\n                u.kb(\"Tanh\", s, void 0);\n            },\n            916110: (s)=>{\n                u.kb(\"Not\", s, void 0);\n            },\n            916161: (s, c, f)=>{\n                u.kb(\"Clip\", s, {\n                    min: c,\n                    max: f\n                });\n            },\n            916230: (s)=>{\n                u.kb(\"Clip\", s, void 0);\n            },\n            916282: (s, c)=>{\n                u.kb(\"Elu\", s, {\n                    alpha: c\n                });\n            },\n            916340: (s)=>{\n                u.kb(\"Gelu\", s, void 0);\n            },\n            916392: (s)=>{\n                u.kb(\"Relu\", s, void 0);\n            },\n            916444: (s, c)=>{\n                u.kb(\"LeakyRelu\", s, {\n                    alpha: c\n                });\n            },\n            916508: (s, c)=>{\n                u.kb(\"ThresholdedRelu\", s, {\n                    alpha: c\n                });\n            },\n            916578: (s, c)=>{\n                u.kb(\"Cast\", s, {\n                    to: c\n                });\n            },\n            916636: (s)=>{\n                u.kb(\"Add\", s, void 0);\n            },\n            916687: (s)=>{\n                u.kb(\"Sub\", s, void 0);\n            },\n            916738: (s)=>{\n                u.kb(\"Mul\", s, void 0);\n            },\n            916789: (s)=>{\n                u.kb(\"Div\", s, void 0);\n            },\n            916840: (s)=>{\n                u.kb(\"Pow\", s, void 0);\n            },\n            916891: (s)=>{\n                u.kb(\"Equal\", s, void 0);\n            },\n            916944: (s)=>{\n                u.kb(\"Greater\", s, void 0);\n            },\n            916999: (s)=>{\n                u.kb(\"GreaterOrEqual\", s, void 0);\n            },\n            917061: (s)=>{\n                u.kb(\"Less\", s, void 0);\n            },\n            917113: (s)=>{\n                u.kb(\"LessOrEqual\", s, void 0);\n            },\n            917172: (s, c, f, b, w)=>{\n                u.kb(\"ReduceMean\", s, {\n                    keepDims: !!c,\n                    noopWithEmptyAxes: !!f,\n                    axes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            917347: (s, c, f, b, w)=>{\n                u.kb(\"ReduceMax\", s, {\n                    keepDims: !!c,\n                    noopWithEmptyAxes: !!f,\n                    axes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            917521: (s, c, f, b, w)=>{\n                u.kb(\"ReduceMin\", s, {\n                    keepDims: !!c,\n                    noopWithEmptyAxes: !!f,\n                    axes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            917695: (s, c, f, b, w)=>{\n                u.kb(\"ReduceProd\", s, {\n                    keepDims: !!c,\n                    noopWithEmptyAxes: !!f,\n                    axes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            917870: (s, c, f, b, w)=>{\n                u.kb(\"ReduceSum\", s, {\n                    keepDims: !!c,\n                    noopWithEmptyAxes: !!f,\n                    axes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            918044: (s, c, f, b, w)=>{\n                u.kb(\"ReduceL1\", s, {\n                    keepDims: !!c,\n                    noopWithEmptyAxes: !!f,\n                    axes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            918217: (s, c, f, b, w)=>{\n                u.kb(\"ReduceL2\", s, {\n                    keepDims: !!c,\n                    noopWithEmptyAxes: !!f,\n                    axes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            918390: (s, c, f, b, w)=>{\n                u.kb(\"ReduceLogSum\", s, {\n                    keepDims: !!c,\n                    noopWithEmptyAxes: !!f,\n                    axes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            918567: (s, c, f, b, w)=>{\n                u.kb(\"ReduceSumSquare\", s, {\n                    keepDims: !!c,\n                    noopWithEmptyAxes: !!f,\n                    axes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            918747: (s, c, f, b, w)=>{\n                u.kb(\"ReduceLogSumExp\", s, {\n                    keepDims: !!c,\n                    noopWithEmptyAxes: !!f,\n                    axes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            918927: (s)=>{\n                u.kb(\"Where\", s, void 0);\n            },\n            918980: (s, c, f)=>{\n                u.kb(\"Transpose\", s, {\n                    perm: c ? Array.from(i().subarray(Number(c) >>> 0, Number(f) >>> 0)) : []\n                });\n            },\n            919104: (s, c, f, b)=>{\n                u.kb(\"DepthToSpace\", s, {\n                    blocksize: c,\n                    mode: Ce(f),\n                    format: b ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            919237: (s, c, f, b)=>{\n                u.kb(\"DepthToSpace\", s, {\n                    blocksize: c,\n                    mode: Ce(f),\n                    format: b ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            919370: (s, c, f, b, w, I, O, B, L, H, X, ce, ge, z, de)=>{\n                u.kb(\"ConvTranspose\", s, {\n                    format: L ? \"NHWC\" : \"NCHW\",\n                    autoPad: c,\n                    dilations: [\n                        f\n                    ],\n                    group: b,\n                    kernelShape: [\n                        w\n                    ],\n                    pads: [\n                        I,\n                        O\n                    ],\n                    strides: [\n                        B\n                    ],\n                    wIsConst: ()=>!!t()[H >>> 0],\n                    outputPadding: X ? Array.from(i().subarray(Number(X) >>> 0, Number(ce) >>> 0)) : [],\n                    outputShape: ge ? Array.from(i().subarray(Number(ge) >>> 0, Number(z) >>> 0)) : [],\n                    activation: Ce(de)\n                });\n            },\n            919803: (s, c, f, b, w, I, O, B, L, H, X, ce, ge, z)=>{\n                u.kb(\"ConvTranspose\", s, {\n                    format: B ? \"NHWC\" : \"NCHW\",\n                    autoPad: c,\n                    dilations: Array.from(i().subarray(Number(f) >>> 0, 2 + (Number(f) >>> 0) >>> 0)),\n                    group: b,\n                    kernelShape: Array.from(i().subarray(Number(w) >>> 0, 2 + (Number(w) >>> 0) >>> 0)),\n                    pads: Array.from(i().subarray(Number(I) >>> 0, 4 + (Number(I) >>> 0) >>> 0)),\n                    strides: Array.from(i().subarray(Number(O) >>> 0, 2 + (Number(O) >>> 0) >>> 0)),\n                    wIsConst: ()=>!!t()[L >>> 0],\n                    outputPadding: H ? Array.from(i().subarray(Number(H) >>> 0, Number(X) >>> 0)) : [],\n                    outputShape: ce ? Array.from(i().subarray(Number(ce) >>> 0, Number(ge) >>> 0)) : [],\n                    activation: Ce(z)\n                });\n            },\n            920464: (s, c, f, b, w, I, O, B, L, H, X, ce, ge, z, de)=>{\n                u.kb(\"ConvTranspose\", s, {\n                    format: L ? \"NHWC\" : \"NCHW\",\n                    autoPad: c,\n                    dilations: [\n                        f\n                    ],\n                    group: b,\n                    kernelShape: [\n                        w\n                    ],\n                    pads: [\n                        I,\n                        O\n                    ],\n                    strides: [\n                        B\n                    ],\n                    wIsConst: ()=>!!t()[H >>> 0],\n                    outputPadding: X ? Array.from(i().subarray(Number(X) >>> 0, Number(ce) >>> 0)) : [],\n                    outputShape: ge ? Array.from(i().subarray(Number(ge) >>> 0, Number(z) >>> 0)) : [],\n                    activation: Ce(de)\n                });\n            },\n            920897: (s, c, f, b, w, I, O, B, L, H, X, ce, ge, z)=>{\n                u.kb(\"ConvTranspose\", s, {\n                    format: B ? \"NHWC\" : \"NCHW\",\n                    autoPad: c,\n                    dilations: Array.from(i().subarray(Number(f) >>> 0, 2 + (Number(f) >>> 0) >>> 0)),\n                    group: b,\n                    kernelShape: Array.from(i().subarray(Number(w) >>> 0, 2 + (Number(w) >>> 0) >>> 0)),\n                    pads: Array.from(i().subarray(Number(I) >>> 0, 4 + (Number(I) >>> 0) >>> 0)),\n                    strides: Array.from(i().subarray(Number(O) >>> 0, 2 + (Number(O) >>> 0) >>> 0)),\n                    wIsConst: ()=>!!t()[L >>> 0],\n                    outputPadding: H ? Array.from(i().subarray(Number(H) >>> 0, Number(X) >>> 0)) : [],\n                    outputShape: ce ? Array.from(i().subarray(Number(ce) >>> 0, Number(ge) >>> 0)) : [],\n                    activation: Ce(z)\n                });\n            },\n            921558: (s, c)=>{\n                u.kb(\"GlobalAveragePool\", s, {\n                    format: c ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            921649: (s, c, f, b, w, I, O, B, L, H, X, ce, ge, z)=>{\n                u.kb(\"AveragePool\", s, {\n                    format: z ? \"NHWC\" : \"NCHW\",\n                    auto_pad: c,\n                    ceil_mode: f,\n                    count_include_pad: b,\n                    storage_order: w,\n                    dilations: I ? Array.from(i().subarray(Number(I) >>> 0, Number(O) >>> 0)) : [],\n                    kernel_shape: B ? Array.from(i().subarray(Number(B) >>> 0, Number(L) >>> 0)) : [],\n                    pads: H ? Array.from(i().subarray(Number(H) >>> 0, Number(X) >>> 0)) : [],\n                    strides: ce ? Array.from(i().subarray(Number(ce) >>> 0, Number(ge) >>> 0)) : []\n                });\n            },\n            922128: (s, c)=>{\n                u.kb(\"GlobalAveragePool\", s, {\n                    format: c ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            922219: (s, c, f, b, w, I, O, B, L, H, X, ce, ge, z)=>{\n                u.kb(\"AveragePool\", s, {\n                    format: z ? \"NHWC\" : \"NCHW\",\n                    auto_pad: c,\n                    ceil_mode: f,\n                    count_include_pad: b,\n                    storage_order: w,\n                    dilations: I ? Array.from(i().subarray(Number(I) >>> 0, Number(O) >>> 0)) : [],\n                    kernel_shape: B ? Array.from(i().subarray(Number(B) >>> 0, Number(L) >>> 0)) : [],\n                    pads: H ? Array.from(i().subarray(Number(H) >>> 0, Number(X) >>> 0)) : [],\n                    strides: ce ? Array.from(i().subarray(Number(ce) >>> 0, Number(ge) >>> 0)) : []\n                });\n            },\n            922698: (s, c)=>{\n                u.kb(\"GlobalMaxPool\", s, {\n                    format: c ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            922785: (s, c, f, b, w, I, O, B, L, H, X, ce, ge, z)=>{\n                u.kb(\"MaxPool\", s, {\n                    format: z ? \"NHWC\" : \"NCHW\",\n                    auto_pad: c,\n                    ceil_mode: f,\n                    count_include_pad: b,\n                    storage_order: w,\n                    dilations: I ? Array.from(i().subarray(Number(I) >>> 0, Number(O) >>> 0)) : [],\n                    kernel_shape: B ? Array.from(i().subarray(Number(B) >>> 0, Number(L) >>> 0)) : [],\n                    pads: H ? Array.from(i().subarray(Number(H) >>> 0, Number(X) >>> 0)) : [],\n                    strides: ce ? Array.from(i().subarray(Number(ce) >>> 0, Number(ge) >>> 0)) : []\n                });\n            },\n            923260: (s, c)=>{\n                u.kb(\"GlobalMaxPool\", s, {\n                    format: c ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            923347: (s, c, f, b, w, I, O, B, L, H, X, ce, ge, z)=>{\n                u.kb(\"MaxPool\", s, {\n                    format: z ? \"NHWC\" : \"NCHW\",\n                    auto_pad: c,\n                    ceil_mode: f,\n                    count_include_pad: b,\n                    storage_order: w,\n                    dilations: I ? Array.from(i().subarray(Number(I) >>> 0, Number(O) >>> 0)) : [],\n                    kernel_shape: B ? Array.from(i().subarray(Number(B) >>> 0, Number(L) >>> 0)) : [],\n                    pads: H ? Array.from(i().subarray(Number(H) >>> 0, Number(X) >>> 0)) : [],\n                    strides: ce ? Array.from(i().subarray(Number(ce) >>> 0, Number(ge) >>> 0)) : []\n                });\n            },\n            923822: (s, c, f, b, w)=>{\n                u.kb(\"Gemm\", s, {\n                    alpha: c,\n                    beta: f,\n                    transA: b,\n                    transB: w\n                });\n            },\n            923926: (s)=>{\n                u.kb(\"MatMul\", s, void 0);\n            },\n            923980: (s, c, f, b)=>{\n                u.kb(\"ArgMax\", s, {\n                    keepDims: !!c,\n                    selectLastIndex: !!f,\n                    axis: b\n                });\n            },\n            924088: (s, c, f, b)=>{\n                u.kb(\"ArgMin\", s, {\n                    keepDims: !!c,\n                    selectLastIndex: !!f,\n                    axis: b\n                });\n            },\n            924196: (s, c)=>{\n                u.kb(\"Softmax\", s, {\n                    axis: c\n                });\n            },\n            924259: (s, c)=>{\n                u.kb(\"Concat\", s, {\n                    axis: c\n                });\n            },\n            924319: (s, c, f, b, w)=>{\n                u.kb(\"Split\", s, {\n                    axis: c,\n                    numOutputs: f,\n                    splitSizes: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            924475: (s)=>{\n                u.kb(\"Expand\", s, void 0);\n            },\n            924529: (s, c)=>{\n                u.kb(\"Gather\", s, {\n                    axis: Number(c)\n                });\n            },\n            924600: (s, c)=>{\n                u.kb(\"GatherElements\", s, {\n                    axis: Number(c)\n                });\n            },\n            924679: (s, c)=>{\n                u.kb(\"GatherND\", s, {\n                    batch_dims: Number(c)\n                });\n            },\n            924758: (s, c, f, b, w, I, O, B, L, H, X)=>{\n                u.kb(\"Resize\", s, {\n                    antialias: c,\n                    axes: f ? Array.from(i().subarray(Number(f) >>> 0, Number(b) >>> 0)) : [],\n                    coordinateTransformMode: Ce(w),\n                    cubicCoeffA: I,\n                    excludeOutside: O,\n                    extrapolationValue: B,\n                    keepAspectRatioPolicy: Ce(L),\n                    mode: Ce(H),\n                    nearestMode: Ce(X)\n                });\n            },\n            925120: (s, c, f, b, w, I, O)=>{\n                u.kb(\"Slice\", s, {\n                    starts: c ? Array.from(i().subarray(Number(c) >>> 0, Number(f) >>> 0)) : [],\n                    ends: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : [],\n                    axes: I ? Array.from(i().subarray(Number(I) >>> 0, Number(O) >>> 0)) : []\n                });\n            },\n            925384: (s)=>{\n                u.kb(\"Tile\", s, void 0);\n            },\n            925436: (s, c, f)=>{\n                u.kb(\"InstanceNormalization\", s, {\n                    epsilon: c,\n                    format: f ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            925550: (s, c, f)=>{\n                u.kb(\"InstanceNormalization\", s, {\n                    epsilon: c,\n                    format: f ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            925664: (s)=>{\n                u.kb(\"Range\", s, void 0);\n            },\n            925717: (s, c)=>{\n                u.kb(\"Einsum\", s, {\n                    equation: Ce(c)\n                });\n            },\n            925798: (s, c, f, b, w)=>{\n                u.kb(\"Pad\", s, {\n                    mode: c,\n                    value: f,\n                    pads: b ? Array.from(i().subarray(Number(b) >>> 0, Number(w) >>> 0)) : []\n                });\n            },\n            925941: (s, c, f, b, w, I)=>{\n                u.kb(\"BatchNormalization\", s, {\n                    epsilon: c,\n                    momentum: f,\n                    spatial: !!w,\n                    trainingMode: !!b,\n                    format: I ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            926110: (s, c, f, b, w, I)=>{\n                u.kb(\"BatchNormalization\", s, {\n                    epsilon: c,\n                    momentum: f,\n                    spatial: !!w,\n                    trainingMode: !!b,\n                    format: I ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            926279: (s, c, f)=>{\n                u.kb(\"CumSum\", s, {\n                    exclusive: Number(c),\n                    reverse: Number(f)\n                });\n            },\n            926376: (s, c, f)=>{\n                u.kb(\"DequantizeLinear\", s, {\n                    axis: c,\n                    blockSize: f\n                });\n            },\n            926466: (s, c, f, b, w)=>{\n                u.kb(\"GridSample\", s, {\n                    align_corners: c,\n                    mode: Ce(f),\n                    padding_mode: Ce(b),\n                    format: w ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            926636: (s, c, f, b, w)=>{\n                u.kb(\"GridSample\", s, {\n                    align_corners: c,\n                    mode: Ce(f),\n                    padding_mode: Ce(b),\n                    format: w ? \"NHWC\" : \"NCHW\"\n                });\n            },\n            926806: (s, c, f, b, w, I, O, B, L)=>{\n                u.kb(\"Attention\", s, {\n                    numHeads: c,\n                    isUnidirectional: f,\n                    maskFilterValue: b,\n                    scale: w,\n                    doRotary: I,\n                    qkvHiddenSizes: O ? Array.from(i().subarray(Number(B) >>> 0, Number(B) + O >>> 0)) : [],\n                    pastPresentShareBuffer: !!L\n                });\n            },\n            927078: (s)=>{\n                u.kb(\"BiasAdd\", s, void 0);\n            },\n            927133: (s)=>{\n                u.kb(\"BiasSplitGelu\", s, void 0);\n            },\n            927194: (s)=>{\n                u.kb(\"FastGelu\", s, void 0);\n            },\n            927250: (s, c, f, b, w, I, O, B, L, H, X, ce, ge, z, de, Te)=>{\n                u.kb(\"Conv\", s, {\n                    format: ce ? \"NHWC\" : \"NCHW\",\n                    auto_pad: c,\n                    dilations: f ? Array.from(i().subarray(Number(f) >>> 0, Number(b) >>> 0)) : [],\n                    group: w,\n                    kernel_shape: I ? Array.from(i().subarray(Number(I) >>> 0, Number(O) >>> 0)) : [],\n                    pads: B ? Array.from(i().subarray(Number(B) >>> 0, Number(L) >>> 0)) : [],\n                    strides: H ? Array.from(i().subarray(Number(H) >>> 0, Number(X) >>> 0)) : [],\n                    w_is_const: ()=>!!t()[Number(ge) >>> 0],\n                    activation: Ce(z),\n                    activation_params: de ? Array.from(d().subarray(Number(de) >>> 0, Number(Te) >>> 0)) : []\n                });\n            },\n            927834: (s)=>{\n                u.kb(\"Gelu\", s, void 0);\n            },\n            927886: (s, c, f, b, w, I, O, B, L)=>{\n                u.kb(\"GroupQueryAttention\", s, {\n                    numHeads: c,\n                    kvNumHeads: f,\n                    scale: b,\n                    softcap: w,\n                    doRotary: I,\n                    rotaryInterleaved: O,\n                    smoothSoftmax: B,\n                    localWindowSize: L\n                });\n            },\n            928103: (s, c, f, b)=>{\n                u.kb(\"LayerNormalization\", s, {\n                    axis: c,\n                    epsilon: f,\n                    simplified: !!b\n                });\n            },\n            928214: (s, c, f, b)=>{\n                u.kb(\"LayerNormalization\", s, {\n                    axis: c,\n                    epsilon: f,\n                    simplified: !!b\n                });\n            },\n            928325: (s, c, f, b, w, I)=>{\n                u.kb(\"MatMulNBits\", s, {\n                    k: c,\n                    n: f,\n                    accuracyLevel: b,\n                    bits: w,\n                    blockSize: I\n                });\n            },\n            928452: (s, c, f, b, w, I)=>{\n                u.kb(\"MultiHeadAttention\", s, {\n                    numHeads: c,\n                    isUnidirectional: f,\n                    maskFilterValue: b,\n                    scale: w,\n                    doRotary: I\n                });\n            },\n            928611: (s, c)=>{\n                u.kb(\"QuickGelu\", s, {\n                    alpha: c\n                });\n            },\n            928675: (s, c, f, b, w)=>{\n                u.kb(\"RotaryEmbedding\", s, {\n                    interleaved: !!c,\n                    numHeads: f,\n                    rotaryEmbeddingDim: b,\n                    scale: w\n                });\n            },\n            928814: (s, c, f)=>{\n                u.kb(\"SkipLayerNormalization\", s, {\n                    epsilon: c,\n                    simplified: !!f\n                });\n            },\n            928916: (s, c, f)=>{\n                u.kb(\"SkipLayerNormalization\", s, {\n                    epsilon: c,\n                    simplified: !!f\n                });\n            },\n            929018: (s, c, f, b)=>{\n                u.kb(\"GatherBlockQuantized\", s, {\n                    gatherAxis: c,\n                    quantizeAxis: f,\n                    blockSize: b\n                });\n            },\n            929139: (s)=>{\n                u.$b(s);\n            },\n            929173: (s, c)=>u.cc(Number(s), Number(c), u.Gb.hc, u.Gb.errors)\n        };\n        function vc(s, c, f) {\n            return _i(async ()=>{\n                await u.Yb(Number(s), Number(c), Number(f));\n            });\n        }\n        function $c() {\n            return typeof wasmOffsetConverter < \"u\";\n        }\n        function yn(s) {\n            this.name = \"ExitStatus\", this.message = \"Program terminated with exit(\".concat(s, \")\"), this.status = s;\n        }\n        var _n = (s)=>{\n            s.terminate(), s.onmessage = ()=>{};\n        }, Vo = (s)=>{\n            pt.length == 0 && (qo(), Fo(pt[0]));\n            var c = pt.pop();\n            if (!c) return 6;\n            vt.push(c), Ze[s.Bb] = c, c.Bb = s.Bb;\n            var f = {\n                cmd: \"run\",\n                start_routine: s.ic,\n                arg: s.Rb,\n                pthread_ptr: s.Bb\n            };\n            return c.postMessage(f, s.nc), 0;\n        }, wt = 0, xe = function(s, c) {\n            for(var _len = arguments.length, f = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n                f[_key - 2] = arguments[_key];\n            }\n            for(var b = 2 * f.length, w = Rn(), I = Mn(8 * b), O = I >>> 3, B = 0; B < f.length; B++){\n                var L = f[B];\n                typeof L == \"bigint\" ? (q[O + 2 * B] = 1n, q[O + 2 * B + 1] = L) : (q[O + 2 * B] = 0n, l()[O + 2 * B + 1 >>> 0] = L);\n            }\n            return s = Gi(s, 0, b, I, c), gr(w), s;\n        };\n        function wn(s) {\n            if (g) return xe(0, 1, s);\n            if (ee = s, !(0 < wt)) {\n                for (var c of vt)_n(c);\n                for (c of pt)_n(c);\n                pt = [], vt = [], Ze = [], we = !0;\n            }\n            k(s, new yn(s));\n        }\n        function Wo(s) {\n            if (g) return xe(1, 0, s);\n            vn(s);\n        }\n        var vn = (s)=>{\n            if (ee = s, g) throw Wo(s), \"unwind\";\n            wn(s);\n        }, pt = [], vt = [], Lo = [], Ze = {}, Go = (s)=>{\n            var c = s.Bb;\n            delete Ze[c], pt.push(s), vt.splice(vt.indexOf(s), 1), s.Bb = 0, Bn(c);\n        };\n        function Ho() {\n            Lo.forEach((s)=>s());\n        }\n        var Fo = (s)=>new Promise((c)=>{\n                s.onmessage = (w)=>{\n                    var I = (w = w.data).cmd;\n                    if (w.targetThread && w.targetThread != Mt()) {\n                        var O = Ze[w.targetThread];\n                        O ? O.postMessage(w, w.transferList) : j('Internal error! Worker sent a message \"'.concat(I, '\" to target pthread ').concat(w.targetThread, \", but that thread no longer exists!\"));\n                    } else I === \"checkMailbox\" ? ir() : I === \"spawnThread\" ? Vo(w) : I === \"cleanupThread\" ? Go(Ze[w.thread]) : I === \"killThread\" ? (w = w.thread, I = Ze[w], delete Ze[w], _n(I), Bn(w), vt.splice(vt.indexOf(I), 1), I.Bb = 0) : I === \"cancelThread\" ? Ze[w.thread].postMessage({\n                        cmd: \"cancel\"\n                    }) : I === \"loaded\" ? (s.loaded = !0, c(s)) : I === \"alert\" ? alert(\"Thread \".concat(w.threadId, \": \").concat(w.text)) : w.target === \"setimmediate\" ? s.postMessage(w) : I === \"callHandler\" ? u[w.handler](...w.args) : I && j(\"worker sent an unknown command \".concat(I));\n                }, s.onerror = (w)=>{\n                    throw j(\"worker sent an error! \".concat(w.filename, \":\").concat(w.lineno, \": \").concat(w.message)), w;\n                };\n                var f, b = [];\n                for (f of [])u.hasOwnProperty(f) && b.push(f);\n                s.postMessage({\n                    cmd: \"load\",\n                    handlers: b,\n                    wasmMemory: se,\n                    wasmModule: Y\n                });\n            });\n        function qo() {\n            var s = new Worker(\"file:///Users/amityadav/Desktop/Text-Behind%20Image/node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs\".startsWith(\"file:\") ? /* asset import */ new __webpack_require__.U(__webpack_require__(/*! ort.webgpu.bundle.min.mjs */ \"(app-pages-browser)/./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs?7f57\")) : new URL(\"file:///Users/amityadav/Desktop/Text-Behind%20Image/node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs\"), {\n                type: \"module\",\n                workerData: \"em-pthread\",\n                name: \"em-pthread\"\n            });\n            pt.push(s);\n        }\n        var or = (s)=>{\n            for(; 0 < s.length;)s.shift()(u);\n        }, xc = ()=>{\n            var s = Mt(), c = a()[s + 52 >>> 2 >>> 0];\n            s = a()[s + 56 >>> 2 >>> 0], Fi(c, c - s), gr(c);\n        }, Sc = (s, c)=>{\n            wt = 0, s = qi(s, c), 0 < wt ? ee = s : hr(s);\n        };\n        class Tc {\n            constructor(c){\n                this.Kb = c - 24;\n            }\n        }\n        function Ic(s, c, f) {\n            var b = new Tc(s >>>= 0);\n            throw c >>>= 0, f >>>= 0, a()[b.Kb + 16 >>> 2 >>> 0] = 0, a()[b.Kb + 4 >>> 2 >>> 0] = c, a()[b.Kb + 8 >>> 2 >>> 0] = f, s;\n        }\n        function Ko(s, c, f, b) {\n            return g ? xe(2, 1, s, c, f, b) : jo(s, c, f, b);\n        }\n        function jo(s, c, f, b) {\n            if (s >>>= 0, c >>>= 0, f >>>= 0, b >>>= 0, x === void 0) return j(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"), 6;\n            var w = [];\n            return g && w.length === 0 ? Ko(s, c, f, b) : (s = {\n                ic: f,\n                Bb: s,\n                Rb: b,\n                nc: w\n            }, g ? (s.Nb = \"spawnThread\", postMessage(s, w), 0) : Vo(s));\n        }\n        var Yo = typeof TextDecoder < \"u\" ? new TextDecoder(\"utf8\") : void 0, Zo = (s, c, f)=>{\n            var b = (c >>>= 0) + f;\n            for(f = c; s[f] && !(f >= b);)++f;\n            if (16 < f - c && s.buffer && Yo) return Yo.decode(s.buffer instanceof x ? s.slice(c, f) : s.subarray(c, f));\n            for(b = \"\"; c < f;){\n                var w = s[c++];\n                if (128 & w) {\n                    var I = 63 & s[c++];\n                    if ((224 & w) == 192) b += String.fromCharCode((31 & w) << 6 | I);\n                    else {\n                        var O = 63 & s[c++];\n                        65536 > (w = (240 & w) == 224 ? (15 & w) << 12 | I << 6 | O : (7 & w) << 18 | I << 12 | O << 6 | 63 & s[c++]) ? b += String.fromCharCode(w) : (w -= 65536, b += String.fromCharCode(55296 | w >> 10, 56320 | 1023 & w));\n                    }\n                } else b += String.fromCharCode(w);\n            }\n            return b;\n        }, Ce = (s, c)=>(s >>>= 0) ? Zo(r(), s, c) : \"\";\n        function Qo(s, c, f) {\n            return g ? xe(3, 1, s, c, f) : 0;\n        }\n        function Xo(s, c) {\n            if (g) return xe(4, 1, s, c);\n        }\n        var $n = (s)=>{\n            for(var c = 0, f = 0; f < s.length; ++f){\n                var b = s.charCodeAt(f);\n                127 >= b ? c++ : 2047 >= b ? c += 2 : 55296 <= b && 57343 >= b ? (c += 4, ++f) : c += 3;\n            }\n            return c;\n        }, Jo = (s, c, f, b)=>{\n            if (!(0 < b)) return 0;\n            var w = f >>>= 0;\n            b = f + b - 1;\n            for(var I = 0; I < s.length; ++I){\n                var O = s.charCodeAt(I);\n                if (55296 <= O && 57343 >= O && (O = 65536 + ((1023 & O) << 10) | 1023 & s.charCodeAt(++I)), 127 >= O) {\n                    if (f >= b) break;\n                    c[f++ >>> 0] = O;\n                } else {\n                    if (2047 >= O) {\n                        if (f + 1 >= b) break;\n                        c[f++ >>> 0] = 192 | O >> 6;\n                    } else {\n                        if (65535 >= O) {\n                            if (f + 2 >= b) break;\n                            c[f++ >>> 0] = 224 | O >> 12;\n                        } else {\n                            if (f + 3 >= b) break;\n                            c[f++ >>> 0] = 240 | O >> 18, c[f++ >>> 0] = 128 | O >> 12 & 63;\n                        }\n                        c[f++ >>> 0] = 128 | O >> 6 & 63;\n                    }\n                    c[f++ >>> 0] = 128 | 63 & O;\n                }\n            }\n            return c[f >>> 0] = 0, f - w;\n        }, Ot = (s, c, f)=>Jo(s, r(), c, f);\n        function ei(s, c) {\n            if (g) return xe(5, 1, s, c);\n        }\n        function ti(s, c, f) {\n            if (g) return xe(6, 1, s, c, f);\n        }\n        function ri(s, c, f) {\n            return g ? xe(7, 1, s, c, f) : 0;\n        }\n        function ni(s, c) {\n            if (g) return xe(8, 1, s, c);\n        }\n        function oi(s, c, f) {\n            if (g) return xe(9, 1, s, c, f);\n        }\n        function ii(s, c, f, b) {\n            if (g) return xe(10, 1, s, c, f, b);\n        }\n        function ai(s, c, f, b) {\n            if (g) return xe(11, 1, s, c, f, b);\n        }\n        function si(s, c, f, b) {\n            if (g) return xe(12, 1, s, c, f, b);\n        }\n        function ui(s) {\n            if (g) return xe(13, 1, s);\n        }\n        function di(s, c) {\n            if (g) return xe(14, 1, s, c);\n        }\n        function li(s, c, f) {\n            if (g) return xe(15, 1, s, c, f);\n        }\n        var ci, mt, Cc = ()=>{\n            ct(\"\");\n        }, Qe = (s)=>{\n            for(var c = \"\"; r()[s >>> 0];)c += ci[r()[s++ >>> 0]];\n            return c;\n        }, xn = {}, Sn = {}, Ac = {};\n        function st(s, c) {\n            let f = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n            if (!(\"argPackAdvance\" in c)) throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");\n            return function(b, w) {\n                let I = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n                var O = w.name;\n                if (!b) throw new mt('type \"'.concat(O, '\" must have a positive integer typeid pointer'));\n                if (Sn.hasOwnProperty(b)) {\n                    if (I.Tb) return;\n                    throw new mt(\"Cannot register type '\".concat(O, \"' twice\"));\n                }\n                Sn[b] = w, delete Ac[b], xn.hasOwnProperty(b) && (w = xn[b], delete xn[b], w.forEach((B)=>B()));\n            }(s, c, f);\n        }\n        var pi = (s, c, f)=>{\n            switch(c){\n                case 1:\n                    return f ? (b)=>t()[b >>> 0] : (b)=>r()[b >>> 0];\n                case 2:\n                    return f ? (b)=>n()[b >>> 1 >>> 0] : (b)=>o()[b >>> 1 >>> 0];\n                case 4:\n                    return f ? (b)=>i()[b >>> 2 >>> 0] : (b)=>a()[b >>> 2 >>> 0];\n                case 8:\n                    return f ? (b)=>q[b >>> 3] : (b)=>he[b >>> 3];\n                default:\n                    throw new TypeError(\"invalid integer width (\".concat(c, \"): \").concat(s));\n            }\n        };\n        function kc(s, c, f) {\n            f >>>= 0, st(s >>>= 0, {\n                name: c = Qe(c >>> 0),\n                fromWireType: (b)=>b,\n                toWireType: function(b, w) {\n                    if (typeof w != \"bigint\" && typeof w != \"number\") throw w = w === null ? \"null\" : (b = typeof w) == \"object\" || b === \"array\" || b === \"function\" ? w.toString() : \"\" + w, new TypeError('Cannot convert \"'.concat(w, '\" to ').concat(this.name));\n                    return typeof w == \"number\" && (w = BigInt(w)), w;\n                },\n                argPackAdvance: ft,\n                readValueFromPointer: pi(c, f, c.indexOf(\"u\") == -1),\n                Eb: null\n            });\n        }\n        var ft = 8;\n        function Ec(s, c, f, b) {\n            st(s >>>= 0, {\n                name: c = Qe(c >>> 0),\n                fromWireType: function(w) {\n                    return !!w;\n                },\n                toWireType: function(w, I) {\n                    return I ? f : b;\n                },\n                argPackAdvance: ft,\n                readValueFromPointer: function(w) {\n                    return this.fromWireType(r()[w >>> 0]);\n                },\n                Eb: null\n            });\n        }\n        var Tn = [], ut = [];\n        function In(s) {\n            9 < (s >>>= 0) && --ut[s + 1] == 0 && (ut[s] = void 0, Tn.push(s));\n        }\n        var Me = (s)=>{\n            if (!s) throw new mt(\"Cannot use deleted val. handle = \" + s);\n            return ut[s];\n        }, Ve = (s)=>{\n            switch(s){\n                case void 0:\n                    return 2;\n                case null:\n                    return 4;\n                case !0:\n                    return 6;\n                case !1:\n                    return 8;\n                default:\n                    let c = Tn.pop() || ut.length;\n                    return ut[c] = s, ut[c + 1] = 1, c;\n            }\n        };\n        function Cn(s) {\n            return this.fromWireType(a()[s >>> 2 >>> 0]);\n        }\n        var Pc = {\n            name: \"emscripten::val\",\n            fromWireType: (s)=>{\n                var c = Me(s);\n                return In(s), c;\n            },\n            toWireType: (s, c)=>Ve(c),\n            argPackAdvance: ft,\n            readValueFromPointer: Cn,\n            Eb: null\n        };\n        function zc(s) {\n            return st(s >>> 0, Pc);\n        }\n        var Oc = (s, c)=>{\n            switch(c){\n                case 4:\n                    return function(f) {\n                        return this.fromWireType(d()[f >>> 2 >>> 0]);\n                    };\n                case 8:\n                    return function(f) {\n                        return this.fromWireType(l()[f >>> 3 >>> 0]);\n                    };\n                default:\n                    throw new TypeError(\"invalid float width (\".concat(c, \"): \").concat(s));\n            }\n        };\n        function Dc(s, c, f) {\n            f >>>= 0, st(s >>>= 0, {\n                name: c = Qe(c >>> 0),\n                fromWireType: (b)=>b,\n                toWireType: (b, w)=>w,\n                argPackAdvance: ft,\n                readValueFromPointer: Oc(c, f),\n                Eb: null\n            });\n        }\n        function Bc(s, c, f, b, w) {\n            if (s >>>= 0, f >>>= 0, c = Qe(c >>> 0), w === -1 && (w = 4294967295), w = (B)=>B, b === 0) {\n                var I = 32 - 8 * f;\n                w = (B)=>B << I >>> I;\n            }\n            var O = c.includes(\"unsigned\") ? function(B, L) {\n                return L >>> 0;\n            } : function(B, L) {\n                return L;\n            };\n            st(s, {\n                name: c,\n                fromWireType: w,\n                toWireType: O,\n                argPackAdvance: ft,\n                readValueFromPointer: pi(c, f, b !== 0),\n                Eb: null\n            });\n        }\n        function Mc(s, c, f) {\n            function b(I) {\n                var O = a()[I >>> 2 >>> 0];\n                return I = a()[I + 4 >>> 2 >>> 0], new w(t().buffer, I, O);\n            }\n            var w = [\n                Int8Array,\n                Uint8Array,\n                Int16Array,\n                Uint16Array,\n                Int32Array,\n                Uint32Array,\n                Float32Array,\n                Float64Array,\n                BigInt64Array,\n                BigUint64Array\n            ][c];\n            st(s >>>= 0, {\n                name: f = Qe(f >>> 0),\n                fromWireType: b,\n                argPackAdvance: ft,\n                readValueFromPointer: b\n            }, {\n                Tb: !0\n            });\n        }\n        function Rc(s, c) {\n            s >>>= 0;\n            var f = (c = Qe(c >>> 0)) === \"std::string\";\n            st(s, {\n                name: c,\n                fromWireType: function(b) {\n                    var w = a()[b >>> 2 >>> 0], I = b + 4;\n                    if (f) for(var O = I, B = 0; B <= w; ++B){\n                        var L = I + B;\n                        if (B == w || r()[L >>> 0] == 0) {\n                            if (O = Ce(O, L - O), H === void 0) var H = O;\n                            else H += String.fromCharCode(0), H += O;\n                            O = L + 1;\n                        }\n                    }\n                    else {\n                        for(H = Array(w), B = 0; B < w; ++B)H[B] = String.fromCharCode(r()[I + B >>> 0]);\n                        H = H.join(\"\");\n                    }\n                    return Je(b), H;\n                },\n                toWireType: function(b, w) {\n                    w instanceof ArrayBuffer && (w = new Uint8Array(w));\n                    var I = typeof w == \"string\";\n                    if (!(I || w instanceof Uint8Array || w instanceof Uint8ClampedArray || w instanceof Int8Array)) throw new mt(\"Cannot pass non-string to std::string\");\n                    var O = f && I ? $n(w) : w.length, B = fr(4 + O + 1), L = B + 4;\n                    if (a()[B >>> 2 >>> 0] = O, f && I) Ot(w, L, O + 1);\n                    else if (I) for(I = 0; I < O; ++I){\n                        var H = w.charCodeAt(I);\n                        if (255 < H) throw Je(L), new mt(\"String has UTF-16 code units that do not fit in 8 bits\");\n                        r()[L + I >>> 0] = H;\n                    }\n                    else for(I = 0; I < O; ++I)r()[L + I >>> 0] = w[I];\n                    return b !== null && b.push(Je, B), B;\n                },\n                argPackAdvance: ft,\n                readValueFromPointer: Cn,\n                Eb (b) {\n                    Je(b);\n                }\n            });\n        }\n        var mi = typeof TextDecoder < \"u\" ? new TextDecoder(\"utf-16le\") : void 0, Uc = (s, c)=>{\n            for(var f = s >> 1, b = f + c / 2; !(f >= b) && o()[f >>> 0];)++f;\n            if (32 < (f <<= 1) - s && mi) return mi.decode(r().slice(s, f));\n            for(f = \"\", b = 0; !(b >= c / 2); ++b){\n                var w = n()[s + 2 * b >>> 1 >>> 0];\n                if (w == 0) break;\n                f += String.fromCharCode(w);\n            }\n            return f;\n        }, Nc = (s, c, f)=>{\n            if (f !== null && f !== void 0 ? f : f = 2147483647, 2 > f) return 0;\n            var b = c;\n            f = (f -= 2) < 2 * s.length ? f / 2 : s.length;\n            for(var w = 0; w < f; ++w){\n                var I = s.charCodeAt(w);\n                n()[c >>> 1 >>> 0] = I, c += 2;\n            }\n            return n()[c >>> 1 >>> 0] = 0, c - b;\n        }, Vc = (s)=>2 * s.length, Wc = (s, c)=>{\n            for(var f = 0, b = \"\"; !(f >= c / 4);){\n                var w = i()[s + 4 * f >>> 2 >>> 0];\n                if (w == 0) break;\n                ++f, 65536 <= w ? (w -= 65536, b += String.fromCharCode(55296 | w >> 10, 56320 | 1023 & w)) : b += String.fromCharCode(w);\n            }\n            return b;\n        }, Lc = (s, c, f)=>{\n            if (c >>>= 0, f !== null && f !== void 0 ? f : f = 2147483647, 4 > f) return 0;\n            var b = c;\n            f = b + f - 4;\n            for(var w = 0; w < s.length; ++w){\n                var I = s.charCodeAt(w);\n                if (55296 <= I && 57343 >= I && (I = 65536 + ((1023 & I) << 10) | 1023 & s.charCodeAt(++w)), i()[c >>> 2 >>> 0] = I, (c += 4) + 4 > f) break;\n            }\n            return i()[c >>> 2 >>> 0] = 0, c - b;\n        }, Gc = (s)=>{\n            for(var c = 0, f = 0; f < s.length; ++f){\n                var b = s.charCodeAt(f);\n                55296 <= b && 57343 >= b && ++f, c += 4;\n            }\n            return c;\n        };\n        function Hc(s, c, f) {\n            if (s >>>= 0, c >>>= 0, f = Qe(f >>>= 0), c === 2) var b = Uc, w = Nc, I = Vc, O = (B)=>o()[B >>> 1 >>> 0];\n            else c === 4 && (b = Wc, w = Lc, I = Gc, O = (B)=>a()[B >>> 2 >>> 0]);\n            st(s, {\n                name: f,\n                fromWireType: (B)=>{\n                    for(var L, H = a()[B >>> 2 >>> 0], X = B + 4, ce = 0; ce <= H; ++ce){\n                        var ge = B + 4 + ce * c;\n                        ce != H && O(ge) != 0 || (X = b(X, ge - X), L === void 0 ? L = X : (L += String.fromCharCode(0), L += X), X = ge + c);\n                    }\n                    return Je(B), L;\n                },\n                toWireType: (B, L)=>{\n                    if (typeof L != \"string\") throw new mt(\"Cannot pass non-string to C++ string type \".concat(f));\n                    var H = I(L), X = fr(4 + H + c);\n                    return a()[X >>> 2 >>> 0] = H / c, w(L, X + 4, H + c), B !== null && B.push(Je, X), X;\n                },\n                argPackAdvance: ft,\n                readValueFromPointer: Cn,\n                Eb (B) {\n                    Je(B);\n                }\n            });\n        }\n        function Fc(s, c) {\n            st(s >>>= 0, {\n                Ub: !0,\n                name: c = Qe(c >>> 0),\n                argPackAdvance: 0,\n                fromWireType: ()=>{},\n                toWireType: ()=>{}\n            });\n        }\n        var qc = ()=>1;\n        function Kc(s) {\n            Dn(s >>> 0, !y, 1, !_, 131072, !1), Ho();\n        }\n        var fi = (s)=>{\n            if (!we) try {\n                if (s(), !(0 < wt)) try {\n                    g ? hr(ee) : vn(ee);\n                } catch (c) {\n                    c instanceof yn || c == \"unwind\" || k(1, c);\n                }\n            } catch (c) {\n                c instanceof yn || c == \"unwind\" || k(1, c);\n            }\n        };\n        function An(s) {\n            s >>>= 0, typeof Atomics.oc == \"function\" && (Atomics.oc(i(), s >>> 2, s).value.then(ir), s += 128, Atomics.store(i(), s >>> 2, 1));\n        }\n        var ir = ()=>{\n            var s = Mt();\n            s && (An(s), fi(Hi));\n        };\n        function jc(s, c) {\n            (s >>>= 0) == c >>> 0 ? setTimeout(ir) : g ? postMessage({\n                targetThread: s,\n                cmd: \"checkMailbox\"\n            }) : (s = Ze[s]) && s.postMessage({\n                cmd: \"checkMailbox\"\n            });\n        }\n        var kn = [];\n        function Yc(s, c, f, b, w) {\n            for(c >>>= 0, b /= 2, kn.length = b, f = w >>> 0 >>> 3, w = 0; w < b; w++)kn[w] = q[f + 2 * w] ? q[f + 2 * w + 1] : l()[f + 2 * w + 1 >>> 0];\n            return (c ? bn[c] : Np[s])(...kn);\n        }\n        function Zc(s) {\n            s >>>= 0, g ? postMessage({\n                cmd: \"cleanupThread\",\n                thread: s\n            }) : Go(Ze[s]);\n        }\n        function Qc(s) {}\n        var ar = (s, c)=>{\n            var f = Sn[s];\n            if (f === void 0) throw s = Vi(s), f = Qe(s), Je(s), new mt(\"\".concat(c, \" has unknown type \").concat(f));\n            return f;\n        }, hi = (s, c, f)=>{\n            var b = [];\n            return s = s.toWireType(b, f), b.length && (a()[c >>> 2 >>> 0] = Ve(b)), s;\n        };\n        function Xc(s, c, f) {\n            return c >>>= 0, f >>>= 0, s = Me(s >>> 0), c = ar(c, \"emval::as\"), hi(c, f, s);\n        }\n        function Jc(s, c) {\n            return c >>>= 0, s = Me(s >>> 0), (c = ar(c, \"emval::as\")).toWireType(null, s);\n        }\n        var sr = (s)=>{\n            try {\n                s();\n            } catch (c) {\n                ct(c);\n            }\n        }, ht = 0, Xe = null, gi = 0, ur = [], bi = {}, yi = {}, ep = 0, En = null, tp = [];\n        function _i(s) {\n            return function(c) {\n                if (!we) {\n                    if (ht === 0) {\n                        var f = !1, b = !1;\n                        c(function() {\n                            let w = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n                            if (!we && (gi = w, f = !0, b)) {\n                                ht = 2, sr(()=>Yi(Xe)), typeof Browser < \"u\" && Browser.Lb.Sb && Browser.Lb.resume(), w = !1;\n                                try {\n                                    var I = function() {\n                                        var L = i()[Xe + 8 >>> 2 >>> 0];\n                                        return L = Z[yi[L]], --wt, L();\n                                    }();\n                                } catch (L) {\n                                    I = L, w = !0;\n                                }\n                                var O = !1;\n                                if (!Xe) {\n                                    var B = En;\n                                    B && (En = null, (w ? B.reject : B.resolve)(I), O = !0);\n                                }\n                                if (w && !O) throw I;\n                            }\n                        }), b = !0, f || (ht = 1, Xe = function() {\n                            var w = fr(65548), I = w + 12;\n                            a()[w >>> 2 >>> 0] = I, a()[w + 4 >>> 2 >>> 0] = I + 65536, I = ur[0];\n                            var O = bi[I];\n                            return O === void 0 && (O = ep++, bi[I] = O, yi[O] = I), I = O, i()[w + 8 >>> 2 >>> 0] = I, w;\n                        }(), typeof Browser < \"u\" && Browser.Lb.Sb && Browser.Lb.pause(), sr(()=>Ki(Xe)));\n                    } else ht === 2 ? (ht = 0, sr(Zi), Je(Xe), Xe = null, tp.forEach(fi)) : ct(\"invalid state: \".concat(ht));\n                    return gi;\n                }\n            }((c)=>{\n                s().then(c);\n            });\n        }\n        function rp(s) {\n            return s >>>= 0, _i(()=>(s = Me(s)).then(Ve));\n        }\n        var dr = [];\n        function np(s, c, f, b) {\n            return f >>>= 0, b >>>= 0, (s = dr[s >>> 0])(null, c = Me(c >>> 0), f, b);\n        }\n        var op = {}, lr = (s)=>{\n            var c = op[s];\n            return c === void 0 ? Qe(s) : c;\n        };\n        function ip(s, c, f, b, w) {\n            return f >>>= 0, b >>>= 0, w >>>= 0, (s = dr[s >>> 0])(c = Me(c >>> 0), c[f = lr(f)], b, w);\n        }\n        var wi = ()=>typeof globalThis == \"object\" ? globalThis : Function(\"return this\")();\n        function ap(s) {\n            return (s >>>= 0) == 0 ? Ve(wi()) : (s = lr(s), Ve(wi()[s]));\n        }\n        var sp = (s)=>{\n            var c = dr.length;\n            return dr.push(s), c;\n        }, up = (s, c)=>{\n            for(var f = Array(s), b = 0; b < s; ++b)f[b] = ar(a()[c + 4 * b >>> 2 >>> 0], \"parameter \" + b);\n            return f;\n        }, vi = (s, c)=>Object.defineProperty(c, \"name\", {\n                value: s\n            });\n        function dp(s, c, f) {\n            var b = (c = up(s, c >>> 0)).shift();\n            s--;\n            var w = \"return function (obj, func, destructorsRef, args) {\\n\", I = 0, O = [];\n            f === 0 && O.push(\"obj\");\n            for(var B = [\n                \"retType\"\n            ], L = [\n                b\n            ], H = 0; H < s; ++H)O.push(\"arg\" + H), B.push(\"argType\" + H), L.push(c[H]), w += \"  var arg\".concat(H, \" = argType\").concat(H, \".readValueFromPointer(args\").concat(I ? \"+\" + I : \"\", \");\\n\"), I += c[H].argPackAdvance;\n            return w += \"  var rv = \".concat(f === 1 ? \"new func\" : \"func.call\", \"(\").concat(O.join(\", \"), \");\\n\"), b.Ub || (B.push(\"emval_returnValue\"), L.push(hi), w += \"  return emval_returnValue(retType, destructorsRef, rv);\\n\"), B.push(w + \"};\\n\"), s = (function(X) {\n                var ce = Function;\n                if (!(ce instanceof Function)) throw new TypeError(\"new_ called with constructor type \".concat(typeof ce, \" which is not a function\"));\n                var ge = vi(ce.name || \"unknownFunctionName\", function() {});\n                return ge.prototype = ce.prototype, ge = new ge, (X = ce.apply(ge, X)) instanceof Object ? X : ge;\n            })(B)(...L), f = \"methodCaller<(\".concat(c.map((X)=>X.name).join(\", \"), \") => \").concat(b.name, \">\"), sp(vi(f, s));\n        }\n        function lp(s) {\n            return s = lr(s >>> 0), Ve(u[s]);\n        }\n        function cp(s, c) {\n            return c >>>= 0, s = Me(s >>> 0), c = Me(c), Ve(s[c]);\n        }\n        function pp(s) {\n            9 < (s >>>= 0) && (ut[s + 1] += 1);\n        }\n        function mp() {\n            return Ve([]);\n        }\n        function fp(s) {\n            s = Me(s >>> 0);\n            for(var c = Array(s.length), f = 0; f < s.length; f++)c[f] = s[f];\n            return Ve(c);\n        }\n        function hp(s) {\n            return Ve(lr(s >>> 0));\n        }\n        function gp() {\n            return Ve({});\n        }\n        function bp(s) {\n            for(var c = Me(s >>>= 0); c.length;){\n                var f = c.pop();\n                c.pop()(f);\n            }\n            In(s);\n        }\n        function yp(s, c, f) {\n            c >>>= 0, f >>>= 0, s = Me(s >>> 0), c = Me(c), f = Me(f), s[c] = f;\n        }\n        function _p(s, c) {\n            return c >>>= 0, s = (s = ar(s >>> 0, \"_emval_take_value\")).readValueFromPointer(c), Ve(s);\n        }\n        function wp(s, c) {\n            s = -9007199254740992 > s || 9007199254740992 < s ? NaN : Number(s), c >>>= 0, s = new Date(1e3 * s), i()[c >>> 2 >>> 0] = s.getUTCSeconds(), i()[c + 4 >>> 2 >>> 0] = s.getUTCMinutes(), i()[c + 8 >>> 2 >>> 0] = s.getUTCHours(), i()[c + 12 >>> 2 >>> 0] = s.getUTCDate(), i()[c + 16 >>> 2 >>> 0] = s.getUTCMonth(), i()[c + 20 >>> 2 >>> 0] = s.getUTCFullYear() - 1900, i()[c + 24 >>> 2 >>> 0] = s.getUTCDay(), s = (s.getTime() - Date.UTC(s.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0, i()[c + 28 >>> 2 >>> 0] = s;\n        }\n        var Dt = (s)=>s % 4 == 0 && (s % 100 != 0 || s % 400 == 0), $i = [\n            0,\n            31,\n            60,\n            91,\n            121,\n            152,\n            182,\n            213,\n            244,\n            274,\n            305,\n            335\n        ], xi = [\n            0,\n            31,\n            59,\n            90,\n            120,\n            151,\n            181,\n            212,\n            243,\n            273,\n            304,\n            334\n        ];\n        function vp(s, c) {\n            s = -9007199254740992 > s || 9007199254740992 < s ? NaN : Number(s), c >>>= 0, s = new Date(1e3 * s), i()[c >>> 2 >>> 0] = s.getSeconds(), i()[c + 4 >>> 2 >>> 0] = s.getMinutes(), i()[c + 8 >>> 2 >>> 0] = s.getHours(), i()[c + 12 >>> 2 >>> 0] = s.getDate(), i()[c + 16 >>> 2 >>> 0] = s.getMonth(), i()[c + 20 >>> 2 >>> 0] = s.getFullYear() - 1900, i()[c + 24 >>> 2 >>> 0] = s.getDay();\n            var f = (Dt(s.getFullYear()) ? $i : xi)[s.getMonth()] + s.getDate() - 1 | 0;\n            i()[c + 28 >>> 2 >>> 0] = f, i()[c + 36 >>> 2 >>> 0] = -60 * s.getTimezoneOffset(), f = new Date(s.getFullYear(), 6, 1).getTimezoneOffset();\n            var b = new Date(s.getFullYear(), 0, 1).getTimezoneOffset();\n            s = 0 | (f != b && s.getTimezoneOffset() == Math.min(b, f)), i()[c + 32 >>> 2 >>> 0] = s;\n        }\n        function $p(s) {\n            s >>>= 0;\n            var c = new Date(i()[s + 20 >>> 2 >>> 0] + 1900, i()[s + 16 >>> 2 >>> 0], i()[s + 12 >>> 2 >>> 0], i()[s + 8 >>> 2 >>> 0], i()[s + 4 >>> 2 >>> 0], i()[s >>> 2 >>> 0], 0), f = i()[s + 32 >>> 2 >>> 0], b = c.getTimezoneOffset(), w = new Date(c.getFullYear(), 6, 1).getTimezoneOffset(), I = new Date(c.getFullYear(), 0, 1).getTimezoneOffset(), O = Math.min(I, w);\n            return 0 > f ? i()[s + 32 >>> 2 >>> 0] = +(w != I && O == b) : 0 < f != (O == b) && (w = Math.max(I, w), c.setTime(c.getTime() + 6e4 * ((0 < f ? O : w) - b))), i()[s + 24 >>> 2 >>> 0] = c.getDay(), f = (Dt(c.getFullYear()) ? $i : xi)[c.getMonth()] + c.getDate() - 1 | 0, i()[s + 28 >>> 2 >>> 0] = f, i()[s >>> 2 >>> 0] = c.getSeconds(), i()[s + 4 >>> 2 >>> 0] = c.getMinutes(), i()[s + 8 >>> 2 >>> 0] = c.getHours(), i()[s + 12 >>> 2 >>> 0] = c.getDate(), i()[s + 16 >>> 2 >>> 0] = c.getMonth(), i()[s + 20 >>> 2 >>> 0] = c.getYear(), s = c.getTime(), BigInt(isNaN(s) ? -1 : s / 1e3);\n        }\n        function Si(s, c, f, b, w, I, O) {\n            return g ? xe(16, 1, s, c, f, b, w, I, O) : -52;\n        }\n        function Ti(s, c, f, b, w, I) {\n            if (g) return xe(17, 1, s, c, f, b, w, I);\n        }\n        function xp(s, c, f, b) {\n            s >>>= 0, c >>>= 0, f >>>= 0, b >>>= 0;\n            var w = new Date().getFullYear(), I = new Date(w, 0, 1), O = new Date(w, 6, 1);\n            w = I.getTimezoneOffset();\n            var B = O.getTimezoneOffset(), L = Math.max(w, B);\n            a()[s >>> 2 >>> 0] = 60 * L, i()[c >>> 2 >>> 0] = +(w != B), I = (s = (H)=>H.toLocaleTimeString(void 0, {\n                    hour12: !1,\n                    timeZoneName: \"short\"\n                }).split(\" \")[1])(I), O = s(O), B < w ? (Ot(I, f, 17), Ot(O, b, 17)) : (Ot(I, b, 17), Ot(O, f, 17));\n        }\n        var Pn = [], Ii = (s, c)=>{\n            Pn.length = 0;\n            for(var f; f = r()[s++ >>> 0];){\n                var b = f != 105;\n                c += (b &= f != 112) && c % 8 ? 4 : 0, Pn.push(f == 112 ? a()[c >>> 2 >>> 0] : f == 106 ? q[c >>> 3] : f == 105 ? i()[c >>> 2 >>> 0] : l()[c >>> 3 >>> 0]), c += b ? 8 : 4;\n            }\n            return Pn;\n        };\n        function Sp(s, c, f) {\n            return s >>>= 0, c = Ii(c >>> 0, f >>> 0), bn[s](...c);\n        }\n        function Tp(s, c, f) {\n            return s >>>= 0, c = Ii(c >>> 0, f >>> 0), bn[s](...c);\n        }\n        var Ip = ()=>{}, Cp = ()=>Date.now();\n        function Ap(s, c) {\n            return j(Ce(s >>> 0, c >>> 0));\n        }\n        var Ci, kp = ()=>{\n            throw wt += 1, \"unwind\";\n        };\n        function Ep() {\n            return 4294901760;\n        }\n        Ci = ()=>performance.timeOrigin + performance.now();\n        var Pp = ()=>navigator.hardwareConcurrency;\n        function zp() {\n            return ct(\"Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER\"), 0;\n        }\n        function Op(s) {\n            s >>>= 0;\n            var c = r().length;\n            if (s <= c || 4294901760 < s) return !1;\n            for(var f = 1; 4 >= f; f *= 2){\n                var b = c * (1 + .2 / f);\n                b = Math.min(b, s + 100663296);\n                var w = Math;\n                b = Math.max(s, b);\n                e: {\n                    w = (w.min.call(w, 4294901760, b + (65536 - b % 65536) % 65536) - se.buffer.byteLength + 65535) / 65536;\n                    try {\n                        se.grow(w), ye();\n                        var I = 1;\n                        break e;\n                    } catch (e1) {}\n                    I = void 0;\n                }\n                if (I) return !0;\n            }\n            return !1;\n        }\n        var cr = ()=>(ct(\"Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER\"), 0), Bt = {}, Ai = (s)=>{\n            s.forEach((c)=>{\n                var f = cr();\n                f && (Bt[f] = c);\n            });\n        };\n        function Dp() {\n            var s = Error().stack.toString().split(\"\\n\");\n            return s[0] == \"Error\" && s.shift(), Ai(s), Bt.Qb = cr(), Bt.fc = s, Bt.Qb;\n        }\n        function Bp(s, c, f) {\n            if (s >>>= 0, c >>>= 0, Bt.Qb == s) var b = Bt.fc;\n            else (b = Error().stack.toString().split(\"\\n\"))[0] == \"Error\" && b.shift(), Ai(b);\n            for(var w = 3; b[w] && cr() != s;)++w;\n            for(s = 0; s < f && b[s + w]; ++s)i()[c + 4 * s >>> 2 >>> 0] = cr();\n            return s;\n        }\n        var zn, On = {}, ki = ()=>{\n            if (!zn) {\n                var s, c = {\n                    USER: \"web_user\",\n                    LOGNAME: \"web_user\",\n                    PATH: \"/\",\n                    PWD: \"/\",\n                    HOME: \"/home/web_user\",\n                    LANG: (typeof navigator == \"object\" && navigator.languages && navigator.languages[0] || \"C\").replace(\"-\", \"_\") + \".UTF-8\",\n                    _: A || \"./this.program\"\n                };\n                for(s in On)On[s] === void 0 ? delete c[s] : c[s] = On[s];\n                var f = [];\n                for(s in c)f.push(\"\".concat(s, \"=\").concat(c[s]));\n                zn = f;\n            }\n            return zn;\n        };\n        function Ei(s, c) {\n            if (g) return xe(18, 1, s, c);\n            s >>>= 0, c >>>= 0;\n            var f = 0;\n            return ki().forEach((b, w)=>{\n                var I = c + f;\n                for(w = a()[s + 4 * w >>> 2 >>> 0] = I, I = 0; I < b.length; ++I)t()[w++ >>> 0] = b.charCodeAt(I);\n                t()[w >>> 0] = 0, f += b.length + 1;\n            }), 0;\n        }\n        function Pi(s, c) {\n            if (g) return xe(19, 1, s, c);\n            s >>>= 0, c >>>= 0;\n            var f = ki();\n            a()[s >>> 2 >>> 0] = f.length;\n            var b = 0;\n            return f.forEach((w)=>b += w.length + 1), a()[c >>> 2 >>> 0] = b, 0;\n        }\n        function zi(s) {\n            return g ? xe(20, 1, s) : 52;\n        }\n        function Oi(s, c, f, b) {\n            return g ? xe(21, 1, s, c, f, b) : 52;\n        }\n        function Di(s, c, f, b) {\n            return g ? xe(22, 1, s, c, f, b) : 70;\n        }\n        var Mp = [\n            null,\n            [],\n            []\n        ];\n        function Bi(s, c, f, b) {\n            if (g) return xe(23, 1, s, c, f, b);\n            c >>>= 0, f >>>= 0, b >>>= 0;\n            for(var w = 0, I = 0; I < f; I++){\n                var O = a()[c >>> 2 >>> 0], B = a()[c + 4 >>> 2 >>> 0];\n                c += 8;\n                for(var L = 0; L < B; L++){\n                    var H = r()[O + L >>> 0], X = Mp[s];\n                    H === 0 || H === 10 ? ((s === 1 ? K : j)(Zo(X, 0)), X.length = 0) : X.push(H);\n                }\n                w += B;\n            }\n            return a()[b >>> 2 >>> 0] = w, 0;\n        }\n        var Mi = [\n            31,\n            29,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31\n        ], Ri = [\n            31,\n            28,\n            31,\n            30,\n            31,\n            30,\n            31,\n            31,\n            30,\n            31,\n            30,\n            31\n        ], Rp = (s, c)=>{\n            t().set(s, c >>> 0);\n        };\n        function Ui(s, c, f, b) {\n            function w(z, de, Te) {\n                for(z = typeof z == \"number\" ? z.toString() : z || \"\"; z.length < de;)z = Te[0] + z;\n                return z;\n            }\n            function I(z, de) {\n                return w(z, de, \"0\");\n            }\n            function O(z, de) {\n                function Te(Xi) {\n                    return 0 > Xi ? -1 : 0 < Xi ? 1 : 0;\n                }\n                var $t;\n                return ($t = Te(z.getFullYear() - de.getFullYear())) === 0 && ($t = Te(z.getMonth() - de.getMonth())) === 0 && ($t = Te(z.getDate() - de.getDate())), $t;\n            }\n            function B(z) {\n                switch(z.getDay()){\n                    case 0:\n                        return new Date(z.getFullYear() - 1, 11, 29);\n                    case 1:\n                        return z;\n                    case 2:\n                        return new Date(z.getFullYear(), 0, 3);\n                    case 3:\n                        return new Date(z.getFullYear(), 0, 2);\n                    case 4:\n                        return new Date(z.getFullYear(), 0, 1);\n                    case 5:\n                        return new Date(z.getFullYear() - 1, 11, 31);\n                    case 6:\n                        return new Date(z.getFullYear() - 1, 11, 30);\n                }\n            }\n            function L(z) {\n                var de = z.Cb;\n                for(z = new Date(new Date(z.Db + 1900, 0, 1).getTime()); 0 < de;){\n                    var Te = z.getMonth(), $t = (Dt(z.getFullYear()) ? Mi : Ri)[Te];\n                    if (!(de > $t - z.getDate())) {\n                        z.setDate(z.getDate() + de);\n                        break;\n                    }\n                    de -= $t - z.getDate() + 1, z.setDate(1), 11 > Te ? z.setMonth(Te + 1) : (z.setMonth(0), z.setFullYear(z.getFullYear() + 1));\n                }\n                return Te = new Date(z.getFullYear() + 1, 0, 4), de = B(new Date(z.getFullYear(), 0, 4)), Te = B(Te), 0 >= O(de, z) ? 0 >= O(Te, z) ? z.getFullYear() + 1 : z.getFullYear() : z.getFullYear() - 1;\n            }\n            s >>>= 0, c >>>= 0, f >>>= 0, b >>>= 0;\n            var H = a()[b + 40 >>> 2 >>> 0];\n            for(var X in b = {\n                lc: i()[b >>> 2 >>> 0],\n                kc: i()[b + 4 >>> 2 >>> 0],\n                Ib: i()[b + 8 >>> 2 >>> 0],\n                Mb: i()[b + 12 >>> 2 >>> 0],\n                Jb: i()[b + 16 >>> 2 >>> 0],\n                Db: i()[b + 20 >>> 2 >>> 0],\n                vb: i()[b + 24 >>> 2 >>> 0],\n                Cb: i()[b + 28 >>> 2 >>> 0],\n                sc: i()[b + 32 >>> 2 >>> 0],\n                jc: i()[b + 36 >>> 2 >>> 0],\n                mc: H ? Ce(H) : \"\"\n            }, f = Ce(f), H = {\n                \"%c\": \"%a %b %d %H:%M:%S %Y\",\n                \"%D\": \"%m/%d/%y\",\n                \"%F\": \"%Y-%m-%d\",\n                \"%h\": \"%b\",\n                \"%r\": \"%I:%M:%S %p\",\n                \"%R\": \"%H:%M\",\n                \"%T\": \"%H:%M:%S\",\n                \"%x\": \"%m/%d/%y\",\n                \"%X\": \"%H:%M:%S\",\n                \"%Ec\": \"%c\",\n                \"%EC\": \"%C\",\n                \"%Ex\": \"%m/%d/%y\",\n                \"%EX\": \"%H:%M:%S\",\n                \"%Ey\": \"%y\",\n                \"%EY\": \"%Y\",\n                \"%Od\": \"%d\",\n                \"%Oe\": \"%e\",\n                \"%OH\": \"%H\",\n                \"%OI\": \"%I\",\n                \"%Om\": \"%m\",\n                \"%OM\": \"%M\",\n                \"%OS\": \"%S\",\n                \"%Ou\": \"%u\",\n                \"%OU\": \"%U\",\n                \"%OV\": \"%V\",\n                \"%Ow\": \"%w\",\n                \"%OW\": \"%W\",\n                \"%Oy\": \"%y\"\n            })f = f.replace(new RegExp(X, \"g\"), H[X]);\n            var ce = \"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"), ge = \"January February March April May June July August September October November December\".split(\" \");\n            for(X in H = {\n                \"%a\": (z)=>ce[z.vb].substring(0, 3),\n                \"%A\": (z)=>ce[z.vb],\n                \"%b\": (z)=>ge[z.Jb].substring(0, 3),\n                \"%B\": (z)=>ge[z.Jb],\n                \"%C\": (z)=>I((z.Db + 1900) / 100 | 0, 2),\n                \"%d\": (z)=>I(z.Mb, 2),\n                \"%e\": (z)=>w(z.Mb, 2, \" \"),\n                \"%g\": (z)=>L(z).toString().substring(2),\n                \"%G\": L,\n                \"%H\": (z)=>I(z.Ib, 2),\n                \"%I\": (z)=>((z = z.Ib) == 0 ? z = 12 : 12 < z && (z -= 12), I(z, 2)),\n                \"%j\": (z)=>{\n                    for(var de = 0, Te = 0; Te <= z.Jb - 1; de += (Dt(z.Db + 1900) ? Mi : Ri)[Te++]);\n                    return I(z.Mb + de, 3);\n                },\n                \"%m\": (z)=>I(z.Jb + 1, 2),\n                \"%M\": (z)=>I(z.kc, 2),\n                \"%n\": ()=>\"\\n\",\n                \"%p\": (z)=>0 <= z.Ib && 12 > z.Ib ? \"AM\" : \"PM\",\n                \"%S\": (z)=>I(z.lc, 2),\n                \"%t\": ()=>\"\t\",\n                \"%u\": (z)=>z.vb || 7,\n                \"%U\": (z)=>I(Math.floor((z.Cb + 7 - z.vb) / 7), 2),\n                \"%V\": (z)=>{\n                    var de = Math.floor((z.Cb + 7 - (z.vb + 6) % 7) / 7);\n                    if (2 >= (z.vb + 371 - z.Cb - 2) % 7 && de++, de) de == 53 && ((Te = (z.vb + 371 - z.Cb) % 7) == 4 || Te == 3 && Dt(z.Db) || (de = 1));\n                    else {\n                        de = 52;\n                        var Te = (z.vb + 7 - z.Cb - 1) % 7;\n                        (Te == 4 || Te == 5 && Dt(z.Db % 400 - 1)) && de++;\n                    }\n                    return I(de, 2);\n                },\n                \"%w\": (z)=>z.vb,\n                \"%W\": (z)=>I(Math.floor((z.Cb + 7 - (z.vb + 6) % 7) / 7), 2),\n                \"%y\": (z)=>(z.Db + 1900).toString().substring(2),\n                \"%Y\": (z)=>z.Db + 1900,\n                \"%z\": (z)=>{\n                    var de = 0 <= (z = z.jc);\n                    return z = Math.abs(z) / 60, (de ? \"+\" : \"-\") + (\"0000\" + (z / 60 * 100 + z % 60)).slice(-4);\n                },\n                \"%Z\": (z)=>z.mc,\n                \"%%\": ()=>\"%\"\n            }, f = f.replace(/%%/g, \"\\x00\\x00\"), H)f.includes(X) && (f = f.replace(new RegExp(X, \"g\"), H[X](b)));\n            return X = function(z) {\n                var de = Array($n(z) + 1);\n                return Jo(z, de, 0, de.length), de;\n            }(f = f.replace(/\\0\\0/g, \"%\")), X.length > c ? 0 : (Rp(X, s), X.length - 1);\n        }\n        function Up(s, c, f, b) {\n            return Ui(s >>> 0, c >>> 0, f >>> 0, b >>> 0);\n        }\n        g || function() {\n            for(var s = u.numThreads - 1; s--;)qo();\n            Ye.unshift(()=>{\n                Gt++, function(c) {\n                    g ? c() : Promise.all(pt.map(Fo)).then(c);\n                }(()=>Do());\n            });\n        }();\n        for(var Ni = Array(256), pr = 0; 256 > pr; ++pr)Ni[pr] = String.fromCharCode(pr);\n        ci = Ni, mt = u.BindingError = class extends Error {\n            constructor(s){\n                super(s), this.name = \"BindingError\";\n            }\n        }, u.InternalError = class extends Error {\n            constructor(s){\n                super(s), this.name = \"InternalError\";\n            }\n        }, ut.push(0, 1, void 0, 1, null, 1, !0, 1, !1, 1), u.count_emval_handles = ()=>ut.length / 2 - 5 - Tn.length;\n        var Np = [\n            wn,\n            Wo,\n            Ko,\n            Qo,\n            Xo,\n            ei,\n            ti,\n            ri,\n            ni,\n            oi,\n            ii,\n            ai,\n            si,\n            ui,\n            di,\n            li,\n            Si,\n            Ti,\n            Ei,\n            Pi,\n            zi,\n            Oi,\n            Di,\n            Bi\n        ], Z = function() {\n            function s(f, b) {\n                return Z = f.exports, Z = function() {\n                    var w = Z, I = {};\n                    for (let [O, B] of Object.entries(w))I[O] = typeof B == \"function\" ? function() {\n                        for(var _len = arguments.length, L = new Array(_len), _key = 0; _key < _len; _key++){\n                            L[_key] = arguments[_key];\n                        }\n                        ur.push(O);\n                        try {\n                            return B(...L);\n                        } finally{\n                            we || (ur.pop(), Xe && ht === 1 && ur.length === 0 && (ht = 0, wt += 1, sr(ji), typeof Fibers < \"u\" && Fibers.tc()));\n                        }\n                    } : B;\n                    return I;\n                }(), Z = function() {\n                    var w = Z, I = (B)=>(L)=>B(L) >>> 0, O = (B)=>()=>B() >>> 0;\n                    return (w = Object.assign({}, w)).Da = I(w.Da), w.gb = O(w.gb), w.ib = I(w.ib), w.emscripten_main_runtime_thread_id = O(w.emscripten_main_runtime_thread_id), w.tb = I(w.tb), w.ub = O(w.ub), w;\n                }(), Lo.push(Z.jb), Lt.unshift(Z.Ca), Y = b, Do(), Z;\n            }\n            var c = No();\n            if (Gt++, u.instantiateWasm) try {\n                return u.instantiateWasm(c, s);\n            } catch (f) {\n                j(\"Module.instantiateWasm callback failed with error: \".concat(f)), m(f);\n            }\n            return gn || (gn = u.locateFile ? Bo(\"ort-wasm-simd-threaded.jsep.wasm\") ? \"ort-wasm-simd-threaded.jsep.wasm\" : u.locateFile ? u.locateFile(\"ort-wasm-simd-threaded.jsep.wasm\", P) : P + \"ort-wasm-simd-threaded.jsep.wasm\" : /* asset import */ new __webpack_require__.U(__webpack_require__(/*! ort-wasm-simd-threaded.jsep.wasm */ \"(app-pages-browser)/./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm\")).href), (function(f, b) {\n                var w = gn;\n                return D || typeof WebAssembly.instantiateStreaming != \"function\" || Bo(w) || Mo(w) || typeof fetch != \"function\" ? Uo(w, f, b) : fetch(w, {\n                    credentials: \"same-origin\"\n                }).then((I)=>WebAssembly.instantiateStreaming(I, f).then(b, function(O) {\n                        return j(\"wasm streaming compile failed: \".concat(O)), j(\"falling back to ArrayBuffer instantiation\"), Uo(w, f, b);\n                    }));\n            })(c, function(f) {\n                s(f.instance, f.module);\n            }).catch(m), {};\n        }(), Vi = (s)=>(Vi = Z.Da)(s), Wi = ()=>(Wi = Z.Ea)();\n        u._OrtInit = (s, c)=>(u._OrtInit = Z.Fa)(s, c), u._OrtGetLastError = (s, c)=>(u._OrtGetLastError = Z.Ga)(s, c), u._OrtCreateSessionOptions = (s, c, f, b, w, I, O, B, L, H)=>(u._OrtCreateSessionOptions = Z.Ha)(s, c, f, b, w, I, O, B, L, H), u._OrtAppendExecutionProvider = (s, c)=>(u._OrtAppendExecutionProvider = Z.Ia)(s, c), u._OrtAddFreeDimensionOverride = (s, c, f)=>(u._OrtAddFreeDimensionOverride = Z.Ja)(s, c, f), u._OrtAddSessionConfigEntry = (s, c, f)=>(u._OrtAddSessionConfigEntry = Z.Ka)(s, c, f), u._OrtReleaseSessionOptions = (s)=>(u._OrtReleaseSessionOptions = Z.La)(s), u._OrtCreateSession = (s, c, f)=>(u._OrtCreateSession = Z.Ma)(s, c, f), u._OrtReleaseSession = (s)=>(u._OrtReleaseSession = Z.Na)(s), u._OrtGetInputOutputCount = (s, c, f)=>(u._OrtGetInputOutputCount = Z.Oa)(s, c, f), u._OrtGetInputName = (s, c)=>(u._OrtGetInputName = Z.Pa)(s, c), u._OrtGetOutputName = (s, c)=>(u._OrtGetOutputName = Z.Qa)(s, c), u._OrtFree = (s)=>(u._OrtFree = Z.Ra)(s), u._OrtCreateTensor = (s, c, f, b, w, I)=>(u._OrtCreateTensor = Z.Sa)(s, c, f, b, w, I), u._OrtGetTensorData = (s, c, f, b, w)=>(u._OrtGetTensorData = Z.Ta)(s, c, f, b, w), u._OrtReleaseTensor = (s)=>(u._OrtReleaseTensor = Z.Ua)(s), u._OrtCreateRunOptions = (s, c, f, b)=>(u._OrtCreateRunOptions = Z.Va)(s, c, f, b), u._OrtAddRunConfigEntry = (s, c, f)=>(u._OrtAddRunConfigEntry = Z.Wa)(s, c, f), u._OrtReleaseRunOptions = (s)=>(u._OrtReleaseRunOptions = Z.Xa)(s), u._OrtCreateBinding = (s)=>(u._OrtCreateBinding = Z.Ya)(s), u._OrtBindInput = (s, c, f)=>(u._OrtBindInput = Z.Za)(s, c, f), u._OrtBindOutput = (s, c, f, b)=>(u._OrtBindOutput = Z._a)(s, c, f, b), u._OrtClearBoundOutputs = (s)=>(u._OrtClearBoundOutputs = Z.$a)(s), u._OrtReleaseBinding = (s)=>(u._OrtReleaseBinding = Z.ab)(s), u._OrtRunWithBinding = (s, c, f, b, w)=>(u._OrtRunWithBinding = Z.bb)(s, c, f, b, w), u._OrtRun = (s, c, f, b, w, I, O, B)=>(u._OrtRun = Z.cb)(s, c, f, b, w, I, O, B), u._OrtEndProfiling = (s)=>(u._OrtEndProfiling = Z.db)(s), u._JsepOutput = (s, c, f)=>(u._JsepOutput = Z.eb)(s, c, f), u._JsepGetNodeName = (s)=>(u._JsepGetNodeName = Z.fb)(s);\n        var mr, Mt = ()=>(Mt = Z.gb)(), Je = u._free = (s)=>(Je = u._free = Z.hb)(s), fr = u._malloc = (s)=>(fr = u._malloc = Z.ib)(s), Dn = (s, c, f, b, w, I)=>(Dn = Z.lb)(s, c, f, b, w, I), Li = ()=>(Li = Z.mb)(), Gi = (s, c, f, b, w)=>(Gi = Z.nb)(s, c, f, b, w), Bn = (s)=>(Bn = Z.ob)(s), hr = (s)=>(hr = Z.pb)(s), Hi = ()=>(Hi = Z.qb)(), Fi = (s, c)=>(Fi = Z.rb)(s, c), gr = (s)=>(gr = Z.sb)(s), Mn = (s)=>(Mn = Z.tb)(s), Rn = ()=>(Rn = Z.ub)(), qi = u.dynCall_ii = (s, c)=>(qi = u.dynCall_ii = Z.wb)(s, c), Ki = (s)=>(Ki = Z.xb)(s), ji = ()=>(ji = Z.yb)(), Yi = (s)=>(Yi = Z.zb)(s), Zi = ()=>(Zi = Z.Ab)();\n        function Qi() {\n            0 < Gt || (g ? (p(u), g || or(Lt), startWorker(u)) : (or(Ye), 0 < Gt || mr || (mr = !0, u.calledRun = !0, we || (g || or(Lt), p(u), g || or(fn)))));\n        }\n        return u.___start_em_js = 929301, u.___stop_em_js = 929547, u.stackSave = ()=>Rn(), u.stackRestore = (s)=>gr(s), u.stackAlloc = (s)=>Mn(s), u.setValue = function(s, c) {\n            let f = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"i8\";\n            switch(f.endsWith(\"*\") && (f = \"*\"), f){\n                case \"i1\":\n                case \"i8\":\n                    t()[s >>> 0] = c;\n                    break;\n                case \"i16\":\n                    n()[s >>> 1 >>> 0] = c;\n                    break;\n                case \"i32\":\n                    i()[s >>> 2 >>> 0] = c;\n                    break;\n                case \"i64\":\n                    q[s >>> 3] = BigInt(c);\n                    break;\n                case \"float\":\n                    d()[s >>> 2 >>> 0] = c;\n                    break;\n                case \"double\":\n                    l()[s >>> 3 >>> 0] = c;\n                    break;\n                case \"*\":\n                    a()[s >>> 2 >>> 0] = c;\n                    break;\n                default:\n                    ct(\"invalid type for setValue: \".concat(f));\n            }\n        }, u.getValue = function(s) {\n            let c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"i8\";\n            switch(c.endsWith(\"*\") && (c = \"*\"), c){\n                case \"i1\":\n                case \"i8\":\n                    return t()[s >>> 0];\n                case \"i16\":\n                    return n()[s >>> 1 >>> 0];\n                case \"i32\":\n                    return i()[s >>> 2 >>> 0];\n                case \"i64\":\n                    return q[s >>> 3];\n                case \"float\":\n                    return d()[s >>> 2 >>> 0];\n                case \"double\":\n                    return l()[s >>> 3 >>> 0];\n                case \"*\":\n                    return a()[s >>> 2 >>> 0];\n                default:\n                    ct(\"invalid type for getValue: \".concat(c));\n            }\n        }, u.UTF8ToString = Ce, u.stringToUTF8 = Ot, u.lengthBytesUTF8 = $n, Ht = function s() {\n            mr || Qi(), mr || (Ht = s);\n        }, Qi(), u.PTR_SIZE = 4, h;\n    }), Kp = za;\n    ((_globalThis_self = globalThis.self) === null || _globalThis_self === void 0 ? void 0 : _globalThis_self.name) === \"em-pthread\" && za();\n});\nvar Ra, jp, Ne, Ua, jn, Yp, Zp, Na, Qp, Ba, Va, Ma, Wa, xr = U(()=>{\n    \"use strict\";\n    $r();\n    Ra =  false || typeof location > \"u\" ? void 0 : location.origin, jp = ()=>{\n        var _url;\n        if (true) return ((_url = \"file:///Users/amityadav/Desktop/Text-Behind%20Image/node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs\") === null || _url === void 0 ? void 0 : _url.startsWith(\"file:\")) ? new URL(/* asset import */ new __webpack_require__.U(__webpack_require__(/*! ort.webgpu.bundle.min.mjs */ \"(app-pages-browser)/./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs?7f57\")).href, Ra).href : \"file:///Users/amityadav/Desktop/Text-Behind%20Image/node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs\";\n    }, Ne = jp(), Ua = ()=>{\n        if (Ne && !Ne.startsWith(\"blob:\")) return Ne.substring(0, Ne.lastIndexOf(\"/\") + 1);\n    }, jn = (e1, t)=>{\n        try {\n            let r = t !== null && t !== void 0 ? t : Ne;\n            return (r ? new URL(e1, r) : new URL(e1)).origin === Ra;\n        } catch (e1) {\n            return !1;\n        }\n    }, Yp = (e1, t)=>{\n        let r = t !== null && t !== void 0 ? t : Ne;\n        try {\n            return (r ? new URL(e1, r) : new URL(e1)).href;\n        } catch (e1) {\n            return;\n        }\n    }, Zp = (e1, t)=>\"\".concat(t !== null && t !== void 0 ? t : \"./\").concat(e1), Na = async (e1)=>{\n        let r = await (await fetch(e1, {\n            credentials: \"same-origin\"\n        })).blob();\n        return URL.createObjectURL(r);\n    }, Qp = async (e1)=>(await import(/*webpackIgnore:true*/ e1)).default, Ba = (Pa(), br(Ea)).default, Va = async ()=>{\n        if (!Ne) throw new Error(\"Failed to load proxy worker: cannot determine the script source URL.\");\n        if (jn(Ne)) return [\n            void 0,\n            Ba()\n        ];\n        let e1 = await Na(Ne);\n        return [\n            e1,\n            Ba(e1)\n        ];\n    }, Ma = (Da(), br(Oa)).default, Wa = async (e1, t, r)=>{\n        if (!e1 && !t && Ma && Ne && jn(Ne)) return [\n            void 0,\n            Ma\n        ];\n        {\n            let n = \"ort-wasm-simd-threaded.jsep.mjs\", o = e1 !== null && e1 !== void 0 ? e1 : Yp(n, t), i =  true && r && o && !jn(o, t), a = i ? await Na(o) : o !== null && o !== void 0 ? o : Zp(n, t);\n            return [\n                i ? a : void 0,\n                await Qp(a)\n            ];\n        }\n    };\n});\nvar Yn, Zn, zr, La, Xp, Jp, Sr, Ie, gt = U(()=>{\n    \"use strict\";\n    xr();\n    Zn = !1, zr = !1, La = !1, Xp = ()=>{\n        if (typeof SharedArrayBuffer > \"u\") return !1;\n        try {\n            return typeof MessageChannel < \"u\" && new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([\n                0,\n                97,\n                115,\n                109,\n                1,\n                0,\n                0,\n                0,\n                1,\n                4,\n                1,\n                96,\n                0,\n                0,\n                3,\n                2,\n                1,\n                0,\n                5,\n                4,\n                1,\n                3,\n                1,\n                1,\n                10,\n                11,\n                1,\n                9,\n                0,\n                65,\n                0,\n                254,\n                16,\n                2,\n                0,\n                26,\n                11\n            ]));\n        } catch (e1) {\n            return !1;\n        }\n    }, Jp = ()=>{\n        try {\n            return WebAssembly.validate(new Uint8Array([\n                0,\n                97,\n                115,\n                109,\n                1,\n                0,\n                0,\n                0,\n                1,\n                4,\n                1,\n                96,\n                0,\n                0,\n                3,\n                2,\n                1,\n                0,\n                10,\n                30,\n                1,\n                28,\n                0,\n                65,\n                0,\n                253,\n                15,\n                253,\n                12,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                253,\n                186,\n                1,\n                26,\n                11\n            ]));\n        } catch (e1) {\n            return !1;\n        }\n    }, Sr = async (e1)=>{\n        if (Zn) return Promise.resolve();\n        if (zr) throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");\n        if (La) throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");\n        zr = !0;\n        let t = e1.initTimeout, r = e1.numThreads;\n        if (!Jp()) throw new Error(\"WebAssembly SIMD is not supported in the current environment.\");\n        let n = Xp();\n        r > 1 && !n && (typeof self < \"u\" && !self.crossOriginIsolated && console.warn(\"env.wasm.numThreads is set to \" + r + \", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info.\"), console.warn(\"WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading.\"), e1.numThreads = r = 1);\n        var _a_href, _l_href;\n        let o = e1.wasmPaths, i = typeof o == \"string\" ? o : void 0, a = o === null || o === void 0 ? void 0 : o.mjs, d = (_a_href = a === null || a === void 0 ? void 0 : a.href) !== null && _a_href !== void 0 ? _a_href : a, l = o === null || o === void 0 ? void 0 : o.wasm, p = (_l_href = l === null || l === void 0 ? void 0 : l.href) !== null && _l_href !== void 0 ? _l_href : l, m = e1.wasmBinary, [u, h] = await Wa(d, i, r > 1), _ = !1, y = [];\n        if (t > 0 && y.push(new Promise((g)=>{\n            setTimeout(()=>{\n                _ = !0, g();\n            }, t);\n        })), y.push(new Promise((g, x)=>{\n            let $ = {\n                numThreads: r\n            };\n            if (m) $.wasmBinary = m;\n            else if (p || i) $.locateFile = (v)=>p !== null && p !== void 0 ? p : i + v;\n            else if (d && d.indexOf(\"blob:\") !== 0) $.locateFile = (v)=>new URL(v, d).href;\n            else if (u) {\n                let v = Ua();\n                v && ($.locateFile = (S)=>v + S);\n            }\n            h($).then((v)=>{\n                zr = !1, Zn = !0, Yn = v, g(), u && URL.revokeObjectURL(u);\n            }, (v)=>{\n                zr = !1, La = !0, x(v);\n            });\n        })), await Promise.race(y), _) throw new Error(\"WebAssembly backend initializing failed due to timeout: \".concat(t, \"ms\"));\n    }, Ie = ()=>{\n        if (Zn && Yn) return Yn;\n        throw new Error(\"WebAssembly is not initialized yet.\");\n    };\n});\nvar ke, jt, pe, Or = U(()=>{\n    \"use strict\";\n    gt();\n    ke = (e1, t)=>{\n        let r = Ie(), n = r.lengthBytesUTF8(e1) + 1, o = r._malloc(n);\n        return r.stringToUTF8(e1, o, n), t.push(o), o;\n    }, jt = (e1, t, r, n)=>{\n        if (typeof e1 == \"object\" && e1 !== null) {\n            if (r.has(e1)) throw new Error(\"Circular reference in options\");\n            r.add(e1);\n        }\n        Object.entries(e1).forEach((param)=>{\n            let [o, i] = param;\n            let a = t ? t + o : o;\n            if (typeof i == \"object\") jt(i, a + \".\", r, n);\n            else if (typeof i == \"string\" || typeof i == \"number\") n(a, i.toString());\n            else if (typeof i == \"boolean\") n(a, i ? \"1\" : \"0\");\n            else throw new Error(\"Can't handle extra config type: \".concat(typeof i));\n        });\n    }, pe = (e1)=>{\n        let t = Ie(), r = t.stackSave();\n        try {\n            let n = t.PTR_SIZE, o = t.stackAlloc(2 * n);\n            t._OrtGetLastError(o, o + n);\n            let i = Number(t.getValue(o, n === 4 ? \"i32\" : \"i64\")), a = t.getValue(o + n, \"*\"), d = a ? t.UTF8ToString(a) : \"\";\n            throw new Error(\"\".concat(e1, \" ERROR_CODE: \").concat(i, \", ERROR_MESSAGE: \").concat(d));\n        } finally{\n            t.stackRestore(r);\n        }\n    };\n});\nvar Ga, Ha = U(()=>{\n    \"use strict\";\n    gt();\n    Or();\n    Ga = (e1)=>{\n        let t = Ie(), r = 0, n = [], o = e1 || {};\n        try {\n            if ((e1 === null || e1 === void 0 ? void 0 : e1.logSeverityLevel) === void 0) o.logSeverityLevel = 2;\n            else if (typeof e1.logSeverityLevel != \"number\" || !Number.isInteger(e1.logSeverityLevel) || e1.logSeverityLevel < 0 || e1.logSeverityLevel > 4) throw new Error(\"log serverity level is not valid: \".concat(e1.logSeverityLevel));\n            if ((e1 === null || e1 === void 0 ? void 0 : e1.logVerbosityLevel) === void 0) o.logVerbosityLevel = 0;\n            else if (typeof e1.logVerbosityLevel != \"number\" || !Number.isInteger(e1.logVerbosityLevel)) throw new Error(\"log verbosity level is not valid: \".concat(e1.logVerbosityLevel));\n            (e1 === null || e1 === void 0 ? void 0 : e1.terminate) === void 0 && (o.terminate = !1);\n            let i = 0;\n            return (e1 === null || e1 === void 0 ? void 0 : e1.tag) !== void 0 && (i = ke(e1.tag, n)), r = t._OrtCreateRunOptions(o.logSeverityLevel, o.logVerbosityLevel, !!o.terminate, i), r === 0 && pe(\"Can't create run options.\"), (e1 === null || e1 === void 0 ? void 0 : e1.extra) !== void 0 && jt(e1.extra, \"\", new WeakSet, (a, d)=>{\n                let l = ke(a, n), p = ke(d, n);\n                t._OrtAddRunConfigEntry(r, l, p) !== 0 && pe(\"Can't set a run config entry: \".concat(a, \" - \").concat(d, \".\"));\n            }), [\n                r,\n                n\n            ];\n        } catch (i) {\n            throw r !== 0 && t._OrtReleaseRunOptions(r), n.forEach((a)=>t._free(a)), i;\n        }\n    };\n});\nvar em, tm, rm, nm, Fa, qa = U(()=>{\n    \"use strict\";\n    gt();\n    Or();\n    em = (e1)=>{\n        switch(e1){\n            case \"disabled\":\n                return 0;\n            case \"basic\":\n                return 1;\n            case \"extended\":\n                return 2;\n            case \"all\":\n                return 99;\n            default:\n                throw new Error(\"unsupported graph optimization level: \".concat(e1));\n        }\n    }, tm = (e1)=>{\n        switch(e1){\n            case \"sequential\":\n                return 0;\n            case \"parallel\":\n                return 1;\n            default:\n                throw new Error(\"unsupported execution mode: \".concat(e1));\n        }\n    }, rm = (e1)=>{\n        e1.extra || (e1.extra = {}), e1.extra.session || (e1.extra.session = {});\n        let t = e1.extra.session;\n        t.use_ort_model_bytes_directly || (t.use_ort_model_bytes_directly = \"1\"), e1.executionProviders && e1.executionProviders.some((r)=>(typeof r == \"string\" ? r : r.name) === \"webgpu\") && (e1.enableMemPattern = !1);\n    }, nm = (e1, t, r)=>{\n        for (let n of t){\n            let o = typeof n == \"string\" ? n : n.name;\n            switch(o){\n                case \"webnn\":\n                    if (o = \"WEBNN\", typeof n != \"string\") {\n                        let d = n === null || n === void 0 ? void 0 : n.deviceType;\n                        if (d) {\n                            let l = ke(\"deviceType\", r), p = ke(d, r);\n                            Ie()._OrtAddSessionConfigEntry(e1, l, p) !== 0 && pe(\"Can't set a session config entry: 'deviceType' - \".concat(d, \".\"));\n                        }\n                    }\n                    break;\n                case \"webgpu\":\n                    if (o = \"JS\", typeof n != \"string\") {\n                        let a = n;\n                        if (a === null || a === void 0 ? void 0 : a.preferredLayout) {\n                            if (a.preferredLayout !== \"NCHW\" && a.preferredLayout !== \"NHWC\") throw new Error(\"preferredLayout must be either 'NCHW' or 'NHWC': \".concat(a.preferredLayout));\n                            let d = ke(\"preferredLayout\", r), l = ke(a.preferredLayout, r);\n                            Ie()._OrtAddSessionConfigEntry(e1, d, l) !== 0 && pe(\"Can't set a session config entry: 'preferredLayout' - \".concat(a.preferredLayout, \".\"));\n                        }\n                    }\n                    break;\n                case \"wasm\":\n                case \"cpu\":\n                    continue;\n                default:\n                    throw new Error(\"not supported execution provider: \".concat(o));\n            }\n            let i = ke(o, r);\n            Ie()._OrtAppendExecutionProvider(e1, i) !== 0 && pe(\"Can't append execution provider: \".concat(o, \".\"));\n        }\n    }, Fa = (e1)=>{\n        let t = Ie(), r = 0, n = [], o = e1 || {};\n        rm(o);\n        try {\n            var _o_graphOptimizationLevel, _o_executionMode, _o_logSeverityLevel;\n            let i = em((_o_graphOptimizationLevel = o.graphOptimizationLevel) !== null && _o_graphOptimizationLevel !== void 0 ? _o_graphOptimizationLevel : \"all\"), a = tm((_o_executionMode = o.executionMode) !== null && _o_executionMode !== void 0 ? _o_executionMode : \"sequential\"), d = typeof o.logId == \"string\" ? ke(o.logId, n) : 0, l = (_o_logSeverityLevel = o.logSeverityLevel) !== null && _o_logSeverityLevel !== void 0 ? _o_logSeverityLevel : 2;\n            if (!Number.isInteger(l) || l < 0 || l > 4) throw new Error(\"log serverity level is not valid: \".concat(l));\n            var _o_logVerbosityLevel;\n            let p = (_o_logVerbosityLevel = o.logVerbosityLevel) !== null && _o_logVerbosityLevel !== void 0 ? _o_logVerbosityLevel : 0;\n            if (!Number.isInteger(p) || p < 0 || p > 4) throw new Error(\"log verbosity level is not valid: \".concat(p));\n            let m = typeof o.optimizedModelFilePath == \"string\" ? ke(o.optimizedModelFilePath, n) : 0;\n            if (r = t._OrtCreateSessionOptions(i, !!o.enableCpuMemArena, !!o.enableMemPattern, a, !!o.enableProfiling, 0, d, l, p, m), r === 0 && pe(\"Can't create session options.\"), o.executionProviders && nm(r, o.executionProviders, n), o.enableGraphCapture !== void 0) {\n                if (typeof o.enableGraphCapture != \"boolean\") throw new Error(\"enableGraphCapture must be a boolean value: \".concat(o.enableGraphCapture));\n                let u = ke(\"enableGraphCapture\", n), h = ke(o.enableGraphCapture.toString(), n);\n                t._OrtAddSessionConfigEntry(r, u, h) !== 0 && pe(\"Can't set a session config entry: 'enableGraphCapture' - \".concat(o.enableGraphCapture, \".\"));\n            }\n            if (o.freeDimensionOverrides) for (let [u, h] of Object.entries(o.freeDimensionOverrides)){\n                if (typeof u != \"string\") throw new Error(\"free dimension override name must be a string: \".concat(u));\n                if (typeof h != \"number\" || !Number.isInteger(h) || h < 0) throw new Error(\"free dimension override value must be a non-negative integer: \".concat(h));\n                let _ = ke(u, n);\n                t._OrtAddFreeDimensionOverride(r, _, h) !== 0 && pe(\"Can't set a free dimension override: \".concat(u, \" - \").concat(h, \".\"));\n            }\n            return o.extra !== void 0 && jt(o.extra, \"\", new WeakSet, (u, h)=>{\n                let _ = ke(u, n), y = ke(h, n);\n                t._OrtAddSessionConfigEntry(r, _, y) !== 0 && pe(\"Can't set a session config entry: \".concat(u, \" - \").concat(h, \".\"));\n            }), [\n                r,\n                n\n            ];\n        } catch (i) {\n            throw r !== 0 && t._OrtReleaseSessionOptions(r) !== 0 && pe(\"Can't release session options.\"), n.forEach((a)=>t._free(a)), i;\n        }\n    };\n});\nvar Yt, bt, Ct, Dr, Zt, Br, Mr, Qn, te = U(()=>{\n    \"use strict\";\n    Yt = (e1)=>{\n        switch(e1){\n            case \"int8\":\n                return 3;\n            case \"uint8\":\n                return 2;\n            case \"bool\":\n                return 9;\n            case \"int16\":\n                return 5;\n            case \"uint16\":\n                return 4;\n            case \"int32\":\n                return 6;\n            case \"uint32\":\n                return 12;\n            case \"float16\":\n                return 10;\n            case \"float32\":\n                return 1;\n            case \"float64\":\n                return 11;\n            case \"string\":\n                return 8;\n            case \"int64\":\n                return 7;\n            case \"uint64\":\n                return 13;\n            case \"int4\":\n                return 22;\n            case \"uint4\":\n                return 21;\n            default:\n                throw new Error(\"unsupported data type: \".concat(e1));\n        }\n    }, bt = (e1)=>{\n        switch(e1){\n            case 3:\n                return \"int8\";\n            case 2:\n                return \"uint8\";\n            case 9:\n                return \"bool\";\n            case 5:\n                return \"int16\";\n            case 4:\n                return \"uint16\";\n            case 6:\n                return \"int32\";\n            case 12:\n                return \"uint32\";\n            case 10:\n                return \"float16\";\n            case 1:\n                return \"float32\";\n            case 11:\n                return \"float64\";\n            case 8:\n                return \"string\";\n            case 7:\n                return \"int64\";\n            case 13:\n                return \"uint64\";\n            case 22:\n                return \"int4\";\n            case 21:\n                return \"uint4\";\n            default:\n                throw new Error(\"unsupported data type: \".concat(e1));\n        }\n    }, Ct = (e1, t)=>{\n        let r = [\n            -1,\n            4,\n            1,\n            1,\n            2,\n            2,\n            4,\n            8,\n            -1,\n            1,\n            2,\n            8,\n            4,\n            8,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            -1,\n            .5,\n            .5\n        ][e1], n = typeof t == \"number\" ? t : t.reduce((o, i)=>o * i, 1);\n        return r > 0 ? Math.ceil(n * r) : void 0;\n    }, Dr = (e1)=>{\n        switch(e1){\n            case \"float16\":\n                return typeof Float16Array < \"u\" && Float16Array.from ? Float16Array : Uint16Array;\n            case \"float32\":\n                return Float32Array;\n            case \"uint8\":\n                return Uint8Array;\n            case \"int8\":\n                return Int8Array;\n            case \"uint16\":\n                return Uint16Array;\n            case \"int16\":\n                return Int16Array;\n            case \"int32\":\n                return Int32Array;\n            case \"bool\":\n                return Uint8Array;\n            case \"float64\":\n                return Float64Array;\n            case \"uint32\":\n                return Uint32Array;\n            case \"int64\":\n                return BigInt64Array;\n            case \"uint64\":\n                return BigUint64Array;\n            default:\n                throw new Error(\"unsupported type: \".concat(e1));\n        }\n    }, Zt = (e1)=>{\n        switch(e1){\n            case \"verbose\":\n                return 0;\n            case \"info\":\n                return 1;\n            case \"warning\":\n                return 2;\n            case \"error\":\n                return 3;\n            case \"fatal\":\n                return 4;\n            default:\n                throw new Error(\"unsupported logging level: \".concat(e1));\n        }\n    }, Br = (e1)=>e1 === \"float32\" || e1 === \"float16\" || e1 === \"int32\" || e1 === \"int64\" || e1 === \"uint32\" || e1 === \"uint8\" || e1 === \"bool\" || e1 === \"uint4\" || e1 === \"int4\", Mr = (e1)=>e1 === \"float32\" || e1 === \"float16\" || e1 === \"int32\" || e1 === \"int64\" || e1 === \"uint32\" || e1 === \"uint64\" || e1 === \"int8\" || e1 === \"uint8\" || e1 === \"bool\" || e1 === \"uint4\" || e1 === \"int4\", Qn = (e1)=>{\n        switch(e1){\n            case \"none\":\n                return 0;\n            case \"cpu\":\n                return 1;\n            case \"cpu-pinned\":\n                return 2;\n            case \"texture\":\n                return 3;\n            case \"gpu-buffer\":\n                return 4;\n            case \"ml-tensor\":\n                return 5;\n            default:\n                throw new Error(\"unsupported data location: \".concat(e1));\n        }\n    };\n});\nvar Qt, Xn = U(()=>{\n    \"use strict\";\n    $r();\n    Qt = async (e1)=>{\n        if (typeof e1 == \"string\") if (false) {}\n        else {\n            let t = await fetch(e1);\n            if (!t.ok) throw new Error(\"failed to load external data file: \".concat(e1));\n            let r = t.headers.get(\"Content-Length\"), n = r ? parseInt(r, 10) : 0;\n            if (n < 1073741824) return new Uint8Array(await t.arrayBuffer());\n            {\n                if (!t.body) throw new Error(\"failed to load external data file: \".concat(e1, \", no response body.\"));\n                let o = t.body.getReader(), i;\n                try {\n                    i = new ArrayBuffer(n);\n                } catch (d) {\n                    if (d instanceof RangeError) {\n                        let l = Math.ceil(n / 65536);\n                        i = new WebAssembly.Memory({\n                            initial: l,\n                            maximum: l\n                        }).buffer;\n                    } else throw d;\n                }\n                let a = 0;\n                for(;;){\n                    let { done: d, value: l } = await o.read();\n                    if (d) break;\n                    let p = l.byteLength;\n                    new Uint8Array(i, a, p).set(l), a += p;\n                }\n                return new Uint8Array(i, 0, n);\n            }\n        }\n        else return e1 instanceof Blob ? new Uint8Array(await e1.arrayBuffer()) : e1 instanceof Uint8Array ? e1 : new Uint8Array(e1);\n    };\n});\nvar om, im, Ka, ja, Rr, am, ue, et = U(()=>{\n    \"use strict\";\n    te();\n    om = [\n        \"V\",\n        \"I\",\n        \"W\",\n        \"E\",\n        \"F\"\n    ], im = (e1, t)=>{\n        console.log(\"[\".concat(om[e1], \",\").concat(new Date().toISOString(), \"]\").concat(t));\n    }, Rr = (e1, t)=>{\n        Ka = e1, ja = t;\n    }, am = (e1, t)=>{\n        let r = Zt(e1), n = Zt(Ka);\n        r >= n && im(r, typeof t == \"function\" ? t() : t);\n    }, ue = function() {\n        for(var _len = arguments.length, e1 = new Array(_len), _key = 0; _key < _len; _key++){\n            e1[_key] = arguments[_key];\n        }\n        ja && am(...e1);\n    };\n});\nvar Ur, Jn = U(()=>{\n    \"use strict\";\n    te();\n    Ur = (e1, t)=>new (Dr(t))(e1);\n});\nvar Nr = U(_c9 = ()=>{\n    \"use strict\";\n});\n_c10 = Nr;\nvar Ya, eo, to, sm, um, Za, no, ro, Xa, Ja = U(()=>{\n    \"use strict\";\n    et();\n    Nr();\n    Ya = new Map([\n        [\n            64,\n            250\n        ],\n        [\n            128,\n            200\n        ],\n        [\n            256,\n            200\n        ],\n        [\n            512,\n            200\n        ],\n        [\n            2048,\n            230\n        ],\n        [\n            4096,\n            200\n        ],\n        [\n            8192,\n            50\n        ],\n        [\n            16384,\n            50\n        ],\n        [\n            32768,\n            50\n        ],\n        [\n            65536,\n            50\n        ],\n        [\n            131072,\n            50\n        ],\n        [\n            262144,\n            50\n        ],\n        [\n            524288,\n            50\n        ],\n        [\n            1048576,\n            50\n        ],\n        [\n            2097152,\n            30\n        ],\n        [\n            4194304,\n            20\n        ],\n        [\n            8388608,\n            10\n        ],\n        [\n            12582912,\n            10\n        ],\n        [\n            16777216,\n            10\n        ],\n        [\n            26214400,\n            15\n        ],\n        [\n            33554432,\n            22\n        ],\n        [\n            44236800,\n            2\n        ],\n        [\n            58982400,\n            6\n        ],\n        [\n            67108864,\n            6\n        ],\n        [\n            134217728,\n            6\n        ],\n        [\n            167772160,\n            6\n        ]\n    ]), eo = [], to = (e1)=>Math.ceil(Number(e1) / 16) * 16, sm = (e1)=>{\n        for(let t = 0; t < eo.length; t++){\n            let r = eo[t];\n            if (e1 <= r) return r;\n        }\n        return Math.ceil(e1 / 16) * 16;\n    }, um = 1, Za = ()=>um++, no = async (e1, t, r, n)=>{\n        let o = to(r), i = e1.device.createBuffer({\n            size: o,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n        });\n        try {\n            let a = e1.getCommandEncoder();\n            e1.endComputePass(), a.copyBufferToBuffer(t, 0, i, 0, o), e1.flush(), await i.mapAsync(GPUMapMode.READ);\n            let d = i.getMappedRange();\n            if (n) {\n                let l = n();\n                return l.set(new Uint8Array(d, 0, r)), l;\n            } else return new Uint8Array(d.slice(0, r));\n        } finally{\n            i.destroy();\n        }\n    }, ro = class {\n        upload(t, r) {\n            let n = r.buffer, o = r.byteOffset, i = r.byteLength, a = to(i), d = this.storageCache.get(t);\n            if (!d) throw new Error(\"gpu data for uploading does not exist\");\n            if (Number(d.originalSize) !== i) throw new Error(\"inconsistent data size. gpu data size=\".concat(d.originalSize, \", data size=\").concat(i));\n            let l = this.backend.device.createBuffer({\n                mappedAtCreation: !0,\n                size: a,\n                usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC\n            }), p = l.getMappedRange();\n            new Uint8Array(p).set(new Uint8Array(n, o, i)), l.unmap();\n            let m = this.backend.device.createCommandEncoder();\n            m.copyBufferToBuffer(l, 0, d.gpuData.buffer, 0, a), this.backend.device.queue.submit([\n                m.finish()\n            ]), l.destroy(), ue(\"verbose\", ()=>\"[WebGPU] GpuDataManager.upload(id=\".concat(t, \")\"));\n        }\n        memcpy(t, r) {\n            let n = this.storageCache.get(t);\n            if (!n) throw new Error(\"source gpu data for memcpy does not exist\");\n            let o = this.storageCache.get(r);\n            if (!o) throw new Error(\"destination gpu data for memcpy does not exist\");\n            if (n.originalSize !== o.originalSize) throw new Error(\"inconsistent source and destination gpu data size\");\n            let i = to(n.originalSize), a = this.backend.getCommandEncoder();\n            this.backend.endComputePass(), a.copyBufferToBuffer(n.gpuData.buffer, 0, o.gpuData.buffer, 0, i);\n        }\n        registerExternalBuffer(t, r, n) {\n            let o;\n            if (n) {\n                if (o = n[0], t === n[1]) return ue(\"verbose\", ()=>\"[WebGPU] GpuDataManager.registerExternalBuffer(size=\".concat(r, \") => id=\").concat(o, \", buffer is the same, skip.\")), o;\n                if (this.backend.capturedCommandList.has(this.backend.currentSessionId)) throw new Error(\"Registering a different external buffer under graph capture mode is not supported yet.\\n             Please use the previous external buffer!\");\n            } else o = Za();\n            return this.storageCache.set(o, {\n                gpuData: {\n                    id: o,\n                    type: 0,\n                    buffer: t\n                },\n                originalSize: r\n            }), ue(\"verbose\", ()=>\"[WebGPU] GpuDataManager.registerExternalBuffer(size=\".concat(r, \") => id=\").concat(o, \", registered.\")), o;\n        }\n        unregisterExternalBuffer(t) {\n            t !== void 0 && (this.storageCache.delete(t), ue(\"verbose\", ()=>\"[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=\".concat(t)));\n        }\n        create(t) {\n            let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST;\n            let n = sm(t), o, i = (r & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE, a = (r & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM;\n            if (i || a) {\n                let p = (i ? this.freeBuffers : this.freeUniformBuffers).get(n);\n                p ? p.length > 0 ? o = p.pop() : o = this.backend.device.createBuffer({\n                    size: n,\n                    usage: r\n                }) : o = this.backend.device.createBuffer({\n                    size: n,\n                    usage: r\n                });\n            } else o = this.backend.device.createBuffer({\n                size: n,\n                usage: r\n            });\n            let d = {\n                id: Za(),\n                type: 0,\n                buffer: o\n            };\n            return this.storageCache.set(d.id, {\n                gpuData: d,\n                originalSize: Number(t)\n            }), ue(\"verbose\", ()=>\"[WebGPU] GpuDataManager.create(size=\".concat(t, \") => id=\").concat(d.id)), d;\n        }\n        get(t) {\n            var _this_storageCache_get;\n            return (_this_storageCache_get = this.storageCache.get(t)) === null || _this_storageCache_get === void 0 ? void 0 : _this_storageCache_get.gpuData;\n        }\n        release(t) {\n            let r = typeof t == \"bigint\" ? Number(t) : t, n = this.storageCache.get(r);\n            if (!n) {\n                if (this.storageCache.size === 0) return 0;\n                throw new Error(\"releasing data does not exist\");\n            }\n            return ue(\"verbose\", ()=>\"[WebGPU] GpuDataManager.release(id=\".concat(r, \"), gpuDataId=\").concat(n.gpuData.id)), this.storageCache.delete(r), this.buffersPending.push(n.gpuData.buffer), n.originalSize;\n        }\n        async download(t, r) {\n            let n = this.storageCache.get(Number(t));\n            if (!n) throw new Error(\"data does not exist\");\n            await no(this.backend, n.gpuData.buffer, n.originalSize, r);\n        }\n        refreshPendingBuffers() {\n            if (this.buffersPending.length !== 0) if (this.backend.sessionStatus === \"default\") {\n                for (let t of this.buffersPending){\n                    let r = Ya.get(t.size);\n                    if ((t.usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\n                        let n = this.freeBuffers.get(t.size) || [];\n                        r === void 0 || n.length >= r ? t.destroy() : n.push(t);\n                    } else if ((t.usage & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM) {\n                        let n = this.freeUniformBuffers.get(t.size) || [];\n                        r === void 0 || n.length >= r ? t.destroy() : n.push(t);\n                    } else t.destroy();\n                }\n                this.buffersPending = [];\n            } else {\n                let t = this.capturedPendingBuffers.get(this.backend.currentSessionId);\n                t || (t = [], this.capturedPendingBuffers.set(this.backend.currentSessionId, t));\n                for (let r of this.buffersPending)t.push(r);\n                this.buffersPending = [];\n            }\n        }\n        dispose() {\n            this.freeBuffers.forEach((t)=>{\n                t.forEach((r)=>{\n                    r.destroy();\n                });\n            }), this.freeUniformBuffers.forEach((t)=>{\n                t.forEach((r)=>{\n                    r.destroy();\n                });\n            }), this.storageCache.forEach((t)=>{\n                t.gpuData.buffer.destroy();\n            }), this.capturedPendingBuffers.forEach((t)=>{\n                t.forEach((r)=>{\n                    r.destroy();\n                });\n            }), this.storageCache = new Map, this.freeBuffers = new Map, this.freeUniformBuffers = new Map, this.capturedPendingBuffers = new Map;\n        }\n        onCreateSession() {\n            this.sessionCount += 1;\n        }\n        onReleaseSession(t) {\n            let r = this.capturedPendingBuffers.get(t);\n            r && (r.forEach((n)=>{\n                n.destroy();\n            }), this.capturedPendingBuffers.delete(t)), this.sessionCount -= 1, this.sessionCount === 0 && (ue(\"warning\", ()=>\"[WebGPU] Clearing webgpu buffer cache\"), this.storageCache.forEach((n)=>{\n                n.gpuData.buffer.destroy();\n            }), this.storageCache = new Map);\n        }\n        constructor(t){\n            this.backend = t;\n            this.storageCache = new Map, this.freeBuffers = new Map, this.freeUniformBuffers = new Map, this.buffersPending = [], this.capturedPendingBuffers = new Map;\n            for (let [r] of Ya)eo.push(r), this.freeBuffers.set(r, []), this.freeUniformBuffers.set(r, []);\n            this.sessionCount = 0;\n        }\n    }, Xa = function() {\n        for(var _len = arguments.length, e1 = new Array(_len), _key = 0; _key < _len; _key++){\n            e1[_key] = arguments[_key];\n        }\n        return new ro(...e1);\n    };\n});\nvar oo, re, Se = U(()=>{\n    \"use strict\";\n    oo = class {\n        get cacheKey() {\n            return this.key || (this.key = Object.getOwnPropertyNames(this).sort().map((t)=>\"\".concat(this[t])).join(\";\")), this.key;\n        }\n        constructor(t){\n            Object.assign(this, t);\n        }\n    }, re = (e1)=>new oo(e1);\n});\nvar io, tt, C, At, Vr, es, ts, oe = U(()=>{\n    \"use strict\";\n    io = class {\n        static calcMatMulShape(t, r) {\n            return t[1] !== r[0] ? void 0 : [\n                t[0],\n                r[1]\n            ];\n        }\n    }, tt = class {\n        static calcShape(t, r) {\n            let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n            let o = t.length, i = r.length;\n            if (o === 0) return r;\n            if (i === 0) return t;\n            let a = Math.max(t.length, r.length), d = new Array(a);\n            if (n) {\n                if (o < 2 || i < 2) return;\n                let l = io.calcMatMulShape([\n                    t[o - 2],\n                    t[o - 1]\n                ], [\n                    r[i - 2],\n                    r[i - 1]\n                ]);\n                if (l === void 0) return;\n                [d[a - 2], d[a - 1]] = l;\n            }\n            for(let l = n ? 3 : 1; l <= a; l++){\n                let p = o - l < 0 ? 1 : t[o - l], m = i - l < 0 ? 1 : r[i - l];\n                if (p !== m && p > 1 && m > 1) return;\n                let u = Math.max(p, m);\n                if (p && m) d[a - l] = Math.max(p, m);\n                else {\n                    if (u > 1) return;\n                    d[a - l] = 0;\n                }\n            }\n            return d;\n        }\n        static isValidBroadcast(t, r) {\n            let n = t.length, o = r.length;\n            if (n > o) return !1;\n            for(let i = 1; i <= n; i++)if (t[n - i] !== 1 && t[n - i] !== r[o - i]) return !1;\n            return !0;\n        }\n    }, C = class e1 {\n        static size(t) {\n            return e1.getSizeFromDimensionRange(t, 0, t.length);\n        }\n        static convertShape(t) {\n            let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 4;\n            let n = t.length;\n            if (n === 0) return [];\n            let o = new Array(n), i = n - 1;\n            for(; i >= 0;){\n                if (t[i] % r === 0) {\n                    o[i] = t[i] / r;\n                    break;\n                }\n                if (r % t[i] !== 0) throw new Error(\"cannot convert shape\");\n                o[i] = 1, r /= t[i], i--;\n            }\n            for(i--; i >= 0; i--)o[i] = t[i];\n            return o;\n        }\n        static sizeFromDimension(t, r) {\n            if (r < 0 || r > t.length) throw new Error(\"invalid dimension of \".concat(r, \" for sizeFromDimension as Tensor has \").concat(t.length, \" dimensions.\"));\n            return e1.getSizeFromDimensionRange(t, r, t.length);\n        }\n        static sizeToDimension(t, r) {\n            if (r < 0 || r > t.length) throw new Error(\"invalid dimension of \".concat(r, \" for sizeToDimension as Tensor has \").concat(t.length, \" dimensions.\"));\n            return e1.getSizeFromDimensionRange(t, 0, r);\n        }\n        static getSizeFromDimensionRange(t, r, n) {\n            let o = 1;\n            for(let i = r; i < n; i++){\n                if (t[i] < 0) throw new Error(\"cannot get valid size from specified dimension range. Most likely the range contains negative values in them.\");\n                o *= Number(t[i]);\n            }\n            return o;\n        }\n        static computeStrides(t) {\n            let r = t.length;\n            if (r === 0) return [];\n            if (r === 1) return [\n                1\n            ];\n            let n = new Array(r);\n            n[r - 1] = 1, n[r - 2] = t[r - 1];\n            for(let o = r - 3; o >= 0; --o)n[o] = n[o + 1] * t[o + 1];\n            return n;\n        }\n        static normalizeAxis(t, r) {\n            if (t < -r && t >= r) throw new Error(\"unsupported axis for this operation.\");\n            return t < 0 ? t + r : t;\n        }\n        static normalizeAxes(t, r) {\n            return t.map((n)=>this.normalizeAxis(n, r !== null && r !== void 0 ? r : t.length));\n        }\n        static sortBasedOnPerm(t, r) {\n            return r ? r.map((n)=>t[n]) : t.slice().reverse();\n        }\n        static padShape(t, r) {\n            let n = t.length;\n            return t.map((o, i)=>o + r[i] + r[i + n]);\n        }\n        static areEqual(t, r) {\n            return t.length !== r.length ? !1 : t.every((n, o)=>n === r[o]);\n        }\n    }, At = class e1 {\n        static adjustPoolAttributes(t, r, n, o, i, a) {\n            if (!t && n.length !== r.length - 2) throw new Error(\"length of specified kernel shapes should be 2 less than length of input dimensions\");\n            if (t) for(let d = 0; d < r.length - 2; d++)d >= n.length ? n.push(r[d + 2]) : n[d] = r[d + 2];\n            for(let d = 0; d < n.length; d++)if (d < o.length) {\n                if (o[d] < 0) throw new Error(\"strides should be greater than or equal to 1\");\n            } else o.push(1);\n            for(let d = 0; d < n.length; d++)if (d < i.length) {\n                if (i[d] < 0) throw new Error(\"dilations should be greater than or equal to 1\");\n            } else i.push(1);\n            for(let d = 0; d < n.length * 2; d++)if (d < a.length) {\n                if (a[d] < 0) throw new Error(\"pad should be greater than or equal to 1\");\n            } else a.push(0);\n            for(let d = 0; d < n.length; d++){\n                if (n[d] <= 0) throw new Error(\"kernel shapes need to be greater than 0\");\n                if (a[d] >= n[d] || a[d + n.length] >= n[d]) throw new Error(\"pads should be smaller than kernel\");\n            }\n        }\n        static adjustPadsBasedOnAutoPad(t, r, n, o, i, a, d) {\n            if (d) {\n                if (i.length !== 2 * (t.length - 2)) throw new Error(\"length of pads should be twice the length of data dimensions\");\n                if (r.length !== t.length - 2) throw new Error(\"length of strides should be the length of data dimensions\");\n                if (o.length !== t.length - 2) throw new Error(\"length of kernel shapes should be the length of data dimensions\");\n                for(let l = 0; l < t.length - 2; l++)e1.adjustPadAndReturnShape(t[l + (a ? 1 : 2)], r[l], n[l], o[l], i, l, l + t.length - 2, d);\n            }\n        }\n        static computePoolOutputShape(t, r, n, o, i, a, d) {\n            if (r.length <= 0) throw new Error(\"input shape must be of size greater than 0\");\n            let l = [\n                r[0],\n                r[1]\n            ];\n            return e1.computeShapeHelper(t, r, l, n, o, i, a, d), l;\n        }\n        static computeConvOutputShape(t, r, n, o, i, a, d) {\n            if (t.length <= 0 || r.length <= 0) throw new Error(\"invalid input tensor dims or invalid filter tensor dims\");\n            let l = [\n                t[0],\n                r[0]\n            ];\n            return e1.computeShapeHelper(!1, t, l, n, o, i, a, d), l;\n        }\n        static computeShapeHelper(t, r, n, o, i, a, d, l) {\n            if (t) for(let p = 0; p < r.length - 2; p++)n.push(1);\n            else for(let p = 0; p < r.length - 2; p++)n.push(e1.adjustPadAndReturnShape(r[p + 2], o[p], i[p], a[p], d, p, p + r.length - 2, l));\n        }\n        static adjustPadAndReturnShape(t, r, n, o, i, a, d, l) {\n            let p = n * (o - 1) + 1;\n            if (l && l !== \"NOTSET\") switch(l){\n                case \"VALID\":\n                    return i[a] = 0, i[d] = 0, Math.floor((t - p) / r + 1);\n                case \"SAME_LOWER\":\n                case \"SAME_UPPER\":\n                    if (n !== 1) throw new Error(\"Dilation not supported for SAME_UPPER or SAME_LOWER\");\n                    {\n                        let u = ((t + r - 1) / r - 1) * r + o - t;\n                        return i[a] = Math.floor(l === \"SAME_LOWER\" ? (u + 1) / 2 : u / 2), i[d] = u - i[a], Math.floor((t + u - o) / r + 1);\n                    }\n                default:\n                    throw new Error(\"Unsupported AutoPad type\");\n            }\n            else return Math.floor((t + i[a] + i[d] - p) / r + 1);\n        }\n    }, Vr = class {\n        static getShapeOfGemmResult(t, r, n, o, i) {\n            if (t.length !== 2 || n.length !== 2) throw new Error(\"shape need to be of size 2\");\n            let a, d, l;\n            r ? (a = t[1], d = t[0]) : (a = t[0], d = t[1]);\n            let p = -1;\n            if (o ? (l = n[0], p = 1) : (l = n[1], p = 0), n[p] !== d) throw new Error(\"dimension mismatch\");\n            if (a <= 0 || l <= 0 || d <= 0) throw new Error(\"invalid shape specified\");\n            if (i && !tt.isValidBroadcast(i, [\n                a,\n                l\n            ])) throw new Error(\"gemm: invalid bias shape for broadcast\");\n            return [\n                a,\n                l,\n                d\n            ];\n        }\n    }, es = -34028234663852886e22, ts = 34028234663852886e22;\n});\nvar kt, so, _e, Ee, N, me, uo, Et, Fe, F, Wr, E, M, rs, Lr, ao, ns, ae = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    kt = 64, so = (e1, t)=>{\n        if (t === 3) throw new Error(\"vec3 has same alignment as vec4, use vec4 instead\");\n        switch(Number(e1)){\n            case 10:\n                return t > 1 ? \"vec\".concat(t, \"<f16>\") : \"f16\";\n            case 1:\n                return t > 1 ? \"vec\".concat(t, \"<f32>\") : \"f32\";\n            case 6:\n                return t > 1 ? \"vec\".concat(t, \"<i32>\") : \"i32\";\n            case 12:\n                return t > 1 ? \"vec\".concat(t, \"<u32>\") : \"u32\";\n            case 7:\n                if (t > 1) throw new Error(\"currently not supported vecX of uint64 yet\");\n                return [\n                    \"vec2<u32>\",\n                    \"i32\"\n                ];\n            case 13:\n                if (t > 1) throw new Error(\"currently not supported vecX of uint64 yet\");\n                return [\n                    \"vec2<u32>\",\n                    \"u32\"\n                ];\n            case 9:\n                if (t !== 4) throw new Error(\"bool must be vec4\");\n                return [\n                    \"u32\",\n                    \"vec4<bool>\"\n                ];\n            case 22:\n                return \"i32\";\n            case 21:\n                return \"u32\";\n            default:\n                throw new Error(\"Unknown data type: \".concat(e1));\n        }\n    }, _e = function(e1) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        let r = so(e1, t);\n        return typeof r == \"string\" ? r : r[0];\n    }, Ee = function(e1) {\n        let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        let r = so(e1, t);\n        return typeof r == \"string\" ? r : r[1];\n    }, N = function() {\n        for(var _len = arguments.length, e1 = new Array(_len), _key = 0; _key < _len; _key++){\n            e1[_key] = arguments[_key];\n        }\n        let t = [];\n        return e1.forEach((r)=>{\n            r.length !== 0 && t.push({\n                type: 12,\n                data: r\n            }, {\n                type: 12,\n                data: C.computeStrides(r)\n            });\n        }), t;\n    }, me = (e1)=>e1 % 4 === 0 ? 4 : e1 % 2 === 0 ? 2 : 1, uo = function() {\n        let e1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"f32\", t = arguments.length > 1 ? arguments[1] : void 0, r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"0\";\n        return !t || t === 1 ? \"\".concat(e1, \"(\").concat(r, \")\") : \"vec\".concat(t, \"<\").concat(e1, \">(\").concat(r, \")\");\n    }, Et = (e1, t, r)=>e1 === \"f32\" ? r : t === 1 ? \"f32(\".concat(r, \")\") : \"vec\".concat(t, \"<f32>(\").concat(r, \")\"), Fe = (e1, t)=>t === 4 ? \"(\".concat(e1, \".x + \").concat(e1, \".y + \").concat(e1, \".z + \").concat(e1, \".w)\") : t === 2 ? \"(\".concat(e1, \".x + \").concat(e1, \".y)\") : t === 3 ? \"(\".concat(e1, \".x + \").concat(e1, \".y + \").concat(e1, \".z)\") : e1, F = (e1, t, r, n)=>e1.startsWith(\"uniforms.\") && r > 4 ? typeof t == \"string\" ? n === \"f16\" ? \"\".concat(e1, \"[(\").concat(t, \") / 8][(\").concat(t, \") % 8 / 4][(\").concat(t, \") % 8 % 4]\") : \"\".concat(e1, \"[(\").concat(t, \") / 4][(\").concat(t, \") % 4]\") : n === \"f16\" ? \"\".concat(e1, \"[\").concat(Math.floor(t / 8), \"][\").concat(Math.floor(t % 8 / 4), \"][\").concat(t % 8 % 4, \"]\") : \"\".concat(e1, \"[\").concat(Math.floor(t / 4), \"][\").concat(t % 4, \"]\") : r > 1 ? \"\".concat(e1, \"[\").concat(t, \"]\") : e1, Wr = (e1, t, r, n, o)=>{\n        let i = typeof r == \"number\", a = i ? r : r.length, d = [\n            ...new Array(a).keys()\n        ], l = a < 2 ? \"u32\" : a <= 4 ? \"vec\".concat(a, \"<u32>\") : \"array<u32, \".concat(a, \">\"), p = so(t, o), m = typeof p == \"string\" ? p : p[1], u = typeof p == \"string\" ? p : p[0], h = {\n            indices: l,\n            value: m,\n            storage: u,\n            tensor: t\n        }, _ = (W)=>typeof W == \"string\" ? W : \"\".concat(W, \"u\"), y = {\n            offsetToIndices: !1,\n            indicesToOffset: !1,\n            broadcastedIndicesToOffset: !1,\n            set: !1,\n            setByIndices: !1,\n            get: !1,\n            getByIndices: !1\n        }, g = i ? \"uniforms.\" : \"\", x = \"\".concat(g).concat(e1, \"_shape\"), $ = \"\".concat(g).concat(e1, \"_strides\"), v = \"\";\n        for(let W = 0; W < a - 1; W++)v += \"\\n    let dim\".concat(W, \" = current / \").concat(F($, W, a), \";\\n    let rest\").concat(W, \" = current % \").concat(F($, W, a), \";\\n    indices[\").concat(W, \"] = dim\").concat(W, \";\\n    current = rest\").concat(W, \";\\n    \");\n        v += \"indices[\".concat(a - 1, \"] = current;\");\n        let S = a < 2 ? \"\" : \"\\n  fn o2i_\".concat(e1, \"(offset: u32) -> \").concat(h.indices, \" {\\n    var indices: \").concat(h.indices, \";\\n    var current = offset;\\n    \").concat(v, \"\\n    return indices;\\n  }\"), T = (W)=>(y.offsetToIndices = !0, a < 2 ? W : \"o2i_\".concat(e1, \"(\").concat(W, \")\")), A = [];\n        if (a >= 2) for(let W = a - 1; W >= 0; W--)A.push(\"\".concat(F($, W, a), \" * (indices[\").concat(W, \"])\"));\n        let k = a < 2 ? \"\" : \"\\n  fn i2o_\".concat(e1, \"(indices: \").concat(h.indices, \") -> u32 {\\n    return \").concat(A.join(\"+\"), \";\\n  }\"), P = (W)=>(y.indicesToOffset = !0, a < 2 ? W : \"i2o_\".concat(e1, \"(\").concat(W, \")\")), D = function() {\n            for(var _len = arguments.length, W = new Array(_len), _key = 0; _key < _len; _key++){\n                W[_key] = arguments[_key];\n            }\n            return a === 0 ? \"0u\" : \"\".concat(h.indices, \"(\").concat(W.map(_).join(\",\"), \")\");\n        }, R = (W, q)=>a < 2 ? \"\".concat(W) : \"\".concat(F(W, q, a)), G = (W, q, he)=>a < 2 ? \"\".concat(W, \"=\").concat(he, \";\") : \"\".concat(F(W, q, a), \"=\").concat(he, \";\"), K = {}, j = (W, q)=>{\n            y.broadcastedIndicesToOffset = !0;\n            let he = \"\".concat(q.name, \"broadcastedIndicesTo\").concat(e1, \"Offset\");\n            if (he in K) return \"\".concat(he, \"(\").concat(W, \")\");\n            let Ge = [];\n            for(let we = a - 1; we >= 0; we--){\n                let ye = q.indicesGet(\"outputIndices\", we + q.rank - a);\n                Ge.push(\"\".concat(R($, we), \" * (\").concat(ye, \" % \").concat(R(x, we), \")\"));\n            }\n            return K[he] = \"fn \".concat(he, \"(outputIndices: \").concat(q.type.indices, \") -> u32 {\\n             return \").concat(Ge.length > 0 ? Ge.join(\"+\") : \"0u\", \";\\n           }\"), \"\".concat(he, \"(\").concat(W, \")\");\n        }, V = (W, q)=>(()=>{\n                if (h.storage === h.value) return \"\".concat(e1, \"[\").concat(W, \"]=\").concat(q, \";\");\n                if (h.storage === \"vec2<u32>\" && h.value === \"i32\") return \"\".concat(e1, \"[\").concat(W, \"]=vec2<u32>(u32(\").concat(q, \"), select(0u, 0xFFFFFFFFu, \").concat(q, \" < 0));\");\n                if (h.storage === \"vec2<u32>\" && h.value === \"u32\") return \"\".concat(e1, \"[\").concat(W, \"]=vec2<u32>(u32(\").concat(q, \"), 0u);\");\n                if (h.storage === \"u32\" && h.value === \"vec4<bool>\") return \"\".concat(e1, \"[\").concat(W, \"]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(\").concat(q, \"));\");\n                throw new Error(\"not supported combination of storage type \".concat(h.storage, \" and value type \").concat(h.value, \" yet\"));\n            })(), Q = (W)=>(()=>{\n                if (h.storage === h.value) return \"\".concat(e1, \"[\").concat(W, \"]\");\n                if (h.storage === \"vec2<u32>\" && h.value === \"i32\") return \"i32(\".concat(e1, \"[\").concat(W, \"].x)\");\n                if (h.storage === \"vec2<u32>\" && h.value === \"u32\") return \"u32(\".concat(e1, \"[\").concat(W, \"].x)\");\n                if (h.storage === \"u32\" && h.value === \"vec4<bool>\") return \"vec4<bool>(bool(\".concat(e1, \"[\").concat(W, \"] & 0xFFu), bool(\").concat(e1, \"[\").concat(W, \"] & 0xFF00u), bool(\").concat(e1, \"[\").concat(W, \"] & 0xFF0000u), bool(\").concat(e1, \"[\").concat(W, \"] & 0xFF000000u))\");\n                throw new Error(\"not supported combination of storage type \".concat(h.storage, \" and value type \").concat(h.value, \" yet\"));\n            })(), se = a < 2 ? \"\" : \"\\n  fn get_\".concat(e1, \"ByIndices(indices: \").concat(h.indices, \") -> \").concat(m, \" {\\n    return \").concat(Q(\"i2o_\".concat(e1, \"(indices)\")), \";\\n  }\"), Y = a < 2 ? \"\" : (()=>{\n            let W = d.map((he)=>\"d\".concat(he, \": u32\")).join(\", \"), q = d.map((he)=>\"d\".concat(he)).join(\", \");\n            return \"\\n  fn get_\".concat(e1, \"(\").concat(W, \") -> \").concat(m, \" {\\n    return get_\").concat(e1, \"ByIndices(\").concat(D(q), \");\\n  }\");\n        })(), ee = function() {\n            for(var _len = arguments.length, W = new Array(_len), _key = 0; _key < _len; _key++){\n                W[_key] = arguments[_key];\n            }\n            if (W.length !== a) throw new Error(\"indices length must be \".concat(a));\n            let q = W.map(_).join(\",\");\n            return a === 0 ? Q(\"0u\") : a === 1 ? Q(q[0]) : (y.get = !0, y.getByIndices = !0, y.indicesToOffset = !0, \"get_\".concat(e1, \"(\").concat(q, \")\"));\n        }, J = (W)=>a < 2 ? Q(W) : (y.getByIndices = !0, y.indicesToOffset = !0, \"get_\".concat(e1, \"ByIndices(\").concat(W, \")\")), ne = a < 2 ? \"\" : \"\\n  fn set_\".concat(e1, \"ByIndices(indices: \").concat(h.indices, \", value: \").concat(m, \") {\\n    \").concat(V(\"i2o_\".concat(e1, \"(indices)\"), \"value\"), \"\\n  }\"), be = a < 2 ? \"\" : (()=>{\n            let W = d.map((he)=>\"d\".concat(he, \": u32\")).join(\", \"), q = d.map((he)=>\"d\".concat(he)).join(\", \");\n            return \"\\n  fn set_\".concat(e1, \"(\").concat(W, \", value: \").concat(m, \") {\\n    set_\").concat(e1, \"ByIndices(\").concat(D(q), \", value);\\n  }\");\n        })();\n        return {\n            impl: ()=>{\n                let W = [], q = !1;\n                return y.offsetToIndices && (W.push(S), q = !0), y.indicesToOffset && (W.push(k), q = !0), y.broadcastedIndicesToOffset && (Object.values(K).forEach((he)=>W.push(he)), q = !0), y.set && (W.push(be), q = !0), y.setByIndices && (W.push(ne), q = !0), y.get && (W.push(Y), q = !0), y.getByIndices && (W.push(se), q = !0), !i && q && W.unshift(\"const \".concat(x, \" = \").concat(h.indices, \"(\").concat(r.join(\",\"), \");\"), \"const \".concat($, \" = \").concat(h.indices, \"(\").concat(C.computeStrides(r).join(\",\"), \");\")), W.join(\"\\n\");\n            },\n            type: h,\n            offsetToIndices: T,\n            indicesToOffset: P,\n            broadcastedIndicesToOffset: j,\n            indices: D,\n            indicesGet: R,\n            indicesSet: G,\n            set: function() {\n                for(var _len = arguments.length, W = new Array(_len), _key = 0; _key < _len; _key++){\n                    W[_key] = arguments[_key];\n                }\n                if (W.length !== a + 1) throw new Error(\"indices length must be \".concat(a));\n                let q = W[a];\n                if (typeof q != \"string\") throw new Error(\"value must be string\");\n                let he = W.slice(0, a).map(_).join(\",\");\n                return a === 0 ? V(\"0u\", q) : a === 1 ? V(he[0], q) : (y.set = !0, y.setByIndices = !0, y.indicesToOffset = !0, \"set_\".concat(e1, \"(\").concat(he, \", \").concat(q, \")\"));\n            },\n            setByOffset: V,\n            setByIndices: (W, q)=>a < 2 ? V(W, q) : (y.setByIndices = !0, y.indicesToOffset = !0, \"set_\".concat(e1, \"ByIndices(\").concat(W, \", \").concat(q, \");\")),\n            get: ee,\n            getByOffset: Q,\n            getByIndices: J,\n            usage: n,\n            name: e1,\n            strides: $,\n            shape: x,\n            rank: a\n        };\n    }, E = function(e1, t, r) {\n        let n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;\n        return Wr(e1, t, r, \"input\", n);\n    }, M = function(e1, t, r) {\n        let n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;\n        return Wr(e1, t, r, \"output\", n);\n    }, rs = (e1, t, r)=>Wr(e1, t, r, \"atomicOutput\", 1), Lr = function(e1, t, r) {\n        let n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;\n        return Wr(e1, t, r, \"internal\", n);\n    }, ao = class {\n        guardAgainstOutOfBoundsWorkgroupSizes(t) {\n            return \"if (global_idx >= \".concat(typeof t == \"number\" ? \"\".concat(t, \"u\") : t, \") { return; }\");\n        }\n        mainStart() {\n            let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : kt;\n            let r = typeof t == \"number\" ? t : t[0], n = typeof t == \"number\" ? 1 : t[1], o = typeof t == \"number\" ? 1 : t[2];\n            if (r > this.limits.maxComputeWorkgroupSizeX || n > this.limits.maxComputeWorkgroupSizeY || o > this.limits.maxComputeWorkgroupSizeZ) throw new Error(\"workgroup size [\".concat(r, \", \").concat(n, \", \").concat(o, \"] exceeds the maximum workgroup size [\").concat(this.limits.maxComputeWorkgroupSizeX, \", \").concat(this.limits.maxComputeWorkgroupSizeY, \", \").concat(this.limits.maxComputeWorkgroupSizeZ, \"].\"));\n            if (r * n * o > this.limits.maxComputeInvocationsPerWorkgroup) throw new Error(\"workgroup size [\".concat(r, \", \").concat(n, \", \").concat(o, \"] exceeds the maximum workgroup invocations \").concat(this.limits.maxComputeInvocationsPerWorkgroup, \".\"));\n            let i = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1, a = i ? \"@builtin(global_invocation_id) global_id : vec3<u32>,\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\\n    @builtin(local_invocation_index) local_idx : u32,\\n    @builtin(local_invocation_id) local_id : vec3<u32>\" : \"@builtin(global_invocation_id) global_id : vec3<u32>,\\n                                             @builtin(local_invocation_id) local_id : vec3<u32>,\\n    @builtin(local_invocation_index) local_idx : u32,\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\\n    @builtin(num_workgroups) num_workgroups : vec3<u32>\", d = i ? \"let global_idx = global_id.x;\\n         let workgroup_index = workgroup_id.x;\" : \"let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\\n             workgroup_id.y * num_workgroups[0] + workgroup_id.x;\\n         let global_idx = workgroup_index * \".concat(r * n * o, \"u + local_idx;\");\n            return \"@compute @workgroup_size(\".concat(r, \", \").concat(n, \", \").concat(o, \")\\n  fn main(\").concat(a, \") {\\n    \").concat(d, \"\\n  \");\n        }\n        appendVariableUniforms(t) {\n            t.rank !== 0 && (t.shape.startsWith(\"uniforms.\") && this.uniforms.push({\n                name: t.shape.replace(\"uniforms.\", \"\"),\n                type: \"u32\",\n                length: t.rank\n            }), t.strides.startsWith(\"uniforms.\") && this.uniforms.push({\n                name: t.strides.replace(\"uniforms.\", \"\"),\n                type: \"u32\",\n                length: t.rank\n            }));\n        }\n        declareVariable(t, r) {\n            if (t.usage === \"internal\") throw new Error(\"cannot use internal variable with declareVariable(). use registerInternalVariables() instead.\");\n            this.variables.push(t), this.appendVariableUniforms(t);\n            let n = t.usage === \"input\" ? \"read\" : \"read_write\", o = t.usage === \"atomicOutput\" ? \"atomic<i32>\" : t.type.storage;\n            return \"@group(0) @binding(\".concat(r, \") var<storage, \").concat(n, \"> \").concat(t.name, \": array<\").concat(o, \">;\");\n        }\n        declareVariables() {\n            for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){\n                t[_key] = arguments[_key];\n            }\n            return t.map((r)=>this.declareVariable(r, this.variableIndex++)).join(\"\\n\");\n        }\n        registerInternalVariable(t) {\n            if (t.usage !== \"internal\") throw new Error(\"cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.\");\n            this.internalVariables.push(t), this.appendVariableUniforms(t);\n        }\n        registerInternalVariables() {\n            for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){\n                t[_key] = arguments[_key];\n            }\n            return t.forEach((r)=>this.registerInternalVariable(r)), this;\n        }\n        registerUniform(t, r) {\n            let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;\n            return this.uniforms.push({\n                name: t,\n                type: r,\n                length: n\n            }), this;\n        }\n        registerUniforms(t) {\n            return this.uniforms = this.uniforms.concat(t), this;\n        }\n        uniformDeclaration() {\n            if (this.uniforms.length === 0) return \"\";\n            let t = [];\n            for (let { name: r, type: n, length: o } of this.uniforms)if (o && o > 4) n === \"f16\" ? t.push(\"@align(16) \".concat(r, \":array<mat2x4<\").concat(n, \">, \").concat(Math.ceil(o / 8), \">\")) : t.push(\"\".concat(r, \":array<vec4<\").concat(n, \">, \").concat(Math.ceil(o / 4), \">\"));\n            else {\n                let i = o == null || o === 1 ? n : \"vec\".concat(o, \"<\").concat(n, \">\");\n                t.push(\"\".concat(r, \":\").concat(i));\n            }\n            return \"\\n      struct Uniforms { \".concat(t.join(\", \"), \" };\\n      @group(0) @binding(\").concat(this.variableIndex, \") var<uniform> uniforms: Uniforms;\");\n        }\n        get additionalImplementations() {\n            return this.uniformDeclaration() + this.variables.map((t)=>t.impl()).join(\"\\n\") + this.internalVariables.map((t)=>t.impl()).join(\"\\n\");\n        }\n        get variablesInfo() {\n            if (this.uniforms.length === 0) return;\n            let t = (r)=>[\n                    12,\n                    10,\n                    1,\n                    6\n                ][[\n                    \"u32\",\n                    \"f16\",\n                    \"f32\",\n                    \"i32\"\n                ].indexOf(r)];\n            return this.uniforms.map((r)=>{\n                var _r_length;\n                return [\n                    t(r.type),\n                    (_r_length = r.length) !== null && _r_length !== void 0 ? _r_length : 1\n                ];\n            });\n        }\n        constructor(t, r){\n            this.normalizedDispatchGroup = t;\n            this.limits = r;\n            this.internalVariables = [];\n            this.variables = [];\n            this.uniforms = [];\n            this.variableIndex = 0;\n        }\n    }, ns = (e1, t)=>new ao(e1, t);\n});\nvar dm, os, lm, cm, pm, mm, Pe, is, as, dt = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    dm = (e1, t)=>{\n        if (!e1 || e1.length !== 1) throw new Error(\"Transpose requires 1 input.\");\n        if (t.length !== 0 && t.length !== e1[0].dims.length) throw new Error(\"perm size \".concat(t.length, \" does not match input rank \").concat(e1[0].dims.length));\n    }, os = (e1, t)=>t.length !== 0 ? t : [\n            ...new Array(e1).keys()\n        ].reverse(), lm = (e1, t)=>C.sortBasedOnPerm(e1, os(e1.length, t)), cm = (e1, t, r, n)=>{\n        let o = \"fn perm(i: \".concat(n.type.indices, \") -> \").concat(r.type.indices, \" {\\n    var a: \").concat(r.type.indices, \";\");\n        for(let i = 0; i < t; ++i)o += \"a[\".concat(e1[i], \"]=i[\").concat(i, \"];\");\n        return o += \"return a;}\";\n    }, pm = (e1, t)=>{\n        let r = [], n = [];\n        for(let o = 0; o < e1.length; ++o)e1[o] !== 1 && r.push(e1[o]), e1[t[o]] !== 1 && n.push(t[o]);\n        return {\n            newShape: r,\n            newPerm: n\n        };\n    }, mm = (e1, t)=>{\n        let r = 0;\n        for(let n = 0; n < e1.length; ++n)if (t[e1[n]] !== 1) {\n            if (e1[n] < r) return !1;\n            r = e1[n];\n        }\n        return !0;\n    }, Pe = (e1, t)=>{\n        let r = e1.dataType, n = e1.dims.length, o = os(n, t), i = lm(e1.dims, o), a = e1.dims, d = i, l = n < 2 || mm(o, e1.dims), p;\n        if (l) return p = (g)=>{\n            let x = E(\"input\", r, a, 4), $ = M(\"output\", r, d, 4);\n            return \"\\n  \".concat(g.registerUniform(\"output_size\", \"u32\").declareVariables(x, $), \"\\n  \").concat(g.mainStart(), \"\\n    \").concat(g.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n    output[global_idx] = input[global_idx];\\n  }\");\n        }, {\n            name: \"TransposeCopy\",\n            shaderCache: {\n                inputDependencies: [\n                    \"type\"\n                ]\n            },\n            getRunData: ()=>{\n                let g = C.size(i);\n                return {\n                    outputs: [\n                        {\n                            dims: i,\n                            dataType: e1.dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(g / 64 / 4)\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: Math.ceil(g / 4)\n                        }\n                    ]\n                };\n            },\n            getShaderSource: p\n        };\n        let { newShape: m, newPerm: u } = pm(e1.dims, o), h = C.areEqual(u, [\n            2,\n            3,\n            1\n        ]), _ = C.areEqual(u, [\n            3,\n            1,\n            2\n        ]);\n        if (m.length === 2 || h || _) {\n            a = h ? [\n                m[0],\n                m[1] * m[2]\n            ] : _ ? [\n                m[0] * m[1],\n                m[2]\n            ] : m, d = [\n                a[1],\n                a[0]\n            ];\n            let g = 16;\n            return p = (x)=>{\n                let $ = E(\"a\", r, a.length), v = M(\"output\", r, d.length);\n                return \"\\n  \".concat(x.registerUniform(\"output_size\", \"u32\").declareVariables($, v), \"\\n  var<workgroup> tile : array<array<\").concat(v.type.value, \", \").concat(g + 1, \">, \").concat(g, \">;\\n  \").concat(x.mainStart([\n                    g,\n                    g,\n                    1\n                ]), \"\\n    let stride = (uniforms.output_shape[1] - 1) / \").concat(g, \" + 1;\\n    let workgroup_id_x = workgroup_index % stride;\\n    let workgroup_id_y = workgroup_index / stride;\\n    let input_col = workgroup_id_y * \").concat(g, \"u + local_id.x;\\n    let input_row = workgroup_id_x * \").concat(g, \"u + local_id.y;\\n    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {\\n      tile[local_id.y][local_id.x] = \").concat($.getByIndices(\"\".concat($.type.indices, \"(input_row, input_col)\")), \";\\n    }\\n    workgroupBarrier();\\n\\n    let output_col = workgroup_id_x * \").concat(g, \"u + local_id.x;\\n    let output_row = workgroup_id_y * \").concat(g, \"u + local_id.y;\\n    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {\\n      \").concat(v.setByIndices(\"\".concat(v.type.indices, \"(output_row, output_col)\"), \"tile[local_id.x][local_id.y]\"), \"\\n    }\\n  }\");\n            }, {\n                name: \"TransposeShared\",\n                shaderCache: {\n                    inputDependencies: [\n                        \"type\"\n                    ]\n                },\n                getRunData: ()=>{\n                    let x = C.size(i);\n                    return {\n                        outputs: [\n                            {\n                                dims: i,\n                                dataType: e1.dataType\n                            }\n                        ],\n                        dispatchGroup: {\n                            x: Math.ceil(d[1] / g),\n                            y: Math.ceil(d[0] / g)\n                        },\n                        programUniforms: [\n                            {\n                                type: 12,\n                                data: x\n                            },\n                            ...N(a, d)\n                        ]\n                    };\n                },\n                getShaderSource: p\n            };\n        }\n        return p = (g)=>{\n            let x = E(\"a\", r, a.length), $ = M(\"output\", r, d.length);\n            return \"\\n  \".concat(g.registerUniform(\"output_size\", \"u32\").declareVariables(x, $), \"\\n\\n  \").concat(cm(o, n, x, $), \"\\n\\n  \").concat(g.mainStart(), \"\\n    \").concat(g.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n\\n    let indices = \").concat($.offsetToIndices(\"global_idx\"), \";\\n    let aIndices = perm(indices);\\n\\n    \").concat($.setByOffset(\"global_idx\", x.getByIndices(\"aIndices\")), \"\\n  }\");\n        }, {\n            name: \"Transpose\",\n            shaderCache: {\n                hint: \"\".concat(t),\n                inputDependencies: [\n                    \"rank\"\n                ]\n            },\n            getRunData: ()=>{\n                let g = C.size(i);\n                return {\n                    outputs: [\n                        {\n                            dims: i,\n                            dataType: e1.dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(g / 64)\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: g\n                        },\n                        ...N(a, d)\n                    ]\n                };\n            },\n            getShaderSource: p\n        };\n    }, is = (e1, t)=>{\n        dm(e1.inputs, t.perm), e1.compute(Pe(e1.inputs[0], t.perm));\n    }, as = (e1)=>re({\n            perm: e1.perm\n        });\n});\nvar fm, hm, gm, bm, ym, _m, wm, vm, $m, xm, rt, ss, us, ds, ls, cs, ps, ms, fs, hs, gs, bs = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    Gr();\n    dt();\n    fm = {\n        max: \"select(bestValue, candidate, candidate > bestValue)\",\n        min: \"select(bestValue, candidate, candidate < bestValue)\",\n        mean: \"bestValue + candidate\",\n        sum: \"bestValue + candidate\",\n        prod: \"bestValue * candidate\",\n        sumSquare: \"bestValue + candidate * candidate\",\n        logSumExp: \"bestValue + exp(candidate)\",\n        l1: \"bestValue + abs(candidate)\",\n        l2: \"bestValue + candidate * candidate\",\n        logSum: \"bestValue + candidate\"\n    }, hm = {\n        max: \"select(bestValue, candidate, candidate > bestValue)\",\n        min: \"select(bestValue, candidate, candidate < bestValue)\",\n        mean: \"bestValue + candidate\",\n        sum: \"bestValue + candidate\",\n        prod: \"bestValue * candidate\",\n        sumSquare: \"bestValue + candidate\",\n        logSumExp: \"bestValue + candidate\",\n        l1: \"bestValue + candidate\",\n        l2: \"bestValue + candidate\",\n        logSum: \"bestValue + candidate\"\n    }, gm = {\n        max: \"_A[offset]\",\n        min: \"_A[offset]\",\n        mean: \"0\",\n        sum: \"0\",\n        prod: \"1\",\n        sumSquare: \"0\",\n        logSumExp: \"0\",\n        l1: \"0\",\n        l2: \"0\",\n        logSum: \"0\"\n    }, bm = {\n        max: \"bestValue\",\n        min: \"bestValue\",\n        sum: \"bestValue\",\n        prod: \"bestValue\",\n        sumSquare: \"bestValue\",\n        logSumExp: \"log(bestValue)\",\n        l1: \"bestValue\",\n        l2: \"sqrt(bestValue)\",\n        logSum: \"log(bestValue)\"\n    }, ym = (e1, t)=>{\n        let r = [];\n        for(let n = t - e1; n < t; ++n)r.push(n);\n        return r;\n    }, _m = (e1, t)=>{\n        let r = [], n = e1.length;\n        for(let i = 0; i < n; i++)t.indexOf(i) === -1 && r.push(e1[i]);\n        let o = t.map((i)=>e1[i]);\n        return [\n            r,\n            o\n        ];\n    }, wm = (e1, t)=>{\n        let r = e1.length + t.length, n = [], o = 0;\n        for(let i = 0; i < r; i++)t.indexOf(i) === -1 ? n.push(e1[o++]) : n.push(1);\n        return n;\n    }, vm = (e1, t)=>{\n        for(let r = 0; r < e1.length; ++r)if (e1[e1.length - r - 1] !== t - 1 - r) return !1;\n        return !0;\n    }, $m = (e1, t)=>{\n        let r = [];\n        if (!vm(e1, t)) {\n            for(let n = 0; n < t; ++n)e1.indexOf(n) === -1 && r.push(n);\n            e1.forEach((n)=>r.push(n));\n        }\n        return r;\n    }, xm = (e1, t, r, n, o, i, a)=>{\n        let d = r[0].dims, l = C.size(i), p = C.size(a), m = E(\"_A\", r[0].dataType, d), u = M(\"output\", o, i), h = 64;\n        l === 1 && (h = 256);\n        let _ = \"\\n          var<workgroup> aBestValues : array<f32, \".concat(h, \">;\\n       \"), y = (g)=>\"\\n        \".concat(g.registerUniform(\"reduceSize\", \"u32\").declareVariables(m, u), \"\\n        \").concat(_, \"\\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\\n          return ((a - 1u) / b + 1u);\\n         }\\n         \").concat(g.mainStart(h), \"\\n\\n          let outputIndex = global_idx / \").concat(h, \";\\n          let offset = outputIndex * uniforms.reduceSize;\\n\\n          var bestValue = f32(\").concat(gm[n], \");\\n          let Length = uniforms.reduceSize;\\n          for (var k = local_idx; k < Length; k = k + \").concat(h, \") {\\n           let candidate = f32(\").concat(m.getByOffset(\"offset + k\"), \");\\n           bestValue = \").concat(fm[n], \";\\n          }\\n          aBestValues[local_idx] = bestValue;\\n          workgroupBarrier();\\n\\n         var reduceSize = min(Length, \").concat(h, \"u);\\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\\n             currentSize = reduceSize / 2u) {\\n           let interval = DIV_CEIL(reduceSize, 2u);\\n           if (local_idx < currentSize) {\\n            let candidate = aBestValues[local_idx + interval];\\n            bestValue = \").concat(hm[n], \";\\n            aBestValues[local_idx] = bestValue;\\n           }\\n           reduceSize = interval;\\n           workgroupBarrier();\\n         }\\n\\n         if (local_idx == 0u) {\\n          \").concat(u.setByOffset(\"outputIndex\", \"\".concat(n === \"mean\" ? \"\".concat(u.type.storage, \"(bestValue / f32(uniforms.reduceSize))\") : \"\".concat(u.type.storage, \"(\").concat(bm[n], \")\"))), \";\\n         }\\n        }\");\n        return {\n            name: e1,\n            shaderCache: {\n                hint: \"\".concat(t, \";\").concat(h),\n                inputDependencies: [\n                    \"type\"\n                ]\n            },\n            getShaderSource: y,\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: i,\n                            dataType: o\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: l\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: p\n                        }\n                    ]\n                })\n        };\n    }, rt = (e1, t, r, n)=>{\n        let o = e1.inputs.length === 1 ? r : lo(e1.inputs, r), i = o.axes;\n        i.length === 0 && !o.noopWithEmptyAxes && (i = e1.inputs[0].dims.map((_, y)=>y));\n        let a = C.normalizeAxes(i, e1.inputs[0].dims.length), d = a, l = e1.inputs[0], p = $m(d, e1.inputs[0].dims.length);\n        p.length > 0 && (l = e1.compute(Pe(e1.inputs[0], p), {\n            inputs: [\n                0\n            ],\n            outputs: [\n                -1\n            ]\n        })[0], d = ym(d.length, l.dims.length));\n        let [m, u] = _m(l.dims, d), h = m;\n        o.keepDims && (h = wm(m, a)), e1.compute(xm(t, o.cacheKey, [\n            l\n        ], n, e1.inputs[0].dataType, h, u), {\n            inputs: [\n                l\n            ]\n        });\n    }, ss = (e1, t)=>{\n        rt(e1, \"ReduceMeanShared\", t, \"mean\");\n    }, us = (e1, t)=>{\n        rt(e1, \"ReduceL1Shared\", t, \"l1\");\n    }, ds = (e1, t)=>{\n        rt(e1, \"ReduceL2Shared\", t, \"l2\");\n    }, ls = (e1, t)=>{\n        rt(e1, \"ReduceLogSumExpShared\", t, \"logSumExp\");\n    }, cs = (e1, t)=>{\n        rt(e1, \"ReduceMaxShared\", t, \"max\");\n    }, ps = (e1, t)=>{\n        rt(e1, \"ReduceMinShared\", t, \"min\");\n    }, ms = (e1, t)=>{\n        rt(e1, \"ReduceProdShared\", t, \"prod\");\n    }, fs = (e1, t)=>{\n        rt(e1, \"ReduceSumShared\", t, \"sum\");\n    }, hs = (e1, t)=>{\n        rt(e1, \"ReduceSumSquareShared\", t, \"sumSquare\");\n    }, gs = (e1, t)=>{\n        rt(e1, \"ReduceLogSumShared\", t, \"logSum\");\n    };\n});\nvar nt, Sm, Hr, lo, ot, Tm, Im, Cm, Am, km, Em, Pm, zm, Om, Dm, it, ys, _s, ws, vs, $s, xs, Ss, Ts, Is, Cs, Gr = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    bs();\n    nt = (e1)=>{\n        if (!e1 || e1.length === 0 || e1.length > 2) throw new Error(\"Reduce op requires 1 or 2 inputs.\");\n        if (e1.length === 2 && e1[1].dims.length !== 1) throw new Error(\"Invalid axes input dims.\");\n    }, Sm = (e1)=>[\n            \"\",\n            \"\",\n            \"var value = \".concat(e1.getByIndices(\"input_indices\"), \";\"),\n            \"\"\n        ], Hr = function(e1, t, r, n, o, i) {\n        let a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : !1, d = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : !1;\n        let l = [], p = r[0].dims, m = p.length, u = C.normalizeAxes(o, m), h = !d && u.length === 0;\n        p.forEach((x, $)=>{\n            h || u.indexOf($) >= 0 ? a && l.push(1) : l.push(x);\n        });\n        let _ = l.length, y = C.size(l);\n        return {\n            name: e1,\n            shaderCache: t,\n            getShaderSource: (x)=>{\n                let $ = [], v = E(\"_A\", r[0].dataType, m), S = M(\"output\", i, _), T = n(v, S, u), A = T[2];\n                for(let k = 0, P = 0; k < m; k++)h || u.indexOf(k) >= 0 ? (a && P++, A = \"for(var j\".concat(k, \": u32 = 0; j\").concat(k, \" < \").concat(p[k], \"; j\").concat(k, \"++) {\\n                  \").concat(T[2].includes(\"last_index\") ? \"let last_index = j\".concat(k, \";\") : \"\", \"\\n                  \").concat(v.indicesSet(\"input_indices\", k, \"j\".concat(k)), \"\\n                  \").concat(A, \"\\n                }\")) : ($.push(\"\".concat(v.indicesSet(\"input_indices\", k, S.indicesGet(\"output_indices\", P)), \";\")), P++);\n                return \"\\n\\n        \".concat(x.registerUniform(\"output_size\", \"u32\").declareVariables(v, S), \"\\n\\n        \").concat(x.mainStart(), \"\\n          \").concat(x.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n          var input_indices: \").concat(v.type.indices, \";\\n          let output_indices = \").concat(S.offsetToIndices(\"global_idx\"), \";\\n\\n          \").concat($.join(\"\\n\"), \"\\n          \").concat(T[0], \"       // init ops for reduce max/min\\n          \").concat(T[1], \"\\n          \").concat(A, \"\\n          \").concat(T[3], \"\\n          \").concat(T.length === 4 ? S.setByOffset(\"global_idx\", \"value\") : T.slice(4).join(\"\\n\"), \"\\n        }\");\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: l,\n                            dataType: i\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(y / 64)\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: y\n                        },\n                        ...N(p, l)\n                    ]\n                })\n        };\n    }, lo = (e1, t)=>{\n        let r = [];\n        return e1[1].dims[0] > 0 && e1[1].getBigInt64Array().forEach((n)=>r.push(Number(n))), re({\n            axes: r,\n            keepDims: t.keepDims,\n            noopWithEmptyAxes: t.noopWithEmptyAxes\n        });\n    }, ot = (e1, t, r, n)=>{\n        let o = e1.inputs, i = o.length === 1 ? r : lo(o, r);\n        e1.compute(Hr(t, {\n            hint: i.cacheKey,\n            inputDependencies: [\n                \"rank\"\n            ]\n        }, [\n            o[0]\n        ], i.noopWithEmptyAxes && i.axes.length === 0 ? Sm : n, i.axes, o[0].dataType, i.keepDims, i.noopWithEmptyAxes), {\n            inputs: [\n                0\n            ]\n        });\n    }, Tm = (e1, t)=>{\n        nt(e1.inputs), ot(e1, \"ReduceLogSum\", t, (n, o)=>[\n                \"var value = \".concat(o.type.storage, \"(0);\"),\n                \"\",\n                \"value += \".concat(n.getByIndices(\"input_indices\"), \";\"),\n                \"value = log(value);\"\n            ]);\n    }, Im = (e1, t)=>{\n        nt(e1.inputs), ot(e1, \"ReduceL1\", t, (n, o)=>[\n                \"var value = \".concat(o.type.storage, \"(0);\"),\n                \"\",\n                \"value += abs(\".concat(n.getByIndices(\"input_indices\"), \");\"),\n                \"\"\n            ]);\n    }, Cm = (e1, t)=>{\n        nt(e1.inputs), ot(e1, \"ReduceL2\", t, (n, o)=>[\n                \"var t = \".concat(o.type.value, \"(0); var value = \").concat(o.type.value, \"(0);\"),\n                \"\",\n                \"t = \".concat(n.getByIndices(\"input_indices\"), \"; value += (t * t);\"),\n                \"value = sqrt(value);\"\n            ]);\n    }, Am = (e1, t)=>{\n        nt(e1.inputs), ot(e1, \"ReduceLogSumExp\", t, (n, o)=>[\n                \"var value = \".concat(o.type.storage, \"(0);\"),\n                \"\",\n                \"value += exp(\".concat(n.getByIndices(\"input_indices\"), \");\"),\n                \"value = log(value);\"\n            ]);\n    }, km = (e1, t)=>{\n        nt(e1.inputs), ot(e1, \"ReduceMax\", t, (n, o, i)=>{\n            let a = [];\n            for(let d = 0; d < n.rank; d++)(i.indexOf(d) >= 0 || i.length === 0) && a.push(n.indicesSet(\"input_indices\", d, 0));\n            return [\n                \"\".concat(a.join(\"\\n\")),\n                \"var value = \".concat(n.getByIndices(\"input_indices\"), \";\"),\n                \"value = max(value, \".concat(n.getByIndices(\"input_indices\"), \");\"),\n                \"\"\n            ];\n        });\n    }, Em = (e1, t)=>{\n        nt(e1.inputs), ot(e1, \"ReduceMean\", t, (n, o, i)=>{\n            let a = 1;\n            for(let d = 0; d < n.rank; d++)(i.indexOf(d) >= 0 || i.length === 0) && (a *= e1.inputs[0].dims[d]);\n            return [\n                \"var sum = f32(0);\",\n                \"\",\n                \"sum += f32(\".concat(n.getByIndices(\"input_indices\"), \");\"),\n                \"let value = \".concat(o.type.value, \"(sum / \").concat(a, \");\")\n            ];\n        });\n    }, Pm = (e1, t)=>{\n        nt(e1.inputs), ot(e1, \"ReduceMin\", t, (n, o, i)=>{\n            let a = [];\n            for(let d = 0; d < n.rank; d++)(i.indexOf(d) >= 0 || i.length === 0) && a.push(\"input_indices[\".concat(d, \"] = 0;\"));\n            return [\n                \"\".concat(a.join(\"\\n\")),\n                \"var value = \".concat(n.getByIndices(\"input_indices\"), \";\"),\n                \"value = min(value, \".concat(n.getByIndices(\"input_indices\"), \");\"),\n                \"\"\n            ];\n        });\n    }, zm = (e1, t)=>{\n        nt(e1.inputs), ot(e1, \"ReduceProd\", t, (n, o)=>[\n                \"var value = \".concat(o.type.storage, \"(1);\"),\n                \"\",\n                \"value *= \".concat(n.getByIndices(\"input_indices\"), \";\"),\n                \"\"\n            ]);\n    }, Om = (e1, t)=>{\n        nt(e1.inputs), ot(e1, \"ReduceSum\", t, (n, o)=>[\n                \"var value = \".concat(o.type.storage, \"(0);\"),\n                \"\",\n                \"value += \".concat(n.getByIndices(\"input_indices\"), \";\"),\n                \"\"\n            ]);\n    }, Dm = (e1, t)=>{\n        nt(e1.inputs), ot(e1, \"ReduceSumSquare\", t, (n, o)=>[\n                \"var t = \".concat(o.type.value, \"(0); var value = \").concat(o.type.value, \"(0);\"),\n                \"\",\n                \"t = \".concat(n.getByIndices(\"input_indices\"), \"; value += t * t;\"),\n                \"\"\n            ]);\n    }, it = (e1, t, r)=>{\n        if (t.length === 0) return r;\n        let n = 1, o = 1;\n        for(let i = 0; i < t.length; i++)t.indexOf(i) === -1 ? n *= e1[i] : o *= e1[i];\n        return o < 32 && n > 1024;\n    }, ys = (e1, t)=>{\n        it(e1.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Em(e1, t) : ss(e1, t);\n    }, _s = (e1, t)=>{\n        it(e1.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Im(e1, t) : us(e1, t);\n    }, ws = (e1, t)=>{\n        it(e1.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Cm(e1, t) : ds(e1, t);\n    }, vs = (e1, t)=>{\n        it(e1.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Am(e1, t) : ls(e1, t);\n    }, $s = (e1, t)=>{\n        it(e1.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? km(e1, t) : cs(e1, t);\n    }, xs = (e1, t)=>{\n        it(e1.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Pm(e1, t) : ps(e1, t);\n    }, Ss = (e1, t)=>{\n        it(e1.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? zm(e1, t) : ms(e1, t);\n    }, Ts = (e1, t)=>{\n        it(e1.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Om(e1, t) : fs(e1, t);\n    }, Is = (e1, t)=>{\n        it(e1.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Dm(e1, t) : hs(e1, t);\n    }, Cs = (e1, t)=>{\n        it(e1.inputs[0].dims, t.axes, t.noopWithEmptyAxes) ? Tm(e1, t) : gs(e1, t);\n    };\n});\nvar As, ks, Es, co, Ps = U(()=>{\n    \"use strict\";\n    te();\n    Se();\n    Gr();\n    As = (e1)=>{\n        if (!e1 || e1.length === 0 || e1.length > 2) throw new Error(\"ArgMinMaxOp op requires 1 or 2 inputs.\");\n        if (e1[0].dataType !== 1) throw new Error(\"Invalid input type.\");\n    }, ks = (e1, t)=>{\n        As(e1.inputs);\n        let r = (n, o, i)=>{\n            let a = [];\n            for(let d = 0; d < n.rank; d++)(i.indexOf(d) >= 0 || i.length === 0) && a.push(\"input_indices[\".concat(d, \"] = 0;\"));\n            return [\n                \"\".concat(a.join(\"\\n\")),\n                \"var value = \".concat(n.getByIndices(\"input_indices\"), \";\\nvar best_index : i32 = 0;\"),\n                \"if (\".concat(n.getByIndices(\"input_indices\"), \" \").concat(t.selectLastIndex > 0 ? \"<=\" : \"<\", \" value) {\\n         value = \").concat(n.getByIndices(\"input_indices\"), \";\\n         best_index = i32(last_index);\\n       }\"),\n                \"\",\n                o.setByOffset(\"global_idx\", \"best_index\")\n            ];\n        };\n        e1.compute(Hr(\"ArgMin\", {\n            hint: t.cacheKey,\n            inputDependencies: [\n                \"rank\"\n            ]\n        }, [\n            e1.inputs[0]\n        ], r, [\n            t.axis\n        ], 7, t.keepDims), {\n            inputs: [\n                0\n            ]\n        });\n    }, Es = (e1, t)=>{\n        As(e1.inputs);\n        let r = (n, o, i)=>{\n            let a = [];\n            for(let d = 0; d < n.rank; d++)(i.indexOf(d) >= 0 || i.length === 0) && a.push(\"input_indices[\".concat(d, \"] = 0;\"));\n            return [\n                \"\".concat(a.join(\"\\n\")),\n                \"var value = \".concat(n.getByIndices(\"input_indices\"), \";\\nvar best_index : i32 = 0;\"),\n                \"if (\".concat(n.getByIndices(\"input_indices\"), \" \").concat(t.selectLastIndex > 0 ? \">=\" : \">\", \" value) {\\n         value = \").concat(n.getByIndices(\"input_indices\"), \";\\n         best_index = i32(last_index);\\n       }\"),\n                \"\",\n                o.setByOffset(\"global_idx\", \"best_index\")\n            ];\n        };\n        e1.compute(Hr(\"argMax\", {\n            hint: t.cacheKey,\n            inputDependencies: [\n                \"rank\"\n            ]\n        }, [\n            e1.inputs[0]\n        ], r, [\n            t.axis\n        ], 7, t.keepDims), {\n            inputs: [\n                0\n            ]\n        });\n    }, co = (e1)=>re(e1);\n});\nvar Bm, po, Mm, Rm, Um, Rt, Nm, zs, Fr = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Nr();\n    ae();\n    Bm = (e1, t)=>{\n        let r = e1[0], n = e1[1], o = e1[2], i = e1[3], a = e1[4], d = e1[5];\n        if (a && d) throw new Error(\"Attention cannot have both past and attention_bias\");\n        if (r.dims.length !== 3) throw new Error('Input \"input\" must have 3 dimensions');\n        let l = r.dims[0], p = r.dims[1], m = r.dims[2];\n        if (o.dims.length !== 1) throw new Error('Input \"bias\" is expected to have 1 dimensions');\n        if (n.dims.length !== 2) throw new Error('Input \"weights\" is expected to have 2 dimensions');\n        if (n.dims[0] !== m) throw new Error(\"Input 1 dimension 0 should have same length as dimension 2 of input 0\");\n        if (o.dims[0] !== n.dims[1]) throw new Error('Input \"bias\" dimension 0 should have same length as dimension 1 of input \"weights\"');\n        let u = o.dims[0] / 3, h = u, _ = h;\n        if (t.qkvHiddenSizes.length > 0) {\n            if (t.qkvHiddenSizes.length !== 3) throw new Error(\"qkv_hidden_sizes attribute should have 3 elements\");\n            for (let S of t.qkvHiddenSizes)if (S % t.numHeads !== 0) throw new Error(\"qkv_hidden_sizes should be divisible by num_heads\");\n            u = t.qkvHiddenSizes[0], h = t.qkvHiddenSizes[1], _ = t.qkvHiddenSizes[2];\n        }\n        let y = p;\n        if (u !== h) throw new Error(\"qkv_hidden_sizes first element should be same as the second\");\n        if (o.dims[0] !== u + h + _) throw new Error('Input \"bias\" dimension 0 should have same length as sum of Q/K/V hidden sizes');\n        let g = 0;\n        if (a) {\n            if (h !== _) throw new Error('Input \"past\" expect k_hidden_size == v_hidden_size');\n            if (a.dims.length !== 5) throw new Error('Input \"past\" must have 5 dimensions');\n            if (a.dims[0] !== 2) throw new Error('Input \"past\" first dimension must be 2');\n            if (a.dims[1] !== l) throw new Error('Input \"past\" second dimension must be batch_size');\n            if (a.dims[2] !== t.numHeads) throw new Error('Input \"past\" third dimension must be num_heads');\n            if (a.dims[4] !== h / t.numHeads) throw new Error('Input \"past\" fifth dimension must be k_hidden_size / num_heads');\n            t.pastPresentShareBuffer || (g = a.dims[3]);\n        }\n        let x = y + g, $ = -1, v = 0;\n        if (i) throw new Error(\"Mask not supported\");\n        if (a) throw new Error(\"past is not supported\");\n        if (d) {\n            if (d.dims.length !== 4) throw new Error('Input \"attention_bias\" must have 4 dimensions');\n            if (d.dims[0] !== l || d.dims[1] !== t.numHeads || d.dims[2] !== p || d.dims[3] !== x) throw new Error('Expect \"attention_bias\" shape (batch_size, num_heads, sequence_length, total_sequence_length)');\n        }\n        return {\n            batchSize: l,\n            sequenceLength: p,\n            pastSequenceLength: g,\n            kvSequenceLength: y,\n            totalSequenceLength: x,\n            maxSequenceLength: $,\n            inputHiddenSize: m,\n            hiddenSize: u,\n            vHiddenSize: _,\n            headSize: Math.floor(u / t.numHeads),\n            vHeadSize: Math.floor(_ / t.numHeads),\n            numHeads: t.numHeads,\n            isUnidirectional: !1,\n            pastPresentShareBuffer: !1,\n            maskFilterValue: t.maskFilterValue,\n            maskType: v,\n            scale: t.scale,\n            broadcastResPosBias: !1,\n            passPastInKv: !1,\n            qkvFormat: 1\n        };\n    }, po = (e1, t, r)=>t && e1 ? \"\\n      let total_sequence_length_input = u32(\".concat(t.getByOffset(\"0\"), \");\\n      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);\\n      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;\\n      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;\\n      total_sequence_length = u32(\").concat(e1 === null || e1 === void 0 ? void 0 : e1.getByOffset(\"batchIdx\"), \") + 1;\\n      var past_sequence_length: u32 = 0;\\n      if (is_first_prompt == false) {\\n        past_sequence_length = total_sequence_length - sequence_length;\\n      }\\n       \") : \"\\n    \".concat(r ? \"let past_sequence_length = uniforms.past_sequence_length\" : \"\", \";\\n    let present_sequence_length = total_sequence_length;\\n    \"), Mm = (e1, t, r, n, o, i, a, d)=>{\n        let l = me(a ? 1 : i), p = 64, m = i / l;\n        m < p && (p = 32);\n        let u = Math.ceil(i / l / p), h = [\n            {\n                type: 12,\n                data: t\n            },\n            {\n                type: 12,\n                data: r\n            },\n            {\n                type: 12,\n                data: n\n            },\n            {\n                type: 12,\n                data: o\n            },\n            {\n                type: 12,\n                data: m\n            },\n            {\n                type: 12,\n                data: u\n            }\n        ], _ = _e(e1.dataType, l), y = Ee(1, l), g = [\n            \"type\"\n        ];\n        a && g.push(\"type\"), d && g.push(\"type\");\n        let x = ($)=>{\n            let v = M(\"x\", e1.dataType, e1.dims, l), S = [\n                v\n            ], T = a ? E(\"seq_lens\", a.dataType, a.dims) : void 0;\n            T && S.push(T);\n            let A = d ? E(\"total_sequence_length_input\", d.dataType, d.dims) : void 0;\n            A && S.push(A);\n            let k = Ee(e1.dataType), P = [\n                {\n                    name: \"batch_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"num_heads\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"past_sequence_length\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"sequence_length\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"total_sequence_length\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"elements_per_thread\",\n                    type: \"u32\"\n                }\n            ];\n            return \"\\n  var<workgroup> thread_max: array<f32, \".concat(p, \">;\\n  var<workgroup> thread_sum: array<f32, \").concat(p, \">;\\n  \").concat($.registerUniforms(P).declareVariables(...S), \"\\n  \").concat($.mainStart([\n                p,\n                1,\n                1\n            ]), \"\\n    let batchIdx = workgroup_id.z / uniforms.num_heads;\\n    let headIdx = workgroup_id.z % uniforms.num_heads;\\n    let sequence_length = uniforms.sequence_length;\\n    var total_sequence_length = uniforms.total_sequence_length;\\n    \").concat(po(T, A, !1), \"\\n    let local_offset = local_idx * uniforms.elements_per_thread;\\n    let offset = (global_idx / \").concat(p, \") * uniforms.total_sequence_length + local_offset;\\n    let seq_causal_length = \").concat(a ? \"u32(past_sequence_length + workgroup_id.y + 1)\" : \"total_sequence_length\", \";\\n    var thread_max_vector = \").concat(y, \"(-3.402823e+38f);\\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\\n      thread_max_vector = max(\").concat(y, \"(x[offset + i]), thread_max_vector);\\n    }\\n    thread_max[local_idx] = \").concat((()=>{\n                switch(l){\n                    case 1:\n                        return \"thread_max_vector\";\n                    case 2:\n                        return \"max(thread_max_vector.x, thread_max_vector.y)\";\n                    case 4:\n                        return \"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))\";\n                    default:\n                        throw new Error(\"Unsupported components: \".concat(l));\n                }\n            })(), \";\\n    workgroupBarrier();\\n\\n    var max_value =  f32(-3.402823e+38f);\\n    for (var i = 0u; i < \").concat(p, \"; i++) {\\n      max_value = max(thread_max[i], max_value);\\n    }\\n\\n    var sum_vector = \").concat(y, \"(0);\\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\\n      sum_vector += exp(\").concat(y, \"(x[offset + i]) - max_value);\\n    }\\n    thread_sum[local_idx] = \").concat((()=>{\n                switch(l){\n                    case 1:\n                        return \"sum_vector\";\n                    case 2:\n                        return \"sum_vector.x + sum_vector.y\";\n                    case 4:\n                        return \"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w\";\n                    default:\n                        throw new Error(\"Unsupported components: \".concat(l));\n                }\n            })(), \";\\n    workgroupBarrier();\\n\\n    var sum: f32 = 0;\\n    for (var i = 0u; i < \").concat(p, \"; i++) {\\n      sum += thread_sum[i];\\n    }\\n\\n    if (sum == 0) {\\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\\n        x[offset + i] = \").concat(v.type.value, \"(\").concat(k, \"(1.0) / \").concat(k, \"(seq_causal_length));\\n      }\\n    } else {\\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {\\n        var f32input = \").concat(y, \"(x[offset + i]);\\n        x[offset + i] = \").concat(v.type.value, \"(exp(f32input - max_value) / sum);\\n      }\\n    }\\n      \").concat(a ? \"\\n        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {\\n          x[offset + total_seq_id] = \".concat(v.type.value, \"(\").concat(k, \"(0));\\n        }\") : \"\", \";\\n  }\");\n        };\n        return {\n            name: \"AttentionProbsSoftmax\",\n            shaderCache: {\n                hint: \"\".concat(p, \";\").concat(_, \";\").concat(l),\n                inputDependencies: g\n            },\n            getShaderSource: x,\n            getRunData: ()=>({\n                    outputs: [],\n                    dispatchGroup: {\n                        x: Math.ceil(i / p),\n                        y: o,\n                        z: t * r\n                    },\n                    programUniforms: h\n                })\n        };\n    }, Rm = (e1, t, r, n, o, i, a, d, l)=>{\n        let p = a + i.kvSequenceLength, m = [\n            i.batchSize,\n            i.numHeads,\n            i.sequenceLength,\n            p\n        ], u = e1 > 1 && n, h = i.kvNumHeads ? i.kvNumHeads : i.numHeads, _ = u ? [\n            i.batchSize,\n            h,\n            p,\n            i.headSize\n        ] : void 0, y = i.nReps ? i.nReps : 1, g = i.scale === 0 ? 1 / Math.sqrt(i.headSize) : i.scale, x = me(i.headSize), $ = i.headSize / x, v = 12, S = {\n            x: Math.ceil(p / v),\n            y: Math.ceil(i.sequenceLength / v),\n            z: i.batchSize * i.numHeads\n        }, T = [\n            {\n                type: 12,\n                data: i.sequenceLength\n            },\n            {\n                type: 12,\n                data: $\n            },\n            {\n                type: 12,\n                data: p\n            },\n            {\n                type: 12,\n                data: i.numHeads\n            },\n            {\n                type: 12,\n                data: i.headSize\n            },\n            {\n                type: 1,\n                data: g\n            },\n            {\n                type: 12,\n                data: a\n            },\n            {\n                type: 12,\n                data: i.kvSequenceLength\n            },\n            {\n                type: 12,\n                data: y\n            }\n        ], A = u && n && C.size(n.dims) > 0, k = [\n            \"type\",\n            \"type\"\n        ];\n        A && k.push(\"type\"), o && k.push(\"type\"), d && k.push(\"type\"), l && k.push(\"type\");\n        let P = [\n            {\n                dims: m,\n                dataType: t.dataType,\n                gpuDataType: 0\n            }\n        ];\n        u && P.push({\n            dims: _,\n            dataType: t.dataType,\n            gpuDataType: 0\n        });\n        let D = (R)=>{\n            let G = E(\"q\", t.dataType, t.dims, x), K = E(\"key\", r.dataType, r.dims, x), j = [\n                G,\n                K\n            ];\n            if (A) {\n                let ne = E(\"past_key\", n.dataType, n.dims, x);\n                j.push(ne);\n            }\n            o && j.push(E(\"attention_bias\", o.dataType, o.dims));\n            let V = d ? E(\"seq_lens\", d.dataType, d.dims) : void 0;\n            V && j.push(V);\n            let Q = l ? E(\"total_sequence_length_input\", l.dataType, l.dims) : void 0;\n            Q && j.push(Q);\n            let se = M(\"output\", t.dataType, m), Y = [\n                se\n            ];\n            u && Y.push(M(\"present_key\", t.dataType, _, x));\n            let ee = Ee(1, x), J = [\n                {\n                    name: \"M\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"K\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"N\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"num_heads\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"head_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"alpha\",\n                    type: \"f32\"\n                },\n                {\n                    name: \"past_sequence_length\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"kv_sequence_length\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"n_reps\",\n                    type: \"u32\"\n                }\n            ];\n            return \"\\n  const TILE_SIZE = \".concat(v, \"u;\\n\\n  var<workgroup> tileQ: array<\").concat(G.type.storage, \", \").concat(v * v, \">;\\n  var<workgroup> tileK: array<\").concat(G.type.storage, \", \").concat(v * v, \">;\\n  \").concat(R.registerUniforms(J).declareVariables(...j, ...Y), \"\\n  \").concat(R.mainStart([\n                v,\n                v,\n                1\n            ]), \"\\n    // x holds the N and y holds the M\\n    let headIdx = workgroup_id.z % uniforms.num_heads;\\n    let kvHeadIdx = \").concat(y === 1 ? \"headIdx\" : \"headIdx / uniforms.n_reps\", \";\\n    let kv_num_heads = \").concat(y === 1 ? \"uniforms.num_heads\" : \"uniforms.num_heads / uniforms.n_reps\", \";\\n    let batchIdx = workgroup_id.z / uniforms.num_heads;\\n    let m = workgroup_id.y * TILE_SIZE;\\n    let n = workgroup_id.x * TILE_SIZE;\\n    let sequence_length = uniforms.M;\\n    var total_sequence_length = uniforms.N;\\n    \").concat(po(V, Q, !0), \"\\n    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;\\n    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;\\n    \").concat(A && u ? \"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;\" : \"\", \";\\n    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;\\n    \").concat(u ? \"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;\" : \"\", \"\\n    var value = \").concat(ee, \"(0);\\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\\n      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {\\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\\n      }\\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\\n        var idx = TILE_SIZE * local_id.y + local_id.x;\\n      \").concat((()=>A && u ? \"\\n              if (n + local_id.y < past_sequence_length) {\\n                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\\n              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {\\n                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];\\n              }\" : \"\\n          if (n + local_id.y < uniforms.kv_sequence_length) {\\n            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\\n          }\")(), \"\\n      \").concat(u ? \"if (n + local_id.y < present_sequence_length) {\\n        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];\\n      }\" : \"\", \"\\n      }\\n      workgroupBarrier();\\n\\n      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\\n          value += \").concat(ee, \"(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);\\n      }\\n\\n      workgroupBarrier();\\n    }\\n\\n    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {\\n      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;\\n      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;\\n      var sum: f32 = \").concat((()=>{\n                switch(x){\n                    case 1:\n                        return \"value\";\n                    case 2:\n                        return \"value.x + value.y\";\n                    case 4:\n                        return \"value.x + value.y + value.z + value.w\";\n                    default:\n                        throw new Error(\"Unsupported components: \".concat(x));\n                }\n            })(), \";\\n        output[outputIdx] = \").concat(se.type.value, \" (sum * uniforms.alpha) + \").concat(o ? \"attention_bias[outputIdx]\" : \"0.0\", \";\\n    }\\n  }\");\n        };\n        return {\n            name: \"AttentionProbs\",\n            shaderCache: {\n                hint: \"\".concat(x, \";\").concat(o !== void 0, \";\").concat(n !== void 0, \";\").concat(e1),\n                inputDependencies: k\n            },\n            getRunData: ()=>({\n                    outputs: P,\n                    dispatchGroup: S,\n                    programUniforms: T\n                }),\n            getShaderSource: D\n        };\n    }, Um = function(e1, t, r, n, o, i) {\n        let a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : void 0, d = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : void 0;\n        let l = i + o.kvSequenceLength, p = o.nReps ? o.nReps : 1, m = o.vHiddenSize * p, u = e1 > 1 && n, h = o.kvNumHeads ? o.kvNumHeads : o.numHeads, _ = u ? [\n            o.batchSize,\n            h,\n            l,\n            o.headSize\n        ] : void 0, y = [\n            o.batchSize,\n            o.sequenceLength,\n            m\n        ], g = 12, x = {\n            x: Math.ceil(o.vHeadSize / g),\n            y: Math.ceil(o.sequenceLength / g),\n            z: o.batchSize * o.numHeads\n        }, $ = [\n            {\n                type: 12,\n                data: o.sequenceLength\n            },\n            {\n                type: 12,\n                data: l\n            },\n            {\n                type: 12,\n                data: o.vHeadSize\n            },\n            {\n                type: 12,\n                data: o.numHeads\n            },\n            {\n                type: 12,\n                data: o.headSize\n            },\n            {\n                type: 12,\n                data: m\n            },\n            {\n                type: 12,\n                data: i\n            },\n            {\n                type: 12,\n                data: o.kvSequenceLength\n            },\n            {\n                type: 12,\n                data: p\n            }\n        ], v = u && n && C.size(n.dims) > 0, S = [\n            \"type\",\n            \"type\"\n        ];\n        v && S.push(\"type\"), a && S.push(\"type\"), d && S.push(\"type\");\n        let T = [\n            {\n                dims: y,\n                dataType: t.dataType,\n                gpuDataType: 0\n            }\n        ];\n        u && T.push({\n            dims: _,\n            dataType: t.dataType,\n            gpuDataType: 0\n        });\n        let A = (k)=>{\n            let P = E(\"probs\", t.dataType, t.dims), D = E(\"v\", r.dataType, r.dims), R = [\n                P,\n                D\n            ];\n            v && R.push(E(\"past_value\", n.dataType, n.dims));\n            let G = a ? E(\"seq_lens\", a.dataType, a.dims) : void 0;\n            a && R.push(G);\n            let K = d ? E(\"total_sequence_length_input\", d.dataType, d.dims) : void 0;\n            d && R.push(K);\n            let V = [\n                M(\"output\", t.dataType, y)\n            ];\n            u && V.push(M(\"present_value\", t.dataType, _));\n            let Q = [\n                {\n                    name: \"M\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"K\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"N\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"num_heads\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"head_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"v_hidden_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"past_sequence_length\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"kv_sequence_length\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"n_reps\",\n                    type: \"u32\"\n                }\n            ];\n            return \"\\n  const TILE_SIZE = \".concat(g, \"u;\\n  var<workgroup> tileQ: array<\").concat(P.type.value, \", \").concat(g * g, \">;\\n  var<workgroup> tileV: array<\").concat(P.type.value, \", \").concat(g * g, \">;\\n  \").concat(k.registerUniforms(Q).declareVariables(...R, ...V), \"\\n  \").concat(k.mainStart([\n                g,\n                g,\n                1\n            ]), \"\\n   let headIdx = workgroup_id.z % uniforms.num_heads;\\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\\n   let kvHeadIdx = \").concat(p === 1 ? \"headIdx\" : \"headIdx / uniforms.n_reps\", \";\\n   let kv_num_heads = \").concat(p === 1 ? \"uniforms.num_heads\" : \"uniforms.num_heads / uniforms.n_reps\", \";\\n   let m = global_id.y;\\n   let n = global_id.x;\\n   let sequence_length = uniforms.M;\\n   var total_sequence_length = uniforms.K;\\n   \").concat(po(G, K, !0), \"\\n   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;\\n   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch\\n   \").concat(v && u ? \"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;\" : \"\", \";\\n   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;\\n   \").concat(u ? \"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;\" : \"\", \"\\n   var value = \").concat(P.type.storage, \"(0);\\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\\n      }\\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\\n        var idx = TILE_SIZE * local_id.y + local_id.x;\\n        \").concat((()=>v && u ? \"\\n        if (w + local_id.y < past_sequence_length) {\\n          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];\\n        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {\\n          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];\\n        }\\n      \" : \"\\n            if (w + local_id.y < uniforms.kv_sequence_length) {\\n              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];\\n            }\")(), \"\\n        \").concat(u ? \"\\n            if (w + local_id.y < present_sequence_length) {\\n          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];\\n        }\" : \"\", \"\\n      }\\n     workgroupBarrier();\\n     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {\\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];\\n     }\\n     workgroupBarrier();\\n   }\\n\\n   // we need to transpose output from BNSH_v to BSND_v\\n   if (m < uniforms.M && n < uniforms.N) {\\n     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size\\n       + headIdx * uniforms.N + n;\\n     output[outputIdx] = value;\\n   }\\n  }\");\n        };\n        return {\n            name: \"AttentionScore\",\n            shaderCache: {\n                hint: \"\".concat(n !== void 0, \";\").concat(e1),\n                inputDependencies: S\n            },\n            getRunData: ()=>({\n                    outputs: T,\n                    dispatchGroup: x,\n                    programUniforms: $\n                }),\n            getShaderSource: A\n        };\n    }, Rt = function(e1, t, r, n, o, i, a, d, l, p) {\n        let m = arguments.length > 10 && arguments[10] !== void 0 ? arguments[10] : void 0, u = arguments.length > 11 && arguments[11] !== void 0 ? arguments[11] : void 0;\n        let h = Math.min(e1.outputCount, 1 + (a ? 1 : 0) + (d ? 1 : 0)), _ = h > 1 ? p.pastSequenceLength : 0, y = _ + p.kvSequenceLength, g = l && C.size(l.dims) > 0 ? l : void 0, x = [\n            t,\n            r\n        ];\n        h > 1 && a && C.size(a.dims) > 0 && x.push(a), g && x.push(g), m && x.push(m), u && x.push(u);\n        let $ = e1.compute(Rm(h, t, r, a, g, p, _, m, u), {\n            inputs: x,\n            outputs: h > 1 ? [\n                -1,\n                1\n            ] : [\n                -1\n            ]\n        })[0];\n        e1.compute(Mm($, p.batchSize, p.numHeads, _, p.sequenceLength, y, m, u), {\n            inputs: m && u ? [\n                $,\n                m,\n                u\n            ] : [\n                $\n            ],\n            outputs: []\n        });\n        let v = [\n            $,\n            n\n        ];\n        h > 1 && d && C.size(d.dims) > 0 && v.push(d), m && v.push(m), u && v.push(u), e1.compute(Um(h, $, n, d, p, _, m, u), {\n            inputs: v,\n            outputs: h > 1 ? [\n                0,\n                2\n            ] : [\n                0\n            ]\n        });\n    }, Nm = (e1, t)=>{\n        let r = [\n            t.batchSize,\n            t.numHeads,\n            t.sequenceLength,\n            t.headSize\n        ], n = t.sequenceLength, o = t.inputHiddenSize, i = t.headSize, a = 12, d = {\n            x: Math.ceil(t.headSize / a),\n            y: Math.ceil(t.sequenceLength / a),\n            z: t.batchSize * t.numHeads\n        }, l = [\n            e1.inputs[0],\n            e1.inputs[1],\n            e1.inputs[2]\n        ], p = [\n            {\n                type: 12,\n                data: n\n            },\n            {\n                type: 12,\n                data: o\n            },\n            {\n                type: 12,\n                data: i\n            },\n            {\n                type: 12,\n                data: t.numHeads\n            },\n            {\n                type: 12,\n                data: t.headSize\n            },\n            {\n                type: 12,\n                data: t.hiddenSize\n            },\n            {\n                type: 12,\n                data: t.hiddenSize + t.hiddenSize + t.vHiddenSize\n            }\n        ], m = (u)=>{\n            let h = M(\"output_q\", l[0].dataType, r), _ = M(\"output_k\", l[0].dataType, r), y = M(\"output_v\", l[0].dataType, r), g = E(\"input\", l[0].dataType, l[0].dims), x = E(\"weight\", l[1].dataType, l[1].dims), $ = E(\"bias\", l[2].dataType, l[2].dims), v = g.type.storage, S = [\n                {\n                    name: \"M\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"K\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"N\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"num_heads\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"head_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"hidden_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"ldb\",\n                    type: \"u32\"\n                }\n            ];\n            return \"\\n  const TILE_SIZE = \".concat(a, \"u;\\n  var<workgroup> tileInput: array<\").concat(v, \", \").concat(a * a, \">;\\n  var<workgroup> tileWeightQ: array<\").concat(v, \", \").concat(a * a, \">;\\n  var<workgroup> tileWeightK: array<\").concat(v, \", \").concat(a * a, \">;\\n  var<workgroup> tileWeightV: array<\").concat(v, \", \").concat(a * a, \">;\\n  \").concat(u.registerUniforms(S).declareVariables(g, x, $, h, _, y), \"\\n  \").concat(u.mainStart([\n                a,\n                a,\n                1\n            ]), \"\\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\\n    let headNumber = workgroup_id.z % uniforms.num_heads;\\n    let m = global_id.y;\\n    let n = global_id.x;\\n\\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\\n    let biasOffsetQ = headNumber * uniforms.head_size;\\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\\n\\n    var valueQ = \").concat(v, \"(0);\\n    var valueK = \").concat(v, \"(0);\\n    var valueV = \").concat(v, \"(0);\\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\\n      }\\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\\n        let offset = n + (w + local_id.y) * uniforms.ldb;\\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\\n      }\\n      workgroupBarrier();\\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\\n      }\\n\\n      workgroupBarrier();\\n    }\\n\\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\\n    valueQ += bias[headOffset + biasOffsetQ];\\n    valueK += bias[headOffset + biasOffsetK];\\n    valueV += bias[headOffset + biasOffsetV];\\n\\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\\n    if (m < uniforms.M && n < uniforms.N) {\\n      let outputIdx = offset + m * uniforms.N + n;\\n      output_q[outputIdx] = valueQ;\\n      output_k[outputIdx] = valueK;\\n      output_v[outputIdx] = valueV;\\n    }\\n  }\");\n        };\n        return e1.compute({\n            name: \"AttentionPrepare\",\n            shaderCache: {\n                inputDependencies: [\n                    \"type\",\n                    \"type\",\n                    \"type\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: r,\n                            dataType: e1.inputs[0].dataType,\n                            gpuDataType: 0\n                        },\n                        {\n                            dims: r,\n                            dataType: e1.inputs[0].dataType,\n                            gpuDataType: 0\n                        },\n                        {\n                            dims: r,\n                            dataType: e1.inputs[0].dataType,\n                            gpuDataType: 0\n                        }\n                    ],\n                    dispatchGroup: d,\n                    programUniforms: p\n                }),\n            getShaderSource: m\n        }, {\n            inputs: l,\n            outputs: [\n                -1,\n                -1,\n                -1\n            ]\n        });\n    }, zs = (e1, t)=>{\n        let r = Bm(e1.inputs, t), [n, o, i] = Nm(e1, r);\n        return Rt(e1, n, o, i, e1.inputs[4], void 0, void 0, void 0, e1.inputs[5], r);\n    };\n});\nvar Vm, Wm, Lm, Os, Ds = U(()=>{\n    \"use strict\";\n    We();\n    te();\n    oe();\n    Se();\n    ae();\n    Vm = (e1, t)=>{\n        if (!e1 || e1.length !== 5) throw new Error(\"BatchNormalization requires 5 inputs\");\n        let r = (n, o, i)=>{\n            let a = o.length;\n            if (a !== n.length) throw new Error(\"\".concat(i, \": num dimensions != \").concat(a));\n            o.forEach((d, l)=>{\n                if (d !== n[l]) throw new Error(\"\".concat(i, \": dim[\").concat(l, \"] do not match\"));\n            });\n        };\n        if (e1[0].dims.length > 1) {\n            let n = t.format === \"NHWC\" ? t.spatial ? e1[0].dims.slice(-1) : e1[0].dims.slice(-1).concat(e1[0].dims.slice(1, e1[0].dims.length - 1)) : e1[0].dims.slice(1, t.spatial ? 2 : void 0);\n            r(e1[1].dims, n, \"Invalid input scale\"), r(e1[2].dims, n, \"Invalid input B\"), r(e1[3].dims, n, \"Invalid input mean\"), r(e1[4].dims, n, \"Invalid input var\");\n        } else r(e1[1].dims, [\n            1\n        ], \"Invalid input scale\"), r(e1[2].dims, [\n            1\n        ], \"Invalid input B\"), r(e1[3].dims, [\n            1\n        ], \"Invalid input mean\"), r(e1[4].dims, [\n            1\n        ], \"Invalid input var\");\n    }, Wm = (e1, t)=>{\n        let { epsilon: r, spatial: n, format: o } = t, i = e1[0].dims, a = n ? me(i[i.length - 1]) : 1, d = o === \"NHWC\" && i.length > 1 ? a : 1, l = C.size(i) / a, p = n, m = p ? i.length : i, u = E(\"x\", e1[0].dataType, e1[0].dims, a), h = E(\"scale\", e1[1].dataType, e1[1].dims, d), _ = E(\"bias\", e1[2].dataType, e1[2].dims, d), y = E(\"inputMean\", e1[3].dataType, e1[3].dims, d), g = E(\"inputVar\", e1[4].dataType, e1[4].dims, d), x = M(\"y\", e1[0].dataType, m, a), $ = ()=>{\n            let S = \"\";\n            if (n) S = \"let cOffset = \".concat(i.length === 1 ? \"0u\" : o === \"NHWC\" ? \"outputIndices[\".concat(i.length - 1, \"] / \").concat(a) : \"outputIndices[1]\", \";\");\n            else if (o === \"NCHW\") S = \"\\n            \".concat(x.indicesSet(\"outputIndices\", \"0\", \"0\"), \"\\n            let cOffset = \").concat(x.indicesToOffset(\"outputIndices\"), \";\");\n            else {\n                S = \"var cIndices = \".concat(h.type.indices, \"(0);\\n                       cIndices[0] = outputIndices[\").concat(i.length - 1, \"];\");\n                for(let T = 1; T < h.rank; T++)S += \"cIndices[\".concat(T, \"] = outputIndices[\").concat(T, \"];\");\n                S += \"let cOffset = \".concat(h.indicesToOffset(\"cIndices\"), \";\");\n            }\n            return S;\n        }, v = (S)=>\"\\n  const epsilon = \".concat(r, \";\\n  \").concat(S.registerUniform(\"outputSize\", \"u32\").declareVariables(u, h, _, y, g, x), \"\\n  \").concat(S.mainStart(), \"\\n  \").concat(S.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\"), \"\\n    var outputIndices = \").concat(x.offsetToIndices(\"global_idx * \".concat(a)), \";\\n    \").concat($(), \"\\n    let scale = \").concat(h.getByOffset(\"cOffset\"), \";\\n    let bias = \").concat(_.getByOffset(\"cOffset\"), \";\\n    let inputMean = \").concat(y.getByOffset(\"cOffset\"), \";\\n    let inputVar = \").concat(g.getByOffset(\"cOffset\"), \";\\n    let x = \").concat(u.getByOffset(\"global_idx\"), \";\\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\\n    \").concat(x.setByOffset(\"global_idx\", \"value\"), \"\\n  }\");\n        return {\n            name: \"BatchNormalization\",\n            shaderCache: {\n                hint: \"\".concat(t.epsilon, \"_\").concat(t.format, \"_\").concat(n, \"_\").concat(a),\n                inputDependencies: p ? [\n                    \"rank\",\n                    \"type\",\n                    \"type\",\n                    \"type\",\n                    \"type\"\n                ] : void 0\n            },\n            getShaderSource: v,\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: e1[0].dims,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(l / 64)\n                    },\n                    programUniforms: p ? [\n                        {\n                            type: 12,\n                            data: l\n                        },\n                        ...N(i)\n                    ] : [\n                        {\n                            type: 12,\n                            data: l\n                        }\n                    ]\n                })\n        };\n    }, Lm = (e1)=>re(e1), Os = (e1, t)=>{\n        let { inputs: r, outputCount: n } = e1, o = Lm({\n            ...t,\n            outputCount: n\n        });\n        if (ve.webgpu.validateInputContent && Vm(r, o), t.trainingMode) throw new Error(\"BatchNormalization trainingMode is not supported yet.\");\n        e1.compute(Wm(r, o));\n    };\n});\nvar Gm, Hm, Bs, Ms = U(()=>{\n    \"use strict\";\n    oe();\n    ae();\n    Gm = (e1)=>{\n        if (e1[0].dims.length !== 3) throw new Error(\"input should have 3 dimensions\");\n        if (![\n            320,\n            640,\n            1280\n        ].includes(e1[0].dims[2])) throw new Error(\"number of channels should be 320, 640 or 1280\");\n        if (e1[1].dims.length !== 1) throw new Error(\"bias is expected to have 1 dimensions\");\n        if (e1[0].dims[2] !== e1[1].dims[0]) throw new Error(\"last dimension of input and bias are not the same\");\n    }, Hm = (e1)=>{\n        let t = e1[0].dims, r = e1[0].dims[2], n = C.size(t) / 4, o = e1[0].dataType, i = E(\"input\", o, t, 4), a = E(\"bias\", o, [\n            r\n        ], 4), d = E(\"residual\", o, t, 4), l = M(\"output\", o, t, 4);\n        return {\n            name: \"BiasAdd\",\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: t,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(n / 64)\n                    }\n                }),\n            getShaderSource: (m)=>\"\\n  const channels = \".concat(r, \"u / 4;\\n  \").concat(m.declareVariables(i, a, d, l), \"\\n\\n  \").concat(m.mainStart(), \"\\n    \").concat(m.guardAgainstOutOfBoundsWorkgroupSizes(n), \"\\n    let value = \").concat(i.getByOffset(\"global_idx\"), \"\\n      + \").concat(a.getByOffset(\"global_idx % channels\"), \" + \").concat(d.getByOffset(\"global_idx\"), \";\\n    \").concat(l.setByOffset(\"global_idx\", \"value\"), \"\\n  }\")\n        };\n    }, Bs = (e1)=>{\n        Gm(e1.inputs), e1.compute(Hm(e1.inputs));\n    };\n});\nvar Fm, fe, Rs, Us, Ns, Vs, Ws, Ls, Gs, Hs, Fs, qm, qs, Ks, js, Ys, Xt, Zs, qr, Qs, Xs, Js, eu, tu, ru, nu, ou, iu, au, su, uu, du, lu, cu, pu, mu, fu, mo, fo, hu, gu, bu, Km, jm, yu, Kr = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    Fm = (e1, t, r, n, o, i, a)=>{\n        let d = Math.ceil(t / 4), l = \"\";\n        typeof o == \"string\" ? l = \"\".concat(o, \"(a)\") : l = o(\"a\");\n        let p = E(\"inputData\", r, [\n            d\n        ], 4), m = M(\"outputData\", n, [\n            d\n        ], 4), u = [\n            {\n                name: \"vec_size\",\n                type: \"u32\"\n            }\n        ];\n        return a && u.push(...a), \"\\n      \".concat(e1.registerUniforms(u).declareVariables(p, m), \"\\n\\n  \").concat(i !== null && i !== void 0 ? i : \"\", \"\\n\\n  \").concat(e1.mainStart(), \"\\n    \").concat(e1.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\"), \"\\n\\n    let a = \").concat(p.getByOffset(\"global_idx\"), \";\\n    \").concat(m.setByOffset(\"global_idx\", l), \"\\n  }\");\n    }, fe = function(e1, t, r, n, o) {\n        let i = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : e1.dataType, a = arguments.length > 6 ? arguments[6] : void 0, d = arguments.length > 7 ? arguments[7] : void 0;\n        let l = [\n            {\n                type: 12,\n                data: Math.ceil(C.size(e1.dims) / 4)\n            }\n        ];\n        return a && l.push(...a), {\n            name: t,\n            shaderCache: {\n                hint: o,\n                inputDependencies: [\n                    \"type\"\n                ]\n            },\n            getShaderSource: (p)=>Fm(p, C.size(e1.dims), e1.dataType, i, r, n, d),\n            getRunData: (p)=>({\n                    outputs: [\n                        {\n                            dims: e1.dims,\n                            dataType: i\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(C.size(p[0].dims) / 64 / 4)\n                    },\n                    programUniforms: l\n                })\n        };\n    }, Rs = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Abs\", \"abs\"));\n    }, Us = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Acos\", \"acos\"));\n    }, Ns = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Acosh\", \"acosh\"));\n    }, Vs = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Asin\", \"asin\"));\n    }, Ws = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Asinh\", \"asinh\"));\n    }, Ls = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Atan\", \"atan\"));\n    }, Gs = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Atanh\", \"atanh\"));\n    }, Hs = (e1)=>re(e1), Fs = (e1, t)=>{\n        let r;\n        switch(t.to){\n            case 10:\n                r = \"vec4<f16>\";\n                break;\n            case 1:\n                r = \"vec4<f32>\";\n                break;\n            case 12:\n                r = \"vec4<u32>\";\n                break;\n            case 6:\n                r = \"vec4<i32>\";\n                break;\n            case 9:\n                r = \"vec4<bool>\";\n                break;\n            default:\n                throw new RangeError(\"not supported type (specified in attribute 'to' from 'Cast' operator): \".concat(t.to));\n        }\n        e1.compute(fe(e1.inputs[0], \"Cast\", r, void 0, t.cacheKey, t.to));\n    }, qm = (e1)=>{\n        let t, r, n = e1.length >= 2 && e1[1].data !== 0, o = e1.length >= 3 && e1[2].data !== 0;\n        switch(e1[0].dataType){\n            case 1:\n                t = n ? e1[1].getFloat32Array()[0] : -34028234663852886e22, r = o ? e1[2].getFloat32Array()[0] : 34028234663852886e22;\n                break;\n            case 10:\n                t = n ? e1[1].getUint16Array()[0] : 64511, r = o ? e1[2].getUint16Array()[0] : 31743;\n                break;\n            default:\n                throw new Error(\"Unsupport data type\");\n        }\n        return re({\n            min: t,\n            max: r\n        });\n    }, qs = (e1, t)=>{\n        let r = t || qm(e1.inputs), n = Ee(e1.inputs[0].dataType);\n        e1.compute(fe(e1.inputs[0], \"Clip\", (o)=>\"clamp(\".concat(o, \", vec4<\").concat(n, \">(uniforms.min), vec4<\").concat(n, \">(uniforms.max))\"), void 0, r.cacheKey, void 0, [\n            {\n                type: e1.inputs[0].dataType,\n                data: r.min\n            },\n            {\n                type: e1.inputs[0].dataType,\n                data: r.max\n            }\n        ], [\n            {\n                name: \"min\",\n                type: n\n            },\n            {\n                name: \"max\",\n                type: n\n            }\n        ]), {\n            inputs: [\n                0\n            ]\n        });\n    }, Ks = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Ceil\", \"ceil\"));\n    }, js = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Cos\", \"cos\"));\n    }, Ys = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Cosh\", \"cosh\"));\n    }, Xt = (e1)=>re(e1), Zs = (e1, t)=>{\n        let r = Ee(e1.inputs[0].dataType);\n        e1.compute(fe(e1.inputs[0], \"Elu\", (n)=>\"elu_vf32(\".concat(n, \")\"), \"\\n  const elu_alpha_ = \".concat(r, \"(\").concat(t.alpha, \");\\n\\n  fn elu_f32(a: \").concat(r, \") -> \").concat(r, \" {\\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\\n  }\\n\\n  fn elu_vf32(v: vec4<\").concat(r, \">) -> vec4<\").concat(r, \"> {\\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\\n  }\"), t.cacheKey));\n    }, qr = function() {\n        let e1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"f32\";\n        return \"\\nconst r0: \".concat(e1, \" = 0.3275911;\\nconst r1: \").concat(e1, \" = 0.254829592;\\nconst r2: \").concat(e1, \" = -0.284496736;\\nconst r3: \").concat(e1, \" = 1.421413741;\\nconst r4: \").concat(e1, \" = -1.453152027;\\nconst r5: \").concat(e1, \" = 1.061405429;\\n\\nfn erf_vf32(v: vec4<\").concat(e1, \">) -> vec4<\").concat(e1, \"> {\\n  let absv = abs(v);\\n  let x = 1.0 / (1.0 + r0 * absv);\\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\\n}\");\n    }, Qs = (e1)=>{\n        let t = Ee(e1.inputs[0].dataType);\n        e1.compute(fe(e1.inputs[0], \"Erf\", (r)=>\"erf_vf32(\".concat(r, \")\"), qr(t)));\n    }, Xs = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Exp\", \"exp\"));\n    }, Js = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Floor\", \"floor\"));\n    }, eu = (e1)=>{\n        let t = Ee(e1.inputs[0].dataType);\n        e1.compute(fe(e1.inputs[0], \"Gelu\", (r)=>\"0.5 * \".concat(r, \" * (1.0 + erf_vf32(\").concat(r, \" * 0.7071067811865475))\"), qr(t)));\n    }, tu = (e1, t)=>{\n        let r = Ee(e1.inputs[0].dataType);\n        e1.compute(fe(e1.inputs[0], \"LeakyRelu\", (n)=>\"select(leaky_relu_alpha_ * \".concat(n, \", \").concat(n, \", \").concat(n, \" >= vec4<\").concat(r, \">(0.0))\"), \"const leaky_relu_alpha_ = \".concat(r, \"(\").concat(t.alpha, \");\"), t.cacheKey));\n    }, ru = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Not\", (t)=>\"!\".concat(t)));\n    }, nu = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Neg\", (t)=>\"-\".concat(t)));\n    }, ou = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Reciprocal\", (t)=>\"1.0/\".concat(t)));\n    }, iu = (e1)=>{\n        let t = Ee(e1.inputs[0].dataType);\n        e1.compute(fe(e1.inputs[0], \"Relu\", (r)=>\"select(vec4<\".concat(t, \">(0.0), \").concat(r, \", \").concat(r, \" > vec4<\").concat(t, \">(0.0))\")));\n    }, au = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Sigmoid\", (t)=>\"(1.0 / (1.0 + exp(-\".concat(t, \")))\")));\n    }, su = (e1)=>re(e1), uu = (e1, t)=>{\n        let r = Ee(e1.inputs[0].dataType);\n        e1.compute(fe(e1.inputs[0], \"HardSigmoid\", (n)=>\"max(vec4<\".concat(r, \">(0.0), min(vec4<\").concat(r, \">(1.0), \").concat(t.alpha, \" * \").concat(n, \" + vec4<\").concat(r, \">(\").concat(t.beta, \")))\"), void 0, t.cacheKey));\n    }, du = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Sin\", \"sin\"));\n    }, lu = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Sinh\", \"sinh\"));\n    }, cu = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Sqrt\", \"sqrt\"));\n    }, pu = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Tan\", \"tan\"));\n    }, mu = (e1)=>\"sign(\".concat(e1, \") * (1 - exp(-2 * abs(\").concat(e1, \"))) / (1 + exp(-2 * abs(\").concat(e1, \")))\"), fu = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Tanh\", mu));\n    }, mo = function() {\n        let e1 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"f32\";\n        return \"\\nconst fast_gelu_a: \".concat(e1, \" = 0.5;\\nconst fast_gelu_b: \").concat(e1, \" = 0.7978845608028654;\\nconst fast_gelu_c: \").concat(e1, \" = 0.035677408136300125;\\n\\nfn tanh_v(v: vec4<\").concat(e1, \">) -> vec4<\").concat(e1, \"> {\\n  return \").concat(mu(\"v\"), \";\\n}\\n\");\n    }, fo = (e1)=>\"(fast_gelu_a + fast_gelu_a * tanh_v(\".concat(e1, \" * (fast_gelu_c * \").concat(e1, \" * \").concat(e1, \" + fast_gelu_b))) * \").concat(e1), hu = (e1)=>{\n        let t = Ee(e1.inputs[0].dataType);\n        e1.compute(fe(e1.inputs[0], \"FastGelu\", fo, mo(t), void 0, e1.inputs[0].dataType));\n    }, gu = (e1, t)=>{\n        let r = Ee(e1.inputs[0].dataType);\n        return e1.compute(fe(e1.inputs[0], \"ThresholdedRelu\", (n)=>\"select(vec4<\".concat(r, \">(0.0), \").concat(n, \", \").concat(n, \" > thresholded_relu_alpha_)\"), \"const thresholded_relu_alpha_ = vec4<\".concat(r, \">(\").concat(t.alpha, \");\"), t.cacheKey)), 0;\n    }, bu = (e1)=>{\n        e1.compute(fe(e1.inputs[0], \"Log\", \"log\"));\n    }, Km = (e1, t)=>\"\\nconst alpha = vec4<\".concat(e1, \">(\").concat(t, \");\\nconst one = \").concat(e1, \"(1.0);\\nconst zero = \").concat(e1, \"(0.0);\\n\\nfn quick_gelu_impl(x: vec4<\").concat(e1, \">) -> vec4<\").concat(e1, \"> {\\n  let v = x *alpha;\\n  var x1 : vec4<\").concat(e1, \">;\\n  for (var i = 0; i < 4; i = i + 1) {\\n    if (v[i] >= zero) {\\n      x1[i] = one / (one + exp(-v[i]));\\n    } else {\\n      x1[i] = one - one / (one + exp(v[i]));\\n    }\\n  }\\n  return x * x1;\\n}\\n\"), jm = (e1)=>\"quick_gelu_impl(\".concat(e1, \")\"), yu = (e1, t)=>{\n        let r = Ee(e1.inputs[0].dataType);\n        e1.compute(fe(e1.inputs[0], \"QuickGelu\", jm, Km(r, t.alpha), t.cacheKey, e1.inputs[0].dataType));\n    };\n});\nvar Ym, Zm, wu, vu = U(()=>{\n    \"use strict\";\n    oe();\n    ae();\n    Kr();\n    Ym = (e1)=>{\n        if (e1[0].dims.length !== 3) throw new Error(\"input should have 3 dimensions\");\n        if (![\n            2560,\n            5120,\n            10240\n        ].includes(e1[0].dims[2])) throw new Error(\"hidden state should be 2560, 5120 or 10240\");\n        if (e1[1].dims.length !== 1) throw new Error(\"bias is expected to have 1 dimensions\");\n        if (e1[0].dims[2] !== e1[1].dims[0]) throw new Error(\"last dimension of input and bias are not the same\");\n    }, Zm = (e1)=>{\n        let t = e1[0].dims.slice();\n        t[2] = t[2] / 2;\n        let r = E(\"input\", e1[0].dataType, e1[0].dims, 4), n = E(\"bias\", e1[0].dataType, [\n            e1[0].dims[2]\n        ], 4), o = M(\"output\", e1[0].dataType, t, 4), i = C.size(t) / 4, a = _e(e1[0].dataType);\n        return {\n            name: \"BiasSplitGelu\",\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: t,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(i / 64)\n                    }\n                }),\n            getShaderSource: (l)=>\"\\n  const M_SQRT2 = sqrt(2.0);\\n  const halfChannels = \".concat(e1[0].dims[2] / 4 / 2, \"u;\\n\\n  \").concat(l.declareVariables(r, n, o), \"\\n\\n  \").concat(qr(a), \"\\n\\n  \").concat(l.mainStart(), \"\\n    \").concat(l.guardAgainstOutOfBoundsWorkgroupSizes(i), \"\\n    let biasIdx = global_idx % halfChannels;\\n    let batchIndex = global_idx / halfChannels;\\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\\n    let valueLeft = input[inputOffset] + bias[biasIdx];\\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\\n\\n    \").concat(o.setByOffset(\"global_idx\", \"valueLeft * geluRight\"), \"\\n  }\")\n        };\n    }, wu = (e1)=>{\n        Ym(e1.inputs), e1.compute(Zm(e1.inputs));\n    };\n});\nvar Qm, Xm, at, $u, xu, Su, Tu, Iu, Cu, Au, ku, Eu, Pu, zu = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    Qm = (e1, t, r, n, o, i, a, d, l, p, m, u)=>{\n        let h, _;\n        typeof d == \"string\" ? h = _ = (v, S)=>\"\".concat(d, \"((\").concat(v, \"),(\").concat(S, \"))\") : typeof d == \"function\" ? h = _ = d : (h = d.scalar, _ = d.vector);\n        let y = M(\"outputData\", m, n.length, 4), g = E(\"aData\", l, t.length, 4), x = E(\"bData\", p, r.length, 4), $;\n        if (o) if (i) {\n            let v = C.size(t) === 1, S = C.size(r) === 1, T = t.length > 0 && t[t.length - 1] % 4 === 0, A = r.length > 0 && r[r.length - 1] % 4 === 0;\n            v || S ? $ = y.setByOffset(\"global_idx\", _(v ? \"\".concat(g.type.value, \"(\").concat(g.getByOffset(\"0\"), \".x)\") : g.getByOffset(\"global_idx\"), S ? \"\".concat(x.type.value, \"(\").concat(x.getByOffset(\"0\"), \".x)\") : x.getByOffset(\"global_idx\"))) : $ = \"\\n            let outputIndices = \".concat(y.offsetToIndices(\"global_idx * 4u\"), \";\\n            let offsetA = \").concat(g.broadcastedIndicesToOffset(\"outputIndices\", y), \";\\n            let offsetB = \").concat(x.broadcastedIndicesToOffset(\"outputIndices\", y), \";\\n            \").concat(y.setByOffset(\"global_idx\", _(a || T ? g.getByOffset(\"offsetA / 4u\") : \"\".concat(g.type.value, \"(\").concat(g.getByOffset(\"offsetA / 4u\"), \"[offsetA % 4u])\"), a || A ? x.getByOffset(\"offsetB / 4u\") : \"\".concat(x.type.value, \"(\").concat(x.getByOffset(\"offsetB / 4u\"), \"[offsetB % 4u])\"))), \"\\n          \");\n        } else $ = y.setByOffset(\"global_idx\", _(g.getByOffset(\"global_idx\"), x.getByOffset(\"global_idx\")));\n        else {\n            if (!i) throw new Error(\"no necessary to use scalar implementation for element-wise binary op implementation.\");\n            let v = function(S, T) {\n                let A = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\";\n                let k = \"aData[indexA\".concat(T, \"][componentA\").concat(T, \"]\"), P = \"bData[indexB\".concat(T, \"][componentB\").concat(T, \"]\");\n                return \"\\n            let outputIndices\".concat(T, \" = \").concat(y.offsetToIndices(\"global_idx * 4u + \".concat(T, \"u\")), \";\\n            let offsetA\").concat(T, \" = \").concat(g.broadcastedIndicesToOffset(\"outputIndices\".concat(T), y), \";\\n            let offsetB\").concat(T, \" = \").concat(x.broadcastedIndicesToOffset(\"outputIndices\".concat(T), y), \";\\n            let indexA\").concat(T, \" = offsetA\").concat(T, \" / 4u;\\n            let indexB\").concat(T, \" = offsetB\").concat(T, \" / 4u;\\n            let componentA\").concat(T, \" = offsetA\").concat(T, \" % 4u;\\n            let componentB\").concat(T, \" = offsetB\").concat(T, \" % 4u;\\n            \").concat(S, \"[\").concat(T, \"] = \").concat(A, \"(\").concat(h(k, P), \");\\n          \");\n            };\n            m === 9 ? $ = \"\\n            var data = vec4<u32>(0);\\n            \".concat(v(\"data\", 0, \"u32\"), \"\\n            \").concat(v(\"data\", 1, \"u32\"), \"\\n            \").concat(v(\"data\", 2, \"u32\"), \"\\n            \").concat(v(\"data\", 3, \"u32\"), \"\\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));\") : $ = \"\\n            \".concat(v(\"outputData[global_idx]\", 0), \"\\n            \").concat(v(\"outputData[global_idx]\", 1), \"\\n            \").concat(v(\"outputData[global_idx]\", 2), \"\\n            \").concat(v(\"outputData[global_idx]\", 3), \"\\n          \");\n        }\n        return \"\\n        \".concat(e1.registerUniform(\"vec_size\", \"u32\").declareVariables(g, x, y), \"\\n\\n        \").concat(u !== null && u !== void 0 ? u : \"\", \"\\n\\n        \").concat(e1.mainStart(), \"\\n        \").concat(e1.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\"), \"\\n        \").concat($, \"\\n      }\");\n    }, Xm = function(e1, t, r, n, o, i) {\n        let a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : r.dataType;\n        let d = r.dims.map((g)=>{\n            var _Number;\n            return (_Number = Number(g)) !== null && _Number !== void 0 ? _Number : 1;\n        }), l = n.dims.map((g)=>{\n            var _Number;\n            return (_Number = Number(g)) !== null && _Number !== void 0 ? _Number : 1;\n        }), p = !C.areEqual(d, l), m = d, u = C.size(d), h = !1, _ = !1, y = [\n            p\n        ];\n        if (p) {\n            let g = tt.calcShape(d, l, !1);\n            if (!g) throw new Error(\"Can't perform binary op on the given tensors\");\n            m = g.slice(), u = C.size(m);\n            let x = C.size(d) === 1, $ = C.size(l) === 1, v = d.length > 0 && d[d.length - 1] % 4 === 0, S = l.length > 0 && l[l.length - 1] % 4 === 0;\n            y.push(x), y.push($), y.push(v), y.push(S);\n            let T = 1;\n            for(let A = 1; A < m.length; A++){\n                let k = d[d.length - A], P = l[l.length - A];\n                if (k === P) T *= k;\n                else break;\n            }\n            T % 4 === 0 ? (_ = !0, h = !0) : (x || $ || v || S) && (h = !0);\n        } else h = !0;\n        return y.push(h), {\n            name: e1,\n            shaderCache: {\n                hint: t + y.map((g)=>g.toString()).join(\"_\"),\n                inputDependencies: [\n                    \"rank\",\n                    \"rank\"\n                ]\n            },\n            getShaderSource: (g)=>Qm(g, d, l, m, h, p, _, o, r.dataType, n.dataType, a, i),\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: m,\n                            dataType: a\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(u / 64 / 4)\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: Math.ceil(C.size(m) / 4)\n                        },\n                        ...N(d, l, m)\n                    ]\n                })\n        };\n    }, at = (e1, t, r, n, o, i)=>{\n        e1.compute(Xm(t, o !== null && o !== void 0 ? o : \"\", e1.inputs[0], e1.inputs[1], r, n, i));\n    }, $u = (e1)=>{\n        at(e1, \"Add\", (t, r)=>\"\".concat(t, \"+\").concat(r));\n    }, xu = (e1)=>{\n        at(e1, \"Div\", (t, r)=>\"\".concat(t, \"/\").concat(r));\n    }, Su = (e1)=>{\n        at(e1, \"Equal\", {\n            scalar: (t, r)=>\"u32(\".concat(t, \"==\").concat(r, \")\"),\n            vector: (t, r)=>\"vec4<u32>(\".concat(t, \"==\").concat(r, \")\")\n        }, void 0, void 0, 9);\n    }, Tu = (e1)=>{\n        at(e1, \"Mul\", (t, r)=>\"\".concat(t, \"*\").concat(r));\n    }, Iu = (e1)=>{\n        let t = E(\"input\", e1.inputs[0].dataType, e1.inputs[0].dims).type.value;\n        at(e1, \"Pow\", {\n            scalar: (n, o)=>\"pow_custom(\".concat(n, \",\").concat(o, \")\"),\n            vector: (n, o)=>\"pow_vector_custom(\".concat(n, \",\").concat(o, \")\")\n        }, \"\\n    fn pow_custom(a : \".concat(t, \", b : \").concat(t, \") -> \").concat(t, \" {\\n      if (b == \").concat(t, \"(0.0)) {\\n        return \").concat(t, \"(1.0);\\n      } else if (a < \").concat(t, \"(0.0) && f32(b) != floor(f32(b))) {\\n        return \").concat(t, \"(pow(f32(a), f32(b))); // NaN\\n      }\\n      return select(sign(a), \").concat(t, \"(1.0), round(f32(abs(b) % \").concat(t, \"(2.0))) != 1.0) * \").concat(t, \"(\").concat(t === \"i32\" ? \"round\" : \"\", \"(pow(f32(abs(a)), f32(b))));\\n    }\\n    fn pow_vector_custom(a : vec4<\").concat(t, \">, b : vec4<\").concat(t, \">) -> vec4<\").concat(t, \"> {\\n      // TODO: implement vectorized pow\\n      return vec4<\").concat(t, \">(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\\n    }\\n      \"));\n    }, Cu = (e1)=>{\n        at(e1, \"Sub\", (t, r)=>\"\".concat(t, \"-\").concat(r));\n    }, Au = (e1)=>{\n        at(e1, \"Greater\", {\n            scalar: (t, r)=>\"u32(\".concat(t, \">\").concat(r, \")\"),\n            vector: (t, r)=>\"vec4<u32>(\".concat(t, \">\").concat(r, \")\")\n        }, void 0, void 0, 9);\n    }, ku = (e1)=>{\n        at(e1, \"Less\", {\n            scalar: (t, r)=>\"u32(\".concat(t, \"<\").concat(r, \")\"),\n            vector: (t, r)=>\"vec4<u32>(\".concat(t, \"<\").concat(r, \")\")\n        }, void 0, void 0, 9);\n    }, Eu = (e1)=>{\n        at(e1, \"GreaterOrEqual\", {\n            scalar: (t, r)=>\"u32(\".concat(t, \">=\").concat(r, \")\"),\n            vector: (t, r)=>\"vec4<u32>(\".concat(t, \">=\").concat(r, \")\")\n        }, void 0, void 0, 9);\n    }, Pu = (e1)=>{\n        at(e1, \"LessOrEqual\", {\n            scalar: (t, r)=>\"u32(\".concat(t, \"<=\").concat(r, \")\"),\n            vector: (t, r)=>\"vec4<u32>(\".concat(t, \"<=\").concat(r, \")\")\n        }, void 0, void 0, 9);\n    };\n});\nvar ef, tf, rf, nf, Ou, Du, Bu = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    ef = (e1, t)=>{\n        if (!e1 || e1.length < 1) throw new Error(\"too few inputs\");\n        let r = 0, n = e1[r], o = n.dataType, i = n.dims.length;\n        e1.forEach((a, d)=>{\n            if (d !== r) {\n                if (a.dataType !== o) throw new Error(\"input tensors should be one type\");\n                if (a.dims.length !== i) throw new Error(\"input tensors should have the same shape\");\n                a.dims.forEach((l, p)=>{\n                    if (p !== t && l !== n.dims[p]) throw new Error(\"non concat dimensions must match\");\n                });\n            }\n        });\n    }, tf = (e1, t)=>\"\\n  fn calculateInputIndex(index: u32) -> u32 {\\n    let sizeInConcatAxis = array<u32, \".concat(e1, \"u>(\").concat(t, \");\\n    for (var i: u32 = 0u; i < \").concat(e1, \"; i += 1u ) {\\n      if (index < sizeInConcatAxis[i]) {\\n        return i;\\n      }\\n    }\\n    return \").concat(e1, \"u;\\n  }\"), rf = (e1, t)=>{\n        let r = e1.length, n = [];\n        for(let o = 0; o < r; ++o){\n            let i = t.setByOffset(\"global_idx\", e1[o].getByIndices(\"indices\"));\n            r === 1 ? n.push(i) : o === 0 ? n.push(\"if (inputIndex == \".concat(o, \"u) { \").concat(i, \" }\")) : o === r - 1 ? n.push(\"else { \".concat(i, \" }\")) : n.push(\"else if (inputIndex == \".concat(o, \") { \").concat(i, \" }\"));\n        }\n        return n.join(\"\\n\");\n    }, nf = (e1, t, r, n)=>{\n        let o = C.size(r), i = new Array(e1.length), a = new Array(e1.length), d = 0, l = [], p = [], m = [\n            {\n                type: 12,\n                data: o\n            }\n        ];\n        for(let g = 0; g < e1.length; ++g)d += e1[g].dims[t], i[g] = d, p.push(e1[g].dims.length), a[g] = E(\"input\".concat(g), n, p[g]), l.push(\"rank\"), m.push({\n            type: 12,\n            data: i[g]\n        });\n        for(let g = 0; g < e1.length; ++g)m.push(...N(e1[g].dims));\n        m.push(...N(r));\n        let u = M(\"output\", n, r.length), h = u.indicesGet(\"indices\", t), _ = Array.from(Array(i.length).keys()).map((g)=>\"uniforms.sizeInConcatAxis\".concat(g)).join(\",\"), y = (g)=>\"\\n\\n  \".concat((()=>{\n                g.registerUniform(\"outputSize\", \"u32\");\n                for(let x = 0; x < e1.length; x++)g.registerUniform(\"sizeInConcatAxis\".concat(x), \"u32\");\n                return g.declareVariables(...a, u);\n            })(), \"\\n\\n  \").concat(tf(i.length, _), \"\\n\\n  \").concat(g.mainStart(), \"\\n    \").concat(g.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\"), \"\\n\\n    var indices = \").concat(u.offsetToIndices(\"global_idx\"), \";\\n\\n    let inputIndex = calculateInputIndex(\").concat(h, \");\\n    if (inputIndex != 0u) {\\n      let sizeInConcatAxis = array<u32, \").concat(i.length, \"u>(\").concat(_, \");\\n      \").concat(h, \" -= sizeInConcatAxis[inputIndex - 1u];\\n    }\\n\\n    \").concat(rf(a, u), \"\\n  }\");\n        return {\n            name: \"Concat\",\n            shaderCache: {\n                hint: \"\".concat(t),\n                inputDependencies: l\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: r,\n                            dataType: n\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(o / 64)\n                    },\n                    programUniforms: m\n                }),\n            getShaderSource: y\n        };\n    }, Ou = (e1, t)=>{\n        let r = e1.inputs, n = r[0].dims, o = C.normalizeAxis(t.axis, n.length);\n        ef(r, o);\n        let i = n.slice();\n        i[o] = r.reduce((d, l)=>d + (l.dims.length > o ? l.dims[o] : 0), 0);\n        let a = r.filter((d)=>C.size(d.dims) > 0);\n        e1.compute(nf(a, o, i, r[0].dataType), {\n            inputs: a\n        });\n    }, Du = (e1)=>re({\n            axis: e1.axis\n        });\n});\nvar qe, Ke, je, jr, yt = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    qe = function(e1, t) {\n        let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"f32\";\n        switch(e1.activation){\n            case \"Relu\":\n                return \"value = max(value, \".concat(t, \"(0.0));\");\n            case \"Sigmoid\":\n                return \"value = (\".concat(t, \"(1.0) / (\").concat(t, \"(1.0) + exp(-value)));\");\n            case \"Clip\":\n                return \"value = clamp(value, \".concat(t, \"(\").concat(r, \"(uniforms.clip_min)), \").concat(t, \"(\").concat(r, \"(uniforms.clip_max)));\");\n            case \"HardSigmoid\":\n                return \"value = max(\".concat(t, \"(0.0), min(\").concat(t, \"(1.0), \").concat(r, \"(uniforms.alpha) * value + \").concat(r, \"(uniforms.beta)));\");\n            case \"LeakyRelu\":\n                return \"value = select(\".concat(r, \"(uniforms.alpha) * value, value, value >= \").concat(t, \"(0.0));\");\n            case \"Tanh\":\n                return \"let e2x = exp(-2.0 * abs(value));\\n              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);\\n        \";\n            case \"\":\n                return \"\";\n            default:\n                throw new Error(\"Unsupported activation \".concat(e1.activation));\n        }\n    }, Ke = (e1, t)=>{\n        e1.activation === \"Clip\" ? t.push({\n            type: 1,\n            data: e1.clipMax\n        }, {\n            type: 1,\n            data: e1.clipMin\n        }) : e1.activation === \"HardSigmoid\" ? t.push({\n            type: 1,\n            data: e1.alpha\n        }, {\n            type: 1,\n            data: e1.beta\n        }) : e1.activation === \"LeakyRelu\" && t.push({\n            type: 1,\n            data: e1.alpha\n        });\n    }, je = (e1, t)=>{\n        e1.activation === \"Clip\" ? t.push({\n            name: \"clip_max\",\n            type: \"f32\"\n        }, {\n            name: \"clip_min\",\n            type: \"f32\"\n        }) : e1.activation === \"HardSigmoid\" ? t.push({\n            name: \"alpha\",\n            type: \"f32\"\n        }, {\n            name: \"beta\",\n            type: \"f32\"\n        }) : e1.activation === \"LeakyRelu\" && t.push({\n            name: \"alpha\",\n            type: \"f32\"\n        });\n    }, jr = (e1)=>{\n        let t = (e1 === null || e1 === void 0 ? void 0 : e1.activation) || \"\";\n        if (t === \"HardSigmoid\") {\n            let [r, n] = (e1 === null || e1 === void 0 ? void 0 : e1.activation_params) || [\n                .2,\n                .5\n            ];\n            return {\n                activation: t,\n                alpha: r,\n                beta: n\n            };\n        } else if (t === \"Clip\") {\n            let [r, n] = (e1 === null || e1 === void 0 ? void 0 : e1.activation_params) || [\n                es,\n                ts\n            ];\n            return {\n                activation: t,\n                clipMax: n,\n                clipMin: r\n            };\n        } else if (t === \"LeakyRelu\") {\n            let [r] = (e1 === null || e1 === void 0 ? void 0 : e1.activation_params) || [\n                .01\n            ];\n            return {\n                activation: t,\n                alpha: r\n            };\n        }\n        return {\n            activation: t\n        };\n    };\n});\nvar Ae, Mu, Yr = U(()=>{\n    \"use strict\";\n    Ae = (e1, t)=>{\n        switch(e1){\n            case 1:\n                return t;\n            case 2:\n                return \"vec2<\".concat(t, \">\");\n            case 3:\n                return \"vec3<\".concat(t, \">\");\n            case 4:\n                return \"vec4<\".concat(t, \">\");\n            default:\n                throw new Error(\"\".concat(e1, \"-component is not supported.\"));\n        }\n    }, Mu = (e1)=>\"\\n      \".concat(e1 ? \"value = value + getBiasByOutputCoords(coords);\" : \"\", \"\\n      \");\n});\nvar Ru, Uu = U(()=>{\n    \"use strict\";\n    Ru = (e1)=>\"\\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\\n  return dot(coords, vec4<i32>(\\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\\n}\\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\\n  return dot(coords, vec4<i32>(\\n    i32(\".concat(e1, \".x), i32(\").concat(e1, \".y), i32(\").concat(e1, \".z), 1));\\n}\\n\");\n});\nvar Jt, Zr, Qr = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    yt();\n    Jt = (e1, t, r, n, o)=>{\n        let i = n - r;\n        return \"\\n      \".concat(Array.from({\n            length: r\n        }).map((a, d)=>\"\\n      if (\".concat(F(t.shape, d, t.rank), \" != 1) {\\n        \").concat(t.indicesSet(e1, d, F(o, d + i, n)), \"\\n      } else {\\n        \").concat(t.indicesSet(e1, d, 0), \"\\n      }\")).join(\"\"), \"\\n\");\n    }, Zr = function(e1, t, r, n) {\n        let o = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1, i = arguments.length > 5 ? arguments[5] : void 0;\n        let a = e1[0].dims, d = e1[1].dims, l = a[a.length - 2], p = d[d.length - 1], m = a[a.length - 1], u = me(p), h = me(m), _ = me(l), y = C.size(r) / u / _, g = e1.length > 2, x = n ? n.slice(0, -2) : r.slice(0, -2), v = [\n            C.size(x),\n            l,\n            p\n        ], S = [\n            {\n                type: 12,\n                data: y\n            },\n            {\n                type: 12,\n                data: l\n            },\n            {\n                type: 12,\n                data: p\n            },\n            {\n                type: 12,\n                data: m\n            }\n        ];\n        Ke(t, S), S.push(...N(x, a, d)), g && S.push(...N(e1[2].dims)), S.push(...N(v));\n        let T = (A)=>{\n            let k = Lr(\"batch_dims\", e1[0].dataType, x.length), P = E(\"a\", e1[0].dataType, a.length, h), D = E(\"b\", e1[1].dataType, d.length, u), R = M(\"output\", e1[0].dataType, v.length, u), G = _e(R.type.tensor), K = qe(t, R.type.value, G), j = [\n                P,\n                D\n            ], V = \"\";\n            if (g) {\n                let Y = o ? u : 1;\n                j.push(E(\"bias\", e1[2].dataType, e1[2].dims.length, Y)), V = \"\".concat(o ? \"value += bias[col / \".concat(Y, \"];\") : \"value += \".concat(R.type.value, \"(bias[row + i]);\"));\n            }\n            let Q = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"M\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"N\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"K\",\n                    type: \"u32\"\n                }\n            ];\n            je(t, Q);\n            let se = ()=>{\n                let Y = \"var a_data: \".concat(P.type.value, \";\");\n                for(let ee = 0; ee < h; ee++)Y += \"\\n              let b_data\".concat(ee, \" = b[(b_offset + (k + \").concat(ee, \") * uniforms.N + col) / \").concat(u, \"];\");\n                for(let ee = 0; ee < _; ee++){\n                    Y += \"a_data = a[(a_offset + (row + \".concat(ee, \") * uniforms.K + k) / \").concat(h, \"];\");\n                    for(let J = 0; J < h; J++)Y += \"\\n            values[\".concat(ee, \"] = fma(\").concat(D.type.value, \"(a_data\").concat(h === 1 ? \"\" : \"[\".concat(J, \"]\"), \"), b_data\").concat(J, \", values[\").concat(ee, \"]);\\n\");\n                }\n                return Y;\n            };\n            return \"\\n  \".concat(A.registerUniforms(Q).registerInternalVariables(k).declareVariables(...j, R), \"\\n  \").concat(A.mainStart(), \"\\n    \").concat(A.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n    let col = (global_idx % (uniforms.N / \").concat(u, \")) * \").concat(u, \";\\n    var index1 = global_idx / (uniforms.N / \").concat(u, \");\\n    let stride1 = uniforms.M / \").concat(_, \";\\n    let row = (index1 % stride1) * \").concat(_, \";\\n    let batch = index1 / stride1;\\n\\n    \").concat(r.length === 2 ? \"\" : \"let batch_indices = \".concat(k.offsetToIndices(\"batch\"), \";\"), \"\\n\\n    var a_indices: \").concat(P.type.indices, \";\\n    \").concat(Jt(\"a_indices\", P, P.rank - 2, k.rank, \"batch_indices\"), \"\\n    \").concat(P.indicesSet(\"a_indices\", P.rank - 2, 0), \"\\n    \").concat(P.indicesSet(\"a_indices\", P.rank - 1, 0), \"\\n    let a_offset = \").concat(P.indicesToOffset(\"a_indices\"), \";\\n\\n    var b_indices: \").concat(D.type.indices, \";\\n    \").concat(Jt(\"b_indices\", D, D.rank - 2, k.rank, \"batch_indices\"), \"\\n    \").concat(D.indicesSet(\"b_indices\", D.rank - 2, 0), \"\\n    \").concat(D.indicesSet(\"b_indices\", D.rank - 1, 0), \"\\n    let b_offset = \").concat(D.indicesToOffset(\"b_indices\"), \";\\n    var values: array<\").concat(R.type.value, \", \").concat(_, \">;\\n    for (var k: u32 = 0u; k < uniforms.K; k = k + \").concat(h, \") {\\n      \").concat(se(), \"\\n    }\\n    for (var i = 0u; i < \").concat(_, \"u; i++) {\\n      var value = values[i];\\n      \").concat(V, \"\\n      \").concat(K, \"\\n      let cur_indices = \").concat(R.type.indices, \"(batch, row + i, col);\\n      let offset = \").concat(R.indicesToOffset(\"cur_indices\"), \";\\n      \").concat(R.setByOffset(\"offset / \".concat(u), \"value\"), \";\\n    }\\n  }\\n  \");\n        };\n        return {\n            name: \"MatMulNaive\",\n            shaderCache: {\n                hint: \"\".concat(t.activation, \";\").concat(u, \";\").concat(h, \";\").concat(_, \";\").concat(o),\n                inputDependencies: g ? [\n                    \"rank\",\n                    \"rank\",\n                    \"rank\"\n                ] : [\n                    \"rank\",\n                    \"rank\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: i ? i(r) : r,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(y / 64)\n                    },\n                    programUniforms: S\n                }),\n            getShaderSource: T\n        };\n    };\n});\nvar of, af, ho, Nu, sf, go, uf, er, Xr = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    yt();\n    Qr();\n    Yr();\n    of = (e1, t)=>e1 ? \"\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n          kStart + inputRow,\\n          globalRowStart / innerElementSize + inputCol\".concat(t ? \", batchIndices\" : \"\", \");\\n        \") : \"\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n          globalRow + innerRow,\\n          kStart / innerElementSize + inputCol\".concat(t ? \", batchIndices\" : \"\", \");\\n        \"), af = (e1, t)=>e1 ? \"\\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\\n        \".concat(t === 3 ? \"\" : \"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\", \"\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\n          acc[i] = BCached0 * ACached0[i] + acc[i];\\n          acc[i] = BCached1 * ACached1[i] + acc[i];\\n          acc[i] = BCached2 * ACached2[i] + acc[i];\\n          \").concat(t === 3 ? \"\" : \"acc[i] = BCached3 * ACached3[i] + acc[i];\", \"\\n        }\") : \"\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\n          let ACached = mm_Asub[tileRow + i][k];\\n          acc[i] = BCached0 * ACached.x + acc[i];\\n          acc[i] = BCached1 * ACached.y + acc[i];\\n          acc[i] = BCached2 * ACached.z + acc[i];\\n          \".concat(t === 3 ? \"\" : \"acc[i] = BCached3 * ACached.w + acc[i];\", \"\\n        }\"), ho = function(e1, t) {\n        let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"f32\", n = arguments.length > 3 ? arguments[3] : void 0, o = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1, i = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 32, a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : !1, d = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : 32;\n        let l = t[1] * e1[1], p = t[0] * e1[0], m = o ? l : i, u = o ? i : l, h = m / t[0], _ = i / t[1];\n        if (!((o && h === 4 && e1[1] === 4 || !o && (h === 3 || h === 4)) && m % t[0] === 0 && i % t[1] === 0 && e1[0] === 4)) throw new Error(\"If transposeA \".concat(o, \" is true, innerElementSize \").concat(h, \" and workPerThread[1] \").concat(e1[1], \" must be 4.\\n      Otherwise, innerElementSize \").concat(h, \" must be 3 or 4.\\n  tileAWidth \").concat(m, \" must be divisible by workgroupSize[0]\").concat(t[0], \". tileInner \").concat(i, \" must be divisible by workgroupSize[1] \").concat(t[1], \". colPerThread \").concat(e1[0], \" must be 4.\"));\n        return \"\\nvar<workgroup> mm_Asub: array<array<vec\".concat(h, \"<\").concat(r, \">, \").concat(m / h, \">, \").concat(u, \">;\\nvar<workgroup> mm_Bsub: array<array<vec4<\").concat(r, \">, \").concat(p / e1[0], \">, \").concat(i, \">;\\n\\nconst rowPerThread = \").concat(e1[1], \";\\nconst colPerThread = \").concat(e1[0], \";\\nconst innerElementSize = \").concat(h, \";\\nconst tileInner = \").concat(i, \";\\n\\n@compute @workgroup_size(\").concat(t[0], \", \").concat(t[1], \", \").concat(t[2], \")\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\n  let localRow = i32(localId.y);\\n  let tileRow = localRow * rowPerThread;\\n  let tileCol = i32(localId.x);\\n\\n  let globalRow =i32(globalId.y) * rowPerThread;\\n  let globalCol = i32(globalId.x);\\n  let batch = \").concat(a ? \"0\" : \"i32(globalId.z)\", \";\\n  \").concat(n ? \"let batchIndices = \".concat(n.offsetToIndices(\"u32(batch)\"), \";\") : \"\", \"\\n  let globalRowStart = i32(workgroupId.y) * \").concat(l, \";\\n\\n  let num_tiles = \").concat(a ? \"\".concat(Math.ceil(d / i)) : \"(uniforms.dim_inner - 1) / tileInner + 1\", \";\\n  var kStart = \").concat(a ? \"i32(globalId.z) * \".concat(d) : \"0\", \";\\n\\n  var acc: array<vec4<\").concat(r, \">, rowPerThread>;\\n\\n  // Loop over shared dimension.\\n  let tileRowB = localRow * \").concat(_, \";\\n  for (var t = 0; t < num_tiles; t = t + 1) {\\n      // Load one tile of A into local memory.\\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n          let inputRow = tileRow + innerRow;\\n          let inputCol = tileCol;\\n          \").concat(of(o, n), \"\\n      }\\n\\n      // Load one tile of B into local memory.\\n      for (var innerRow = 0; innerRow < \").concat(_, \"; innerRow = innerRow + 1) {\\n          let inputRow = tileRowB + innerRow;\\n          let inputCol = tileCol;\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol\").concat(n ? \", batchIndices\" : \"\", \");\\n      }\\n      kStart = kStart + tileInner;\\n      workgroupBarrier();\\n\\n      // Compute acc values for a single thread.\\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\\n          \").concat(h === 3 ? \"\" : \"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\", \"\\n\\n          \").concat(af(o, h), \"\\n      }\\n\\n      workgroupBarrier();\\n  }\\n\\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\\n  }\\n}\");\n    }, Nu = (e1, t)=>e1 ? \"\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n              kStart + inputRow,\\n              globalRowStart + inputCol\".concat(t ? \", batchIndices\" : \"\", \");\\n            \") : \"\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\n              globalRowStart + inputRow,\\n              kStart + inputCol\".concat(t ? \", batchIndices\" : \"\", \");\\n            \"), sf = (e1)=>e1 ? \"let ACached = mm_Asub[k][tileRow + innerRow];\" : \"let ACached = mm_Asub[tileRow + innerRow][k];\", go = function(e1, t) {\n        let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"f32\", n = arguments.length > 3 ? arguments[3] : void 0, o = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1, i = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 32, a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : !1, d = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : 32, l = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : !1;\n        let p = e1[1] * t[1], m = e1[0] * t[0], u = o ? p : i, h = o ? i : p;\n        if (!(h % t[1] === 0 && u % t[0] === 0 && i % t[1] === 0)) throw new Error(\"tileAHight \".concat(h, \" must be divisible by workgroupSize[1]\").concat(t[1], \", tileAWidth \").concat(u, \" must be divisible by workgroupSize[0]\").concat(t[0], \", tileInner \").concat(i, \" must be divisible by workgroupSize[1]\").concat(t[1]));\n        let _ = h / t[1], y = u / t[0], g = i / t[1], x = l ? \"\\n    let localRow = i32(localId.y);\\n    let localCol = i32(localId.x);\\n    let globalRowStart = i32(workgroupId.y) * \".concat(p, \";\\n    let globalColStart = i32(workgroupId.x) * \").concat(m, \";\\n\\n    // Loop over shared dimension.\\n    for (var t = 0; t < num_tiles; t = t + 1) {\\n      // Load one tile of A into local memory.\\n      for (var inputRow = localRow; inputRow < \").concat(h, \"; inputRow = inputRow + \").concat(t[1], \") {\\n        for (var inputCol = localCol; inputCol < \").concat(u, \"; inputCol = inputCol + \").concat(t[0], \") {\\n          \").concat(Nu(o, n), \"\\n        }\\n      }\\n      // Load one tile of B into local memory.\\n      for (var inputRow = localRow; inputRow < \").concat(i, \"; inputRow = inputRow + \").concat(t[1], \") {\\n            for (var inputCol = localCol; inputCol < \").concat(m, \"; inputCol = inputCol + \").concat(t[0], \") {\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\n            kStart + inputRow,\\n            globalColStart + inputCol\").concat(n ? \", batchIndices\" : \"\", \");\\n        }\\n      }\\n      kStart = kStart + tileInner;\\n      workgroupBarrier();\\n\\n      // Compute acc values for a single thread.\\n      var BCached : array<\").concat(r, \", colPerThread>;\\n      for (var k = 0; k < tileInner; k = k + 1) {\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\n          BCached[inner] = mm_Bsub[k][localCol + inner * \").concat(t[0], \"];\\n        }\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n          let ACached = \").concat(o ? \"mm_Asub[k][localRow + innerRow * \".concat(t[1], \"];\") : \"mm_Asub[localRow + innerRow * \".concat(t[1], \"][k];\"), \"\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\n                ACached * BCached[innerCol];\\n          }\\n        }\\n      }\\n      workgroupBarrier();\\n    }\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      let gRow = globalRowStart + localRow + innerRow * \").concat(t[1], \";\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n        let gCol = globalColStart + localCol + innerCol * \").concat(t[0], \";\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\n      }\\n    }\\n    \") : \"\\nlet tileRow = i32(localId.y) * rowPerThread;\\nlet tileCol = i32(localId.x) * colPerThread;\\n\\nlet globalRow = i32(globalId.y) * rowPerThread;\\nlet globalCol = i32(globalId.x) * colPerThread;\\nlet globalRowStart = i32(workgroupId.y) * \".concat(p, \";\\n\\nlet tileRowA = i32(localId.y) * \").concat(_, \";\\nlet tileColA = i32(localId.x) * \").concat(y, \";\\nlet tileRowB = i32(localId.y) * \").concat(g, \";\\n// Loop over shared dimension.\\nfor (var t = 0; t < num_tiles; t = t + 1) {\\n  // Load one tile of A into local memory.\\n  for (var innerRow = 0; innerRow < \").concat(_, \"; innerRow = innerRow + 1) {\\n    for (var innerCol = 0; innerCol < \").concat(y, \"; innerCol = innerCol + 1) {\\n      let inputRow = tileRowA + innerRow;\\n      let inputCol = tileColA + innerCol;\\n      \").concat(Nu(o, n), \"\\n    }\\n  }\\n\\n  // Load one tile of B into local memory.\\n  for (var innerRow = 0; innerRow < \").concat(g, \"; innerRow = innerRow + 1) {\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n      let inputRow = tileRowB + innerRow;\\n      let inputCol = tileCol + innerCol;\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\n        kStart + inputRow,\\n        globalCol + innerCol\").concat(n ? \", batchIndices\" : \"\", \");\\n    }\\n  }\\n  kStart = kStart + tileInner;\\n  workgroupBarrier();\\n\\n  // Compute acc values for a single thread.\\n  var BCached : array<\").concat(r, \", colPerThread>;\\n  for (var k = 0; k < tileInner; k = k + 1) {\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\n    }\\n\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n      \").concat(sf(o), \"\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\n      }\\n    }\\n  }\\n\\n  workgroupBarrier();\\n}\\n\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\n        acc[innerRow][innerCol]);\\n  }\\n}\\n\");\n        return \"\\n  var<workgroup> mm_Asub : array<array<\".concat(r, \", \").concat(u, \">, \").concat(h, \">;\\n  var<workgroup> mm_Bsub : array<array<\").concat(r, \", \").concat(m, \">, \").concat(i, \">;\\n  const rowPerThread = \").concat(e1[1], \";\\n  const colPerThread = \").concat(e1[0], \";\\n  const tileInner = \").concat(i, \";\\n\\n@compute @workgroup_size(\").concat(t[0], \", \").concat(t[1], \", \").concat(t[2], \")\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\n    let batch = \").concat(a ? \"0\" : \"i32(globalId.z)\", \";\\n    \").concat(n ? \"let batchIndices = \".concat(n.offsetToIndices(\"u32(batch)\"), \";\") : \"\", \"\\n    let num_tiles = \").concat(a ? \"\".concat(Math.ceil(d / i)) : \"(uniforms.dim_inner - 1) / tileInner + 1\", \";\\n    var kStart = \").concat(a ? \"i32(globalId.z) * \".concat(d) : \"0\", \";\\n\\n    var acc : array<array<\").concat(r, \", colPerThread>, rowPerThread>;\\n    \").concat(x, \"\\n  }\\n\");\n    }, uf = function(e1, t, r, n) {\n        let o = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1;\n        let [i, a, d, l] = n, p = _e(n[0].type.tensor);\n        return \"\\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: \".concat(i.type.indices, \") -> \").concat(Ae(e1, p), \" {\\n      var value = \").concat(Ae(e1, p), \"(0.0);\\n      let col = colIn * \").concat(e1, \";\\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\\n      {\\n        var aIndices: \").concat(a.type.indices, \";\\n        \").concat(Jt(\"aIndices\", a, a.rank - 2, i.rank, \"batchIndices\"), \"\\n        \").concat(a.indicesSet(\"aIndices\", a.rank - 2, \"u32(row)\"), \"\\n        \").concat(a.indicesSet(\"aIndices\", a.rank - 1, \"u32(colIn)\"), \"\\n        value = \").concat(a.getByIndices(\"aIndices\"), \";\\n      }\\n      return value;\\n    }\\n\\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: \").concat(i.type.indices, \") -> \").concat(Ae(e1, p), \" {\\n      var value = \").concat(Ae(e1, p), \"(0.0);\\n      let col = colIn * \").concat(e1, \";\\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\\n      {\\n        var bIndices: \").concat(d.type.indices, \";\\n        \").concat(Jt(\"bIndices\", d, d.rank - 2, i.rank, \"batchIndices\"), \"\\n        \").concat(d.indicesSet(\"bIndices\", d.rank - 2, \"u32(row)\"), \"\\n        \").concat(d.indicesSet(\"bIndices\", d.rank - 1, \"u32(colIn)\"), \"\\n        value = \").concat(d.getByIndices(\"bIndices\"), \";\\n      }\\n      return value;\\n    }\\n\\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: \").concat(Ae(e1, p), \") {\\n      let col = colIn * \").concat(e1, \";\\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\\n        var value = valueIn;\\n        let coords = vec3<i32>(batch, row, colIn);\\n        \").concat(t ? \"value = value + \".concat(o ? \"bias[colIn]\" : \"\".concat(Ae(e1, p), \"(bias[row])\"), \";\") : \"\", \"\\n        \").concat(r, \"\\n        \").concat(l.setByIndices(\"vec3<u32>(coords)\", \"value\"), \"\\n      }\\n    }\\n    \");\n    }, er = function(e1, t, r, n) {\n        let o = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1, i = arguments.length > 5 ? arguments[5] : void 0;\n        let a = e1[0].dims, d = e1[1].dims, l = a.slice(0, -2), p = d.slice(0, -2), m = n ? n.slice(0, -2) : r.slice(0, -2), u = C.size(m), h = a[a.length - 2], _ = a[a.length - 1], y = d[d.length - 1], g = _ % 4 === 0 && y % 4 === 0, x = h <= 8 ? [\n            4,\n            1,\n            1\n        ] : [\n            4,\n            4,\n            1\n        ], $ = [\n            8,\n            8,\n            1\n        ], v = [\n            Math.ceil(y / $[0] / x[0]),\n            Math.ceil(h / $[1] / x[1]),\n            Math.ceil(u / $[2] / x[2])\n        ], S = g ? 4 : 1, T = [\n            ...l,\n            h,\n            _ / S\n        ], A = T.length, k = [\n            ...p,\n            _,\n            y / S\n        ], P = k.length, D = [\n            u,\n            h,\n            y / S\n        ], R = [\n            {\n                type: 6,\n                data: h\n            },\n            {\n                type: 6,\n                data: y\n            },\n            {\n                type: 6,\n                data: _\n            }\n        ];\n        Ke(t, R), R.push(...N(m, T, k));\n        let G = [\n            \"rank\",\n            \"rank\"\n        ], K = e1.length > 2;\n        K && (R.push(...N(e1[2].dims)), G.push(\"rank\")), R.push(...N(D));\n        let j = (V)=>{\n            let Q = m.length, se = Lr(\"batchDims\", e1[0].dataType, Q, 1), Y = _e(e1[0].dataType), ee = E(\"a\", e1[0].dataType, A, S), J = E(\"b\", e1[1].dataType, P, S), ne = M(\"result\", e1[0].dataType, D.length, S), be = [\n                ee,\n                J\n            ];\n            if (K) {\n                let q = o ? S : 1;\n                be.push(E(\"bias\", e1[2].dataType, e1[2].dims.length, q));\n            }\n            let Oe = [\n                {\n                    name: \"dim_a_outer\",\n                    type: \"i32\"\n                },\n                {\n                    name: \"dim_b_outer\",\n                    type: \"i32\"\n                },\n                {\n                    name: \"dim_inner\",\n                    type: \"i32\"\n                }\n            ];\n            je(t, Oe);\n            let $e = _e(ne.type.tensor), le = qe(t, ne.type.value, $e), W = uf(S, K, le, [\n                se,\n                ee,\n                J,\n                ne\n            ], o);\n            return \"\\n  \".concat(V.registerUniforms(Oe).registerInternalVariables(se).declareVariables(...be, ne), \"\\n  \").concat(W, \"\\n  \").concat(g ? ho(x, $, Y, se) : go(x, $, Y, se), \"\\n                   \");\n        };\n        return {\n            name: \"MatMul\",\n            shaderCache: {\n                hint: \"\".concat(x, \";\").concat(t.activation, \";\").concat(g, \";\").concat(o),\n                inputDependencies: G\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: i ? i(r) : r,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: v[0],\n                        y: v[1],\n                        z: v[2]\n                    },\n                    programUniforms: R\n                }),\n            getShaderSource: j\n        };\n    };\n});\nvar df, Vu, Wu = U(()=>{\n    \"use strict\";\n    te();\n    et();\n    ae();\n    yt();\n    Yr();\n    Uu();\n    Xr();\n    df = function(e1, t, r, n) {\n        let o = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1, i = arguments.length > 5 ? arguments[5] : void 0, a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : 4, d = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : 4, l = arguments.length > 8 && arguments[8] !== void 0 ? arguments[8] : 4, p = arguments.length > 9 && arguments[9] !== void 0 ? arguments[9] : \"f32\";\n        let m = (G)=>{\n            switch(G){\n                case 1:\n                    return \"resData = x[xIndex];\";\n                case 3:\n                    return \"resData = vec3<\".concat(p, \">(x[xIndex], x[xIndex + 1], x[xIndex + 2]);\");\n                case 4:\n                    return \"resData = x[xIndex / 4];\";\n                default:\n                    throw new Error(\"innerElementSize \".concat(G, \" is not supported.\"));\n            }\n        }, u = (G)=>{\n            switch(G){\n                case 1:\n                    return \"return w[row * i32(uniforms.w_shape[3]) + colIn];\";\n                case 4:\n                    return \"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];\";\n                default:\n                    throw new Error(\"innerElementSize \".concat(G, \" is not supported.\"));\n            }\n        }, h = e1 ? \"\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\n    \" : \"\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\n    \", _ = e1 ? \"\\n    let coords = vec4<i32>(\\n      batch,\\n      row / outWidth,\\n      row % outWidth,\\n      col);\\n    \" : \"\\n    let coords = vec4<i32>(\\n      batch,\\n      row,\\n      col / outWidth,\\n      col % outWidth);\\n    \", y = e1 ? \"i32(uniforms.x_shape[1])\" : \"i32(uniforms.x_shape[2])\", g = e1 ? \"i32(uniforms.x_shape[2])\" : \"i32(uniforms.x_shape[3])\", x = e1 ? \"row\" : \"col\", $ = e1 ? \"col\" : \"row\", v = \"\\n    let inChannels = i32(uniforms.w_shape[2]);\\n    let outWidth = \".concat(e1 ? \"i32(uniforms.result_shape[2])\" : \"i32(uniforms.result_shape[3])\", \";\\n    let outRow = \").concat(x, \" / outWidth;\\n    let outCol = \").concat(x, \" % outWidth;\\n\\n    let WRow = \").concat($, \" / (i32(uniforms.w_shape[1]) * inChannels);\\n    let WCol = \").concat($, \" / inChannels % i32(uniforms.w_shape[1]);\\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\\n    let xCh = \").concat($, \" % inChannels;\\n    var resData = \").concat(Ae(a, p), \"(0.0);\\n    // The bounds checking is always needed since we use it to pad zero for\\n    // the 'same' padding type.\\n    if (xRow >= 0 && xRow < \").concat(y, \" && xCol >= 0 && xCol < \").concat(g, \") {\\n      \").concat(h, \"\\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\\n      \").concat(m(a), \"\\n    }\\n    return resData;\"), S = e1 ? t && n ? \"\\n    let col = colIn * \".concat(a, \";\\n    \").concat(v) : \"\\n    let col = colIn * \".concat(a, \";\\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\\n      \").concat(v, \"\\n    }\\n    return \").concat(Ae(a, p), \"(0.0);\") : n && r ? \"\\n    let col = colIn * \".concat(a, \";\\n    \").concat(v) : \"\\n    let col = colIn * \".concat(a, \";\\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\\n      \").concat(v, \"\\n    }\\n    return \").concat(Ae(a, p), \"(0.0);\"), T = e1 ? n && r ? u(d) : \"\\n    let col = colIn * \".concat(d, \";\\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\\n      \").concat(u(d), \"\\n    }\\n    return \").concat(Ae(d, p), \"(0.0);\") : \"\\n    let col = colIn * \".concat(d, \";\\n    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {\\n      \").concat(u(d), \"\\n    }\\n    return \").concat(Ae(d, p), \"(0.0);\"), A = Ae(l, p), k = e1 ? Ae(a, p) : Ae(d, p), P = e1 ? Ae(d, p) : Ae(a, p), D = qe(i, A, p);\n        return \"\\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> \".concat(k, \" {\\n      \").concat(e1 ? S : T, \"\\n    }\\n\\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> \").concat(P, \" {\\n      \").concat(e1 ? T : S, \"\\n    }\\n\\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : \").concat(A, \") {\\n      let col = colIn * \").concat(l, \";\\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\\n      {\\n      var value = valueIn;\\n      let outWidth = \").concat(e1 ? \"i32(uniforms.result_shape[2])\" : \"i32(uniforms.result_shape[3])\", \";\\n      \").concat(_, \"\\n      \").concat(Mu(o), \"\\n      \").concat(D, \"\\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\n      }\\n    }\");\n    }, Vu = (e1, t, r, n, o, i, a, d, l)=>{\n        let p = t.format === \"NHWC\", m = p ? e1[0].dims[3] : e1[0].dims[1], u = r[0], h = p ? r[2] : r[3], _ = p ? r[1] : r[2], y = p ? r[3] : r[1], g = p && (m % 4 === 0 || m % 3 === 0) && y % 4 === 0, x = p ? y : h * _, $ = p ? h * _ : y, v = [\n            8,\n            8,\n            1\n        ], S = n <= 8 ? [\n            4,\n            1,\n            1\n        ] : [\n            4,\n            4,\n            1\n        ], T = [\n            Math.ceil(x / v[0] / S[0]),\n            Math.ceil($ / v[1] / S[1]),\n            Math.ceil(u / v[2] / S[2])\n        ];\n        ue(\"verbose\", ()=>\"[conv2d_mm_webgpu] dispatch = \".concat(T));\n        let A = g ? p && m % 4 !== 0 ? 3 : 4 : 1, k = v[1] * S[1], P = v[0] * S[0], D = Math.max(v[0] * A, v[1]), R = n % k === 0, G = o % P === 0, K = i % D === 0, j = g ? [\n            A,\n            4,\n            4\n        ] : [\n            1,\n            1,\n            1\n        ], V = [\n            {\n                type: 6,\n                data: n\n            },\n            {\n                type: 6,\n                data: o\n            },\n            {\n                type: 6,\n                data: i\n            },\n            {\n                type: 6,\n                data: [\n                    t.pads[0],\n                    t.pads[1]\n                ]\n            },\n            {\n                type: 6,\n                data: t.strides\n            },\n            {\n                type: 6,\n                data: t.dilations\n            }\n        ];\n        Ke(t, V), V.push(...N(e1[0].dims, e1[1].dims));\n        let Q = [\n            \"rank\",\n            \"rank\"\n        ];\n        a && (V.push(...N(e1[2].dims)), Q.push(\"rank\")), V.push(...N(r));\n        let se = (Y)=>{\n            let ee = [\n                {\n                    name: \"dim_a_outer\",\n                    type: \"i32\"\n                },\n                {\n                    name: \"dim_b_outer\",\n                    type: \"i32\"\n                },\n                {\n                    name: \"dim_inner\",\n                    type: \"i32\"\n                },\n                {\n                    name: \"pad\",\n                    type: \"i32\",\n                    length: 2\n                },\n                {\n                    name: \"stride\",\n                    type: \"i32\",\n                    length: 2\n                },\n                {\n                    name: \"dilation\",\n                    type: \"i32\",\n                    length: 2\n                }\n            ];\n            je(t, ee);\n            let J = g ? 4 : 1, ne = _e(e1[0].dataType), be = \"\\n      fn setOutputAtIndex(flatIndex : i32, value : \".concat(g ? \"vec4<\".concat(ne, \">\") : ne, \") {\\n        result[flatIndex] = \").concat(g ? \"vec4<\".concat(ne, \">\") : ne, \"(value);\\n      }\\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : \").concat(g ? \"vec4<\".concat(ne, \">\") : ne, \") {\\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\\n        setOutputAtIndex(flatIndex \").concat(g ? \"/ 4\" : \"\", \", value);\\n      }\"), Oe = E(\"x\", e1[0].dataType, e1[0].dims.length, A === 3 ? 1 : A), $e = E(\"w\", e1[1].dataType, e1[1].dims.length, J), le = [\n                Oe,\n                $e\n            ], W = M(\"result\", e1[0].dataType, r.length, J);\n            if (a) {\n                let q = E(\"bias\", e1[2].dataType, e1[2].dims.length, J);\n                le.push(q), be += \"\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> \".concat(g ? \"vec4<\".concat(ne, \">\") : ne, \" {\\n          return bias[coords.\").concat(p ? \"w\" : \"y\").concat(g ? \"/ 4\" : \"\", \"];\\n        }\");\n            }\n            return \"\\n        \".concat(Ru(\"uniforms.result_strides\"), \"\\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\\n        \").concat(Y.registerUniforms(ee).declareVariables(...le, W), \"\\n        \").concat(be, \"\\n        \").concat(df(p, R, G, K, a, t, j[0], j[1], j[2], ne), \"\\n        \").concat(g ? ho(S, v, ne, void 0, !p, D) : go(S, v, ne, void 0, !p, D, !1, void 0, d));\n        };\n        return {\n            name: \"Conv2DMatMul\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey, \";\").concat(A, \";\").concat(g, \";\").concat(R, \";\").concat(G, \";\").concat(K, \";\").concat(k, \";\").concat(P, \";\").concat(D),\n                inputDependencies: Q\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: l ? l(r) : r,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: T[0],\n                        y: T[1],\n                        z: T[2]\n                    },\n                    programUniforms: V\n                }),\n            getShaderSource: se\n        };\n    };\n});\nvar lf, Lu, Jr, cf, Gu, pf, Hu, Fu, qu = U(()=>{\n    \"use strict\";\n    te();\n    et();\n    oe();\n    ae();\n    yt();\n    Yr();\n    lf = (e1)=>{\n        let t = 1;\n        for(let r = 0; r < e1.length; r++)t *= e1[r];\n        return t;\n    }, Lu = (e1)=>typeof e1 == \"number\" ? [\n            e1,\n            e1,\n            e1\n        ] : e1, Jr = (e1, t)=>t <= 1 ? e1 : e1 + (e1 - 1) * (t - 1), cf = function(e1, t, r) {\n        let n = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;\n        let o = Jr(t, n);\n        return Math.floor((e1[0] * (r - 1) - r + o) / 2);\n    }, Gu = (e1, t, r, n, o)=>{\n        o == null && (o = cf(e1, t[0], n[0]));\n        let i = [\n            0,\n            0,\n            0,\n            r\n        ];\n        for(let a = 0; a < 3; a++)e1[a] + 2 * o >= t[a] && (i[a] = Math.trunc((e1[a] - t[a] + 2 * o) / n[a] + 1));\n        return i;\n    }, pf = (e1, t, r, n, o, i, a, d, l, p)=>{\n        let m, u, h, _;\n        if (e1 === \"VALID\" && (e1 = 0), typeof e1 == \"number\") {\n            m = {\n                top: e1,\n                bottom: e1,\n                left: e1,\n                right: e1,\n                front: e1,\n                back: e1\n            };\n            let y = Gu([\n                t,\n                r,\n                n,\n                1\n            ], [\n                d,\n                l,\n                p\n            ], 1, [\n                o,\n                i,\n                a\n            ], e1);\n            u = y[0], h = y[1], _ = y[2];\n        } else if (Array.isArray(e1)) {\n            if (!e1.every((g, x, $)=>g === $[0])) throw Error(\"Unsupported padding parameter: \".concat(e1));\n            m = {\n                top: e1[0],\n                bottom: e1[1],\n                left: e1[2],\n                right: e1[3],\n                front: e1[4],\n                back: e1[5]\n            };\n            let y = Gu([\n                t,\n                r,\n                n,\n                1\n            ], [\n                d,\n                l,\n                p\n            ], 1, [\n                o,\n                i,\n                a\n            ], e1[0]);\n            u = y[0], h = y[1], _ = y[2];\n        } else if (e1 === \"SAME_UPPER\") {\n            u = Math.ceil(t / o), h = Math.ceil(r / i), _ = Math.ceil(n / a);\n            let y = (u - 1) * o + d - t, g = (h - 1) * i + l - r, x = (_ - 1) * a + p - n, $ = Math.floor(y / 2), v = y - $, S = Math.floor(g / 2), T = g - S, A = Math.floor(x / 2), k = x - A;\n            m = {\n                top: S,\n                bottom: T,\n                left: A,\n                right: k,\n                front: $,\n                back: v\n            };\n        } else throw Error(\"Unknown padding parameter: \".concat(e1));\n        return {\n            padInfo: m,\n            outDepth: u,\n            outHeight: h,\n            outWidth: _\n        };\n    }, Hu = function(e1, t, r, n, o) {\n        let i = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !1, a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : \"channelsLast\";\n        let d, l, p, m, u;\n        if (a === \"channelsLast\") [d, l, p, m, u] = e1;\n        else if (a === \"channelsFirst\") [d, u, l, p, m] = e1;\n        else throw new Error(\"Unknown dataFormat \".concat(a));\n        let [h, , _, y, g] = t, [x, $, v] = Lu(r), [S, T, A] = Lu(n), k = Jr(_, S), P = Jr(y, T), D = Jr(g, A), { padInfo: R, outDepth: G, outHeight: K, outWidth: j } = pf(o, l, p, m, x, $, v, k, P, D), V = i ? h * u : h, Q = [\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n        return a === \"channelsFirst\" ? Q = [\n            d,\n            V,\n            G,\n            K,\n            j\n        ] : a === \"channelsLast\" && (Q = [\n            d,\n            G,\n            K,\n            j,\n            V\n        ]), {\n            batchSize: d,\n            dataFormat: a,\n            inDepth: l,\n            inHeight: p,\n            inWidth: m,\n            inChannels: u,\n            outDepth: G,\n            outHeight: K,\n            outWidth: j,\n            outChannels: V,\n            padInfo: R,\n            strideDepth: x,\n            strideHeight: $,\n            strideWidth: v,\n            filterDepth: _,\n            filterHeight: y,\n            filterWidth: g,\n            effectiveFilterDepth: k,\n            effectiveFilterHeight: P,\n            effectiveFilterWidth: D,\n            dilationDepth: S,\n            dilationHeight: T,\n            dilationWidth: A,\n            inShape: e1,\n            outShape: Q,\n            filterShape: t\n        };\n    }, Fu = (e1, t, r, n, o, i)=>{\n        let a = i === \"channelsLast\", d = a ? e1[0].dims[3] : e1[0].dims[1], l = !1, p = [\n            64,\n            1,\n            1\n        ], m = {\n            x: r.map((v, S)=>S)\n        }, u = [\n            Math.ceil(lf(m.x.map((v)=>r[v])) / p[0]),\n            1,\n            1\n        ];\n        ue(\"verbose\", ()=>\"[conv3d_naive_webgpu] dispatch = \".concat(u));\n        let h = l ? a && d % 4 !== 0 ? 3 : 4 : 1, _ = C.size(r), y = [\n            {\n                type: 12,\n                data: _\n            },\n            {\n                type: 12,\n                data: n\n            },\n            {\n                type: 12,\n                data: o\n            },\n            {\n                type: 12,\n                data: t.strides\n            },\n            {\n                type: 12,\n                data: t.dilations\n            }\n        ];\n        Ke(t, y), y.push(...N(e1[0].dims, e1[1].dims));\n        let g = [\n            \"rank\",\n            \"rank\"\n        ], x = e1.length === 3;\n        x && (y.push(...N(e1[2].dims)), g.push(\"rank\")), y.push(...N(r));\n        let $ = (v)=>{\n            let S = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"filter_dims\",\n                    type: \"u32\",\n                    length: n.length\n                },\n                {\n                    name: \"pads\",\n                    type: \"u32\",\n                    length: o.length\n                },\n                {\n                    name: \"strides\",\n                    type: \"u32\",\n                    length: t.strides.length\n                },\n                {\n                    name: \"dilations\",\n                    type: \"u32\",\n                    length: t.dilations.length\n                }\n            ];\n            je(t, S);\n            let T = l ? 4 : 1, A = _e(e1[0].dataType), k = E(\"x\", e1[0].dataType, e1[0].dims.length, h === 3 ? 1 : h), P = E(\"W\", e1[1].dataType, e1[1].dims.length, T), D = [\n                k,\n                P\n            ], R = M(\"result\", e1[0].dataType, r.length, T), G = \"\";\n            if (x) {\n                let V = E(\"bias\", e1[2].dataType, e1[2].dims.length, T);\n                D.push(V), G += \"\\n        fn getBiasByOutputCoords(coords : array<u32, 5>) -> \".concat(l ? \"vec4<\".concat(A, \">\") : A, \" {\\n          return bias[\").concat(a ? F(\"coords\", 4, 5) : F(\"coords\", 1, 5)).concat(l ? \"/ 4\" : \"\", \"];\\n        }\");\n            }\n            let K = Ae(h, A), j = qe(t, K, A);\n            return \"\\n            \".concat(G, \"\\n            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\\n              return \").concat(k.getByIndices(\"aIndices\"), \";\\n            }\\n            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\\n              return \").concat(P.getByIndices(\"aIndices\"), \";\\n            }\\n          \").concat(v.registerUniforms(S).declareVariables(...D, R), \"\\n          \").concat(v.mainStart(), \"\\n          \").concat(v.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n              let coords = \").concat(R.offsetToIndices(\"global_idx\"), \";\\n              let batch = \").concat(F(\"coords\", 0, k.rank), \";\\n              let d2 = \").concat(a ? F(\"coords\", k.rank - 1, k.rank) : F(\"coords\", 1, k.rank), \";\\n              let xFRCCorner = vec3<u32>(\").concat(a ? F(\"coords\", 1, k.rank) : F(\"coords\", 2, k.rank), \",\\n              \").concat(a ? F(\"coords\", 2, k.rank) : F(\"coords\", 3, k.rank), \",\\n              \").concat(a ? F(\"coords\", 3, k.rank) : F(\"coords\", 4, k.rank), \") * uniforms.strides - uniforms.pads;\\n              let xFCorner = xFRCCorner.x;\\n              let xRCorner = xFRCCorner.y;\\n              let xCCorner = xFRCCorner.z;\\n              let xShapeY = \").concat(a ? F(\"uniforms.x_shape\", 1, k.rank) : F(\"uniforms.x_shape\", 2, k.rank), \";\\n              let xShapeZ = \").concat(a ? F(\"uniforms.x_shape\", 2, k.rank) : F(\"uniforms.x_shape\", 3, k.rank), \";\\n              let xShapeW = \").concat(a ? F(\"uniforms.x_shape\", 3, k.rank) : F(\"uniforms.x_shape\", 4, k.rank), \";\\n              let xShapeU = \").concat(a ? F(\"uniforms.x_shape\", 4, k.rank) : F(\"uniforms.x_shape\", 1, k.rank), \";\\n              let inputDepthNearestVec4 = (xShapeU / 4) * 4;\\n              let inputDepthVec4Remainder = xShapeU % 4;\\n\\n              var value = 0.0;\\n              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {\\n                let xF = xFCorner + wF * uniforms.dilations[0];\\n                if (xF < 0 || xF >= xShapeY) {\\n                  continue;\\n                }\\n\\n                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {\\n                  let xR = xRCorner + wR * uniforms.dilations[1];\\n                  if (xR < 0 || xR >= xShapeZ) {\\n                    continue;\\n                  }\\n\\n                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {\\n                    let xC = xCCorner + wC * uniforms.dilations[2];\\n                    if (xC < 0 || xC >= xShapeW) {\\n                      continue;\\n                    }\\n\\n                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {\\n                      \").concat(a ? \"let xValues = vec4<f32>(\\n                               getX(batch, xF, xR, xC, d1),\\n                               getX(batch, xF, xR, xC, d1 + 1),\\n                               getX(batch, xF, xR, xC, d1 + 2),\\n                               getX(batch, xF, xR, xC, d1 + 3));\\n                            \" : \"let xValues = vec4<f32>(\\n                               getX(batch, d1, xF, xR, xC),\\n                               getX(batch, d1 + 1, xF, xR, xC),\\n                               getX(batch, d1 + 2, xF, xR, xC),\\n                               getX(batch, d1 + 3, xF, xR, xC));\\n                            \", \"\\n                            let wValues = vec4<f32>(\\n                              getW(d2, d1, wF, wR, wC),\\n                              getW(d2, d1 + 1, wF, wR, wC),\\n                              getW(d2, d1 + 2, wF, wR, wC),\\n                              getW(d2, d1 + 3, wF, wR, wC));\\n                      value += dot(xValues, wValues);\\n                    }\\n                    if (inputDepthVec4Remainder == 1) {\\n                        \").concat(a ? \"value += getX(batch, xF, xR, xC, inputDepthNearestVec4)\\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);\" : \"value += getX(batch, inputDepthNearestVec4, xF, xR, xC)\\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);\", \"\\n                    } else if (inputDepthVec4Remainder == 2) {\\n                      \").concat(a ? \"let xValues = vec2<f32>(\\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));\\n                      \" : \"let xValues = vec2<f32>(\\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));\\n                    \", \"\\n                    let wValues = vec2<f32>(\\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));\\n                      value += dot(xValues, wValues);\\n                    } else if (inputDepthVec4Remainder == 3) {\\n                      \").concat(a ? \"let xValues = vec3<f32>(\\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));\\n                      \" : \"let xValues = vec3<f32>(\\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),\\n                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));\\n                    \", \"\\n                    let wValues = vec3<f32>(\\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),\\n                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));\\n                      value += dot(xValues, wValues);\\n                    }\\n                  }\\n                }\\n              }\\n              \").concat(x ? \"value = value + getBiasByOutputCoords(coords)\" : \"\", \";\\n              \").concat(j, \"\\n              result[global_idx] = f32(value);\\n          }\");\n        };\n        return {\n            name: \"Conv3DNaive\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey, \";\").concat(a, \";\").concat(h, \";\").concat(x),\n                inputDependencies: g\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: r,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: u[0],\n                        y: u[1],\n                        z: u[2]\n                    },\n                    programUniforms: y\n                }),\n            getShaderSource: $\n        };\n    };\n});\nvar Ku, ju, Yu = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    yt();\n    Ku = (e1, t, r, n)=>{\n        let o = e1.length > 2, i = o ? \"value += b[output_channel];\" : \"\", a = e1[0].dims, d = e1[1].dims, l = t.format === \"NHWC\", p = l ? r[3] : r[1], m = p / t.group, u = l && m >= 4 ? me(p) : 1, h = C.size(r) / u, _ = [\n            {\n                type: 12,\n                data: h\n            },\n            {\n                type: 12,\n                data: t.dilations\n            },\n            {\n                type: 12,\n                data: [\n                    t.strides[0],\n                    t.strides[1]\n                ]\n            },\n            {\n                type: 12,\n                data: [\n                    t.pads[0],\n                    t.pads[1]\n                ]\n            },\n            {\n                type: 12,\n                data: m\n            }\n        ];\n        Ke(t, _), _.push(...N(a, [\n            d[0],\n            d[1],\n            d[2],\n            d[3] / u\n        ]));\n        let y = o ? [\n            \"rank\",\n            \"rank\",\n            \"rank\"\n        ] : [\n            \"rank\",\n            \"rank\"\n        ];\n        _.push(...N([\n            r[0],\n            r[1],\n            r[2],\n            r[3] / u\n        ]));\n        let g = (x)=>{\n            let $ = M(\"output\", e1[0].dataType, r.length, u), v = _e($.type.tensor), S = qe(t, $.type.value, v), T = E(\"x\", e1[0].dataType, a.length), A = E(\"w\", e1[1].dataType, d.length, u), k = [\n                T,\n                A\n            ];\n            o && k.push(E(\"b\", e1[2].dataType, e1[2].dims, u));\n            let P = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"dilations\",\n                    type: \"u32\",\n                    length: t.dilations.length\n                },\n                {\n                    name: \"strides\",\n                    type: \"u32\",\n                    length: 2\n                },\n                {\n                    name: \"pads\",\n                    type: \"u32\",\n                    length: 2\n                },\n                {\n                    name: \"output_channels_per_group\",\n                    type: \"u32\"\n                }\n            ];\n            je(t, P);\n            let D = l ? \"\\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {\\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\\n\\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {\\n          continue;\\n        }\\n\\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {\\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {\\n            continue;\\n          }\\n\\n          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {\\n            let input_channel = in_channel_offset + wInChannel;\\n            let xVal = \".concat(T.get(\"batch\", \"xHeight\", \"xWidth\", \"input_channel\"), \";\\n            let wVal = \").concat(A.get(\"wHeight\", \"wWidth\", \"wInChannel\", \"output_channel\"), \";\\n            value += xVal * wVal;\\n          }\\n        }\\n      }\\n      \") : \"\\n      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\\n        let input_channel = in_channel_offset + wInChannel;\\n        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\\n          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\\n\\n          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {\\n            continue;\\n          }\\n\\n          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\\n            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\\n            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {\\n              continue;\\n            }\\n\\n            let xVal = \".concat(T.get(\"batch\", \"input_channel\", \"xHeight\", \"xWidth\"), \";\\n            let wVal = \").concat(A.get(\"output_channel\", \"wInChannel\", \"wHeight\", \"wWidth\"), \";\\n            value += xVal * wVal;\\n          }\\n        }\\n      }\\n      \");\n            return \"\\n  \".concat(x.registerUniforms(P).declareVariables(...k, $), \"\\n\\n  \").concat(x.mainStart(), \"\\n    \").concat(x.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n\\n    let outputIndices = \").concat($.offsetToIndices(\"global_idx\"), \";\\n    let batch: u32 = outputIndices[0];\\n    let output_channel: u32 = outputIndices[\").concat(l ? 3 : 1, \"];\\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[\").concat(l ? 1 : 2, \"], outputIndices[\").concat(l ? 2 : 3, \"]) * uniforms.strides - uniforms.pads;\\n    let group_id: u32 = output_channel * \").concat(u, \" / uniforms.output_channels_per_group;\\n    var in_channel_offset = group_id * uniforms.w_shape[\").concat(l ? 2 : 1, \"];\\n\\n    var value: \").concat($.type.value, \" = \").concat($.type.value, \"(0);\\n    \").concat(D, \"\\n    \").concat(i, \"\\n    \").concat(S, \"\\n    \").concat($.setByOffset(\"global_idx\", \"value\"), \"\\n  }\");\n        };\n        return {\n            name: \"GroupedConv\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey, \"_\").concat(u),\n                inputDependencies: y\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: n ? n(r) : r,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(h / 64)\n                    },\n                    programUniforms: _\n                }),\n            getShaderSource: g\n        };\n    }, ju = (e1, t, r, n)=>{\n        let o = e1.length > 2, i = me(r[3]), a = me(r[2]), d = C.size(r) / i / a, l = [\n            e1[0].dims[0],\n            e1[0].dims[1],\n            e1[0].dims[2],\n            e1[0].dims[3] / i\n        ], p = [\n            e1[1].dims[0],\n            e1[1].dims[1],\n            e1[1].dims[2],\n            e1[1].dims[3] / i\n        ], m = [\n            r[0],\n            r[1],\n            r[2],\n            r[3] / i\n        ], u = [\n            {\n                type: 12,\n                data: d\n            },\n            {\n                type: 6,\n                data: [\n                    t.strides[0],\n                    t.strides[1]\n                ]\n            },\n            {\n                type: 6,\n                data: [\n                    t.pads[0],\n                    t.pads[1]\n                ]\n            }\n        ];\n        Ke(t, u), u.push(...N(l, p, m));\n        let h = (a - 1) * t.strides[1] + p[1], _ = (y)=>{\n            let g = M(\"output\", e1[0].dataType, m.length, i), x = _e(g.type.tensor), $ = qe(t, g.type.value, x), v = E(\"x\", e1[0].dataType, l.length, i), S = E(\"w\", e1[1].dataType, p.length, i), T = [\n                v,\n                S\n            ];\n            o && T.push(E(\"b\", e1[2].dataType, e1[2].dims, i));\n            let A = o ? \"value += b[output_channel];\" : \"\", k = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"strides\",\n                    type: \"i32\",\n                    length: 2\n                },\n                {\n                    name: \"pads\",\n                    type: \"i32\",\n                    length: 2\n                }\n            ];\n            return je(t, k), \"\\n  \".concat(y.registerUniforms(k).declareVariables(...T, g), \"\\n  \").concat(y.mainStart(), \"\\n    \").concat(y.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n    let width0 = uniforms.output_shape[3];\\n    let output_channel = global_idx % width0;\\n    var index1 = global_idx / width0;\\n    let width1 = uniforms.output_shape[2] / \").concat(a, \"u;\\n    let col = (index1 % width1) * \").concat(a, \"u;\\n    index1 = index1 / width1;\\n    let row = index1 % uniforms.output_shape[1];\\n    let batch = index1 / uniforms.output_shape[1];\\n\\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\\n\\n    var x_vals: array<\").concat(v.type.value, \", \").concat(h, \">;\\n    var values: array<\").concat(g.type.value, \", \").concat(a, \">;\\n    let input_channel = output_channel;\\n    // Use constant instead of uniform can give better performance for w's height/width.\\n    for (var w_height: u32 = 0u; w_height < \").concat(p[0], \"; w_height++) {\\n      let x_height = x_corner.x + i32(w_height);\\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\\n        for (var i = 0; i < \").concat(h, \"; i++) {\\n          let x_width = x_corner.y + i;\\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\\n            x_vals[i] = \").concat(v.get(\"batch\", \"u32(x_height)\", \"u32(x_width)\", \"input_channel\"), \";\\n          } else {\\n            x_vals[i] = \").concat(v.type.value, \"(0);\\n          }\\n        }\\n        for (var w_width: u32 = 0u; w_width < \").concat(p[1], \"; w_width++) {\\n          let w_val = \").concat(S.get(\"w_height\", \"w_width\", \"0\", \"output_channel\"), \";\\n          for (var i = 0u; i < \").concat(a, \"u; i++) {\\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\\n          }\\n        }\\n      }\\n    }\\n\\n    for (var i = 0u; i < \").concat(a, \"u; i++) {\\n      var value = values[i];\\n      \").concat(A, \"\\n      \").concat($, \"\\n      \").concat(g.set(\"batch\", \"row\", \"col + i\", \"output_channel\", \"value\"), \";\\n    }\\n  }\");\n        };\n        return {\n            name: \"GroupedConv-Vectorize\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey, \";\").concat(i, \";\").concat(a, \";\").concat(h, \";\").concat(p[0], \";\").concat(p[1]),\n                inputDependencies: o ? [\n                    \"rank\",\n                    \"rank\",\n                    \"type\"\n                ] : [\n                    \"rank\",\n                    \"rank\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: n ? n(r) : r,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(d / 64)\n                    },\n                    programUniforms: u\n                }),\n            getShaderSource: _\n        };\n    };\n});\nvar mf, bo, ff, yo, _o, Zu, hf, gf, wo, Qu = U(()=>{\n    \"use strict\";\n    oe();\n    Wu();\n    qu();\n    Xr();\n    Yu();\n    yt();\n    Qr();\n    dt();\n    mf = (e1, t, r, n, o, i)=>{\n        let a = e1[0], d = e1.slice(i ? 1 : 2, i ? 3 : 4), l = d.length, p = t[0], u = t.slice(2).map((y, g)=>y + (y - 1) * (r[g] - 1)), _ = d.map((y, g)=>y + n[g] + n[g + l]).map((y, g)=>Math.floor((y - u[g] + o[g]) / o[g]));\n        return _.splice(0, 0, a), _.splice(i ? 3 : 1, 0, p), _;\n    }, bo = [\n        2,\n        3,\n        1,\n        0\n    ], ff = (e1, t)=>{\n        if (!e1 || e1.length !== 2 && e1.length !== 3) throw new Error(\"Conv requires 2 or 3 inputs\");\n        if (e1[0].dims.length > 5) throw new Error(\"greater than 5D is not supported\");\n        if (e1[0].dims.length !== e1[1].dims.length) throw new Error(\"filter does not have same dimension as input\");\n        let r = e1[0].dims[t.format === \"NHWC\" ? e1[0].dims.length - 1 : 1], n = e1[1].dims[1] * t.group;\n        if (r !== n) throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");\n        if (e1.length === 3 && (e1[2].dims.length !== 1 || e1[1].dims[0] !== e1[2].dims[0])) throw new Error(\"invalid bias\");\n        let o = e1[0].dims.length - 2;\n        if (t.dilations.length !== o) throw new Error(\"dilations should be \".concat(o, \"D\"));\n        if (t.strides.length !== o) throw new Error(\"strides should be \".concat(o, \"D\"));\n        if (t.pads.length !== o * 2) throw new Error(\"pads should be \".concat(o * 2, \"D\"));\n        if (t.kernelShape.length !== 0 && t.kernelShape.length !== e1[1].dims.length - 2) throw new Error(\"invalid kernel shape\");\n    }, yo = (e1, t)=>{\n        let r = e1.kernelShape.slice();\n        r.length < t[1].dims.length - 2 && r.push(...Array(t[1].dims.length - 2 - r.length).fill(0));\n        for(let i = 2; i < t[1].dims.length; ++i)r[i - 2] === 0 && (r[i - 2] = t[1].dims[i]);\n        let n = e1.pads.slice();\n        At.adjustPadsBasedOnAutoPad(t[0].dims, e1.strides, e1.dilations, r, n, e1.format === \"NHWC\", e1.autoPad);\n        let o = Object.assign({}, e1);\n        return Object.assign(o, {\n            kernelShape: r,\n            pads: n\n        }), o;\n    }, _o = (e1)=>{\n        let t = jr(e1), r = e1.format, n = [\n            \"NOTSET\",\n            \"VALID\",\n            \"SAME_UPPER\",\n            \"SAME_LOWER\"\n        ][e1.auto_pad], o = e1.dilations, i = e1.group, a = e1.kernel_shape, d = e1.pads, l = e1.strides, p = e1.w_is_const();\n        return {\n            autoPad: n,\n            format: r,\n            dilations: o,\n            group: i,\n            kernelShape: a,\n            pads: d,\n            strides: l,\n            wIsConst: p,\n            ...t,\n            cacheKey: \"\".concat(e1.format, \";\").concat(t.activation, \";\")\n        };\n    }, Zu = (e1, t, r, n)=>{\n        let o = r.format === \"NHWC\", i = mf(t[0].dims, t[1].dims, r.dilations, r.pads, r.strides, o);\n        if (r.group !== 1) {\n            let k = [\n                t[0]\n            ];\n            if (o) {\n                var _e_kernelCustomData_wT;\n                let D = (_e_kernelCustomData_wT = e1.kernelCustomData.wT) !== null && _e_kernelCustomData_wT !== void 0 ? _e_kernelCustomData_wT : e1.compute(Pe(t[1], bo), {\n                    inputs: [\n                        1\n                    ],\n                    outputs: [\n                        r.wIsConst ? -2 : -1\n                    ]\n                })[0];\n                r.wIsConst && !e1.kernelCustomData.wT && (e1.kernelCustomData.wT = D), k.push(D);\n            } else k.push(t[1]);\n            t.length === 3 && k.push(t[2]), !e1.adapterInfo.isArchitecture(\"ampere\") && o && t[1].dims[0] === r.group && t[1].dims[1] === 1 && r.dilations[0] === 1 && r.dilations[1] === 1 ? e1.compute(ju(k, r, i, n), {\n                inputs: k\n            }) : e1.compute(Ku(k, r, i, n), {\n                inputs: k\n            });\n            return;\n        }\n        let a = t.length === 3, d = t[0].dims[o ? 1 : 2], l = t[0].dims[o ? 2 : 3], p = t[0].dims[o ? 3 : 1], m = t[1].dims[2], u = t[1].dims[3], h = i[o ? 1 : 2], _ = i[o ? 2 : 3], y = i[o ? 3 : 1], g = o && m === d && u === l && r.pads[0] === 0 && r.pads[1] === 0;\n        if (g || m === 1 && u === 1 && r.dilations[0] === 1 && r.dilations[1] === 1 && r.strides[0] === 1 && r.strides[1] === 1 && r.pads[0] === 0 && r.pads[1] === 0) {\n            let k = i[0], P, D, R, G = [];\n            if (o) {\n                var _e_kernelCustomData_wT1;\n                let V = (_e_kernelCustomData_wT1 = e1.kernelCustomData.wT) !== null && _e_kernelCustomData_wT1 !== void 0 ? _e_kernelCustomData_wT1 : e1.compute(Pe(t[1], bo), {\n                    inputs: [\n                        1\n                    ],\n                    outputs: [\n                        r.wIsConst ? -2 : -1\n                    ]\n                })[0];\n                if (r.wIsConst && !e1.kernelCustomData.wT && (e1.kernelCustomData.wT = V), g) {\n                    let Q = d * l * p;\n                    P = t[0].reshape([\n                        1,\n                        k,\n                        Q\n                    ]), D = V.reshape([\n                        1,\n                        Q,\n                        y\n                    ]), R = [\n                        1,\n                        k,\n                        y\n                    ];\n                } else P = t[0].reshape([\n                    k,\n                    d * l,\n                    p\n                ]), D = V.reshape([\n                    1,\n                    p,\n                    y\n                ]), R = [\n                    k,\n                    h * _,\n                    y\n                ];\n                G.push(P), G.push(D);\n            } else P = t[0].reshape([\n                k,\n                p,\n                d * l\n            ]), D = t[1].reshape([\n                1,\n                y,\n                p\n            ]), R = [\n                k,\n                y,\n                h * _\n            ], G.push(D), G.push(P);\n            a && G.push(t[2]);\n            let K = R[2], j = G[0].dims[G[0].dims.length - 1];\n            K < 8 && j < 8 ? e1.compute(Zr(G, r, i, R, o, n), {\n                inputs: G\n            }) : e1.compute(er(G, r, i, R, o, n), {\n                inputs: G\n            });\n            return;\n        }\n        var _e_kernelCustomData_wT2;\n        let x = !0, $ = (_e_kernelCustomData_wT2 = e1.kernelCustomData.wT) !== null && _e_kernelCustomData_wT2 !== void 0 ? _e_kernelCustomData_wT2 : e1.compute(Pe(t[1], bo), {\n            inputs: [\n                1\n            ],\n            outputs: [\n                r.wIsConst ? -2 : -1\n            ]\n        })[0];\n        r.wIsConst && !e1.kernelCustomData.wT && (e1.kernelCustomData.wT = $);\n        let v = [\n            t[0],\n            $\n        ];\n        a && v.push(t[2]);\n        let S = o ? h * _ : y, T = o ? y : h * _, A = m * u * p;\n        e1.compute(Vu(v, r, i, S, T, A, a, x, n), {\n            inputs: v\n        });\n    }, hf = (e1, t)=>{\n        let r = t.format === \"NHWC\", n = [\n            e1.inputs[0].reshape(r ? [\n                e1.inputs[0].dims[0],\n                1,\n                e1.inputs[0].dims[1],\n                e1.inputs[0].dims[2]\n            ] : [\n                e1.inputs[0].dims[0],\n                e1.inputs[0].dims[1],\n                1,\n                e1.inputs[0].dims[2]\n            ]),\n            e1.inputs[1].reshape([\n                e1.inputs[1].dims[0],\n                e1.inputs[1].dims[1],\n                1,\n                e1.inputs[1].dims[2]\n            ])\n        ];\n        e1.inputs.length === 3 && n.push(e1.inputs[2]);\n        let o = [\n            0,\n            t.pads[0],\n            0,\n            t.pads[1]\n        ], i = [\n            1\n        ].concat(t.strides), a = [\n            1\n        ].concat(t.dilations), d = [\n            1\n        ].concat(t.kernelShape), l = yo({\n            ...t,\n            pads: o,\n            strides: i,\n            dilations: a,\n            kernelShape: d\n        }, n);\n        Zu(e1, n, l, (p)=>r ? [\n                p[0],\n                p[2],\n                p[3]\n            ] : [\n                p[0],\n                p[1],\n                p[3]\n            ]);\n    }, gf = (e1, t, r)=>{\n        let n = r.format === \"NHWC\" ? \"channelsLast\" : \"channelsFirst\", o = yo(r, t), i = r.autoPad === \"NOTSET\" ? r.pads : r.autoPad, a = Hu(t[0].dims, t[1].dims, r.strides, r.dilations, i, !1, n);\n        e1.compute(Fu(t, o, a.outShape, [\n            a.filterDepth,\n            a.filterHeight,\n            a.filterWidth\n        ], [\n            a.padInfo.front,\n            a.padInfo.top,\n            a.padInfo.left\n        ], n));\n    }, wo = (e1, t)=>{\n        if (ff(e1.inputs, t), e1.inputs[0].dims.length === 3) hf(e1, t);\n        else if (e1.inputs[0].dims.length === 5) gf(e1, e1.inputs, t);\n        else {\n            let r = yo(t, e1.inputs);\n            Zu(e1, e1.inputs, r);\n        }\n    };\n});\nvar Xu, Ju = U(()=>{\n    \"use strict\";\n    te();\n    et();\n    oe();\n    ae();\n    Xu = (e1, t, r)=>{\n        let n = e1.length > 2, o = t.outputShape, i = t.format === \"NHWC\", a = t.group, d = e1[1].dims, l = d[2] / a, p = d[3], m = i ? me(l) : 1, u = i ? me(p) : 1, h = i ? p === 1 ? m : u : 1, _ = C.size(o) / u, y = [\n            Math.ceil(_ / 64),\n            1,\n            1\n        ];\n        ue(\"verbose\", ()=>\"[conv2d_backprop_webgpu] dispatch = \".concat(y));\n        let g = [\n            \"rank\",\n            \"rank\"\n        ], x = [\n            t.strides[0],\n            t.strides[1]\n        ], $ = [\n            t.kernelShape[i ? 1 : 2],\n            t.kernelShape[i ? 2 : 3]\n        ], v = [\n            t.dilations[0],\n            t.dilations[1]\n        ], S = [\n            $[0] + (t.dilations[0] <= 1 ? 0 : (t.kernelShape[i ? 1 : 2] - 1) * (t.dilations[0] - 1)),\n            $[1] + (t.dilations[1] <= 1 ? 0 : (t.kernelShape[i ? 2 : 3] - 1) * (t.dilations[1] - 1))\n        ], T = [\n            S[0] - 1 - Math.floor((t.pads[0] + t.pads[2]) / 2),\n            S[1] - 1 - Math.floor((t.pads[1] + t.pads[3]) / 2)\n        ], A = [\n            {\n                type: 12,\n                data: _\n            },\n            {\n                type: 12,\n                data: x\n            },\n            {\n                type: 12,\n                data: $\n            },\n            {\n                type: 12,\n                data: v\n            },\n            {\n                type: 12,\n                data: S\n            },\n            {\n                type: 6,\n                data: T\n            },\n            {\n                type: 12,\n                data: l\n            },\n            {\n                type: 12,\n                data: p\n            },\n            ...N(e1[0].dims, e1[1].dims)\n        ];\n        n && (A.push(...N(e1[2].dims)), g.push(\"rank\")), A.push(...N(o));\n        let k = (P)=>{\n            let D = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"strides\",\n                    type: \"u32\",\n                    length: x.length\n                },\n                {\n                    name: \"filter_dims\",\n                    type: \"u32\",\n                    length: $.length\n                },\n                {\n                    name: \"dilations\",\n                    type: \"u32\",\n                    length: $.length\n                },\n                {\n                    name: \"effective_filter_dims\",\n                    type: \"u32\",\n                    length: S.length\n                },\n                {\n                    name: \"pads\",\n                    type: \"i32\",\n                    length: T.length\n                },\n                {\n                    name: \"input_channels_per_group\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"output_channels_per_group\",\n                    type: \"u32\"\n                }\n            ], R = _e(e1[0].dataType), G = i ? 1 : 2, K = i ? 2 : 3, j = i ? 3 : 1, V = E(\"W\", e1[1].dataType, e1[1].dims.length, h), Q = E(\"Dy\", e1[0].dataType, e1[0].dims.length, m), se = [\n                Q,\n                V\n            ];\n            n && se.push(E(\"bias\", e1[2].dataType, [\n                o[j]\n            ].length, u));\n            let Y = M(\"result\", e1[0].dataType, o.length, u), ee = ()=>{\n                let ne = \"\";\n                if (m === 1) ne += \"\\n        let w_offset = \".concat(V.indicesToOffset(\"\".concat(V.type.indices, \"(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)\")), \";\\n        let wValue = \").concat(V.getByOffset(\"w_offset / \".concat(h)), \";\\n        dotProd = dotProd + xValue * wValue;\");\n                else if (p === 1) ne += \"\\n          let wValue = \".concat(V.getByOffset(\"\".concat(V.indicesToOffset(\"\".concat(V.type.indices, \"(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)\")), \" / \").concat(h)), \";\\n          dotProd = dotProd + dot(xValue, wValue);\");\n                else for(let be = 0; be < m; be++)ne += \"\\n            let wValue\".concat(be, \" = \").concat(V.getByOffset(\"\".concat(V.indicesToOffset(\"\".concat(V.type.indices, \"(u32(wRPerm), u32(wCPerm), inputChannel + \").concat(be, \", wOutChannel)\")), \" / \").concat(h)), \";\\n            dotProd = dotProd + xValue[\").concat(be, \"] * wValue\").concat(be, \";\");\n                return ne;\n            }, J = \"\\n            let outputIndices = \".concat(Y.offsetToIndices(\"global_idx * \".concat(u)), \";\\n            let batch = \").concat(Y.indicesGet(\"outputIndices\", 0), \";\\n            let d1 = \").concat(Y.indicesGet(\"outputIndices\", j), \";\\n            let r = \").concat(Y.indicesGet(\"outputIndices\", G), \";\\n            let c = \").concat(Y.indicesGet(\"outputIndices\", K), \";\\n            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\\n            let dyRCorner = dyCorner.x;\\n            let dyCCorner = dyCorner.y;\\n            let groupId = d1 / uniforms.output_channels_per_group;\\n            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\\n            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n            // ? = to be determined. : = across all values in that axis.\\n            var dotProd = \").concat(Y.type.value, \"(0.0);\\n            for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\\n              if (wR % uniforms.dilations.x != 0) {\\n                continue;\\n              }\\n              let dyR = (\").concat(R, \"(dyRCorner) + \").concat(R, \"(wR)) / \").concat(R, \"(uniforms.strides[0]);\\n              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\\n              if (dyR < 0.0 || dyR >= \").concat(R, \"(uniforms.Dy_shape[\").concat(G, \"]) || fract(dyR) > 0.0 ||\\n                  wRPerm < 0) {\\n                continue;\\n              }\\n              wR = wR + uniforms.strides[0] - 1;\\n              let idyR: u32 = u32(dyR);\\n\\n              for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\\n                if (wC % uniforms.dilations.y != 0) {\\n                  continue;\\n                }\\n                let dyC = (\").concat(R, \"(dyCCorner) + \").concat(R, \"(wC)) / \").concat(R, \"(uniforms.strides.y);\\n                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\\n                if (dyC < 0.0 || dyC >= \").concat(R, \"(uniforms.Dy_shape[\").concat(K, \"]) ||\\n                    fract(dyC) > 0.0 || wCPerm < 0) {\\n                  continue;\\n                }\\n                wC = wC + uniforms.strides.y - 1;\\n                let idyC: u32 = u32(dyC);\\n                var inputChannel = groupId * uniforms.input_channels_per_group;\\n                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + \").concat(m, \") {\\n                  let xValue = \").concat(i ? Q.getByOffset(\"\".concat(Q.indicesToOffset(\"\".concat(Q.type.indices, \"(batch, idyR, idyC, inputChannel)\")), \" / \").concat(m)) : Q.get(\"batch\", \"inputChannel\", \"idyR\", \"idyC\"), \";\\n                  \").concat(ee(), \"\\n                  inputChannel = inputChannel + \").concat(m, \";\\n                }\\n              }\\n            }\\n            let value = dotProd\").concat(n ? \" + bias[d1 / \".concat(u, \"]\") : \"\", \";\\n            \").concat(Y.setByOffset(\"global_idx\", \"value\"), \";\\n          \");\n            return \"\\n    \".concat(P.registerUniforms(D).declareVariables(...se, Y), \"\\n      \").concat(P.mainStart(), \"\\n      \").concat(P.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \";\\n    \").concat(J, \"}\");\n        };\n        return {\n            name: \"ConvTranspose2D\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey, \";\").concat(m).concat(h).concat(u).concat(p === 1),\n                inputDependencies: g\n            },\n            getRunData: ()=>({\n                    dispatchGroup: {\n                        x: y[0],\n                        y: y[1],\n                        z: y[2]\n                    },\n                    outputs: [\n                        {\n                            dims: r ? r(o) : o,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    programUniforms: A\n                }),\n            getShaderSource: k\n        };\n    };\n});\nvar bf, yf, _f, ed, td, wf, rd, vf, nd, od = U(()=>{\n    \"use strict\";\n    Ju();\n    yt();\n    dt();\n    bf = (e1, t, r, n, o, i)=>(e1 - 1) * t + r + (n - 1) * o + 1 - i, yf = (e1, t, r, n, o)=>{\n        let i = Math.floor(e1 / 2);\n        t === \"SAME_UPPER\" ? (r[n] = i, r[o] = e1 - i) : t === \"SAME_LOWER\" && (r[n] = e1 - i, r[o] = i);\n    }, _f = (e1, t, r, n, o, i, a, d, l, p)=>{\n        let m = e1.length - 2, u = p.length === 0;\n        l.length < m && l.push(...Array(m - l.length).fill(0));\n        let h = e1[0], _ = t[d ? 3 : 1] * o;\n        for(let y = 0, g = e1.length - m - (d ? 1 : 0); y < m; ++y, ++g){\n            let x = e1[g], $ = u ? x * a[y] : p[y], v = bf(x, a[y], i[y], t[g], r[y], $);\n            yf(v, n, i, y, y + m), u && p.push(a[y] * (x - 1) + l[y] + (t[g] - 1) * r[y] + 1 - i[y] - i[y + m]);\n        }\n        p.splice(0, 0, h), p.splice(d ? 3 : 1, 0, _);\n    }, ed = (e1, t)=>{\n        let r = e1.kernelShape.slice();\n        if (e1.kernelShape.length === 0 || e1.kernelShape.reduce((u, h)=>u * h, 1) === 0) {\n            r.length = 0;\n            for(let u = 2; u < t[1].dims.length; ++u)r.push(t[1].dims[u]);\n        }\n        let n = e1.format === \"NHWC\";\n        r.splice(0, 0, t[1].dims[0]), r.splice(n ? 3 : 1, 0, t[1].dims[1]);\n        let o = e1.pads.slice(), i = e1.outputShape.slice(), a = e1.outputPadding.slice(), d = t[0].dims, l = e1.dilations.slice();\n        if (l.reduce((u, h)=>u + h, 0) === 0) {\n            let u = t[0].dims.length - 2;\n            l = new Array(u).fill(1);\n        }\n        let p = e1.strides.slice();\n        if (p.reduce((u, h)=>u + h, 0) === 0) {\n            let u = t[0].dims.length - 2;\n            p = new Array(u).fill(1);\n        }\n        _f(d, r, l, e1.autoPad, e1.group, o, p, n, a, i);\n        let m = Object.assign({}, e1);\n        return Object.assign(m, {\n            kernelShape: r,\n            pads: o,\n            outputPadding: a,\n            outputShape: i,\n            dilations: l,\n            strides: p\n        }), m;\n    }, td = (e1)=>{\n        let t = jr(e1), r = e1.format, n = [\n            \"NOTSET\",\n            \"VALID\",\n            \"SAME_UPPER\",\n            \"SAME_LOWER\"\n        ][typeof e1.autoPad > \"u\" ? 0 : e1.autoPad], o = e1.dilations, i = e1.group, a = e1.kernelShape, d = e1.pads, l = e1.strides, p = e1.wIsConst(), m = e1.outputPadding, u = e1.outputShape;\n        return {\n            autoPad: n,\n            format: r,\n            dilations: o,\n            group: i,\n            kernelShape: a,\n            outputPadding: m,\n            outputShape: u,\n            pads: d,\n            strides: l,\n            wIsConst: p,\n            ...t,\n            cacheKey: \"\".concat(e1.format, \";\").concat(t.activation, \";\")\n        };\n    }, wf = (e1, t)=>{\n        if (!e1 || e1.length !== 2 && e1.length !== 3) throw new Error(\"Conv requires 2 or 3 inputs\");\n        if (e1[0].dims.length !== 4 && e1[0].dims.length !== 3) throw new Error(\"currently only support 2-dimensional conv\");\n        if (e1[0].dims.length !== e1[1].dims.length) throw new Error(\"filter does not have same dimension as input\");\n        let r = e1[0].dims[t.format === \"NHWC\" ? e1[0].dims.length - 1 : 1], n = e1[1].dims[0];\n        if (r !== n) throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");\n        let o = e1[1].dims[1] * t.group;\n        if (e1.length === 3 && (e1[2].dims.length !== 1 || e1[2].dims[0] !== o)) throw new Error(\"invalid bias\");\n        let i = e1[0].dims.length - 2;\n        if (t.dilations.reduce((m, u)=>m + u, 0) > 0 && t.dilations.length !== i) throw new Error(\"dilations should be \".concat(i, \"D\"));\n        if (t.strides.reduce((m, u)=>m + u, 0) > 0 && t.strides.length !== i) throw new Error(\"strides should be \".concat(i, \"D\"));\n        if (t.pads.reduce((m, u)=>m + u, 0) > 0 && t.pads.length !== i * 2) throw new Error(\"pads should be \".concat(i * 2, \"D\"));\n        if (t.outputPadding.length !== i && t.outputPadding.length !== 0) throw new Error(\"output_padding should be \".concat(i, \"D\"));\n        if (t.kernelShape.reduce((m, u)=>m + u, 0) > 0 && t.kernelShape.length !== 0 && t.kernelShape.length !== e1[1].dims.length - 2) throw new Error(\"invalid kernel shape\");\n        if (t.outputShape.length !== 0 && t.outputShape.length !== e1[0].dims.length - 2) throw new Error(\"invalid output shape\");\n    }, rd = (e1, t, r, n)=>{\n        var _e_kernelCustomData_wT;\n        let o = (_e_kernelCustomData_wT = e1.kernelCustomData.wT) !== null && _e_kernelCustomData_wT !== void 0 ? _e_kernelCustomData_wT : e1.compute(Pe(t[1], [\n            2,\n            3,\n            0,\n            1\n        ]), {\n            inputs: [\n                1\n            ],\n            outputs: [\n                r.wIsConst ? -2 : -1\n            ]\n        })[0];\n        r.wIsConst && !e1.kernelCustomData.wT && (e1.kernelCustomData.wT = o);\n        let i = [\n            t[0],\n            o\n        ];\n        t.length === 3 && i.push(t[2]), e1.compute(Xu(i, r, n), {\n            inputs: i\n        });\n    }, vf = (e1, t)=>{\n        let r = t.format === \"NHWC\", n = [\n            e1.inputs[0].reshape(r ? [\n                e1.inputs[0].dims[0],\n                1,\n                e1.inputs[0].dims[1],\n                e1.inputs[0].dims[2]\n            ] : [\n                e1.inputs[0].dims[0],\n                e1.inputs[0].dims[1],\n                1,\n                e1.inputs[0].dims[2]\n            ]),\n            e1.inputs[1].reshape([\n                e1.inputs[1].dims[0],\n                e1.inputs[1].dims[1],\n                1,\n                e1.inputs[1].dims[2]\n            ])\n        ];\n        e1.inputs.length === 3 && n.push(e1.inputs[2]);\n        let o = t.kernelShape;\n        (o.length === 0 || o[0] === 0) && (o = [\n            e1.inputs[1].dims[2]\n        ]);\n        let i = t.dilations;\n        (i.length === 0 || i[0] === 0) && (i = [\n            1\n        ]);\n        let a = t.strides;\n        (a.length === 0 || a[0] === 0) && (a = [\n            1\n        ]);\n        let d = t.pads;\n        d.length === 0 && (d = [\n            0,\n            0\n        ]), d = [\n            0,\n            d[0],\n            0,\n            d[1]\n        ], a = [\n            1\n        ].concat(a), i = [\n            1\n        ].concat(i), o = [\n            1\n        ].concat(o);\n        let l = ed({\n            ...t,\n            pads: d,\n            strides: a,\n            dilations: i,\n            kernelShape: o\n        }, n);\n        rd(e1, n, l, (p)=>r ? [\n                p[0],\n                p[2],\n                p[3]\n            ] : [\n                p[0],\n                p[1],\n                p[3]\n            ]);\n    }, nd = (e1, t)=>{\n        if (wf(e1.inputs, t), e1.inputs[0].dims.length === 3) vf(e1, t);\n        else {\n            let r = ed(t, e1.inputs);\n            rd(e1, e1.inputs, r);\n        }\n    };\n});\nvar $f, id, ad, sd = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    $f = (e1, t, r, n)=>{\n        let o = C.size(t), i = t.length, a = E(\"input\", e1, i), d = M(\"output\", e1, i), l = r.dataType === 6 ? r.getInt32Array()[0] : Number(r.getBigInt64Array()[0]), p = C.normalizeAxis(l, i), m = (u)=>{\n            let h = \" i32(\".concat(a.indicesGet(\"inputIndices\", \"uniforms.axis\"), \") \"), _ = F(\"uniforms.input_shape\", \"uniforms.axis\", i), y = n.reverse ? h + (n.exclusive ? \" + 1\" : \"\") : \"0\", g = n.reverse ? _ : h + (n.exclusive ? \"\" : \" + 1\");\n            return \"\\n                \".concat(u.registerUniform(\"outputSize\", \"u32\").registerUniform(\"axis\", \"u32\").declareVariables(a, d), \"\\n                \").concat(u.mainStart(), \"\\n                  \").concat(u.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\"), \"\\n                  var inputIndices = \").concat(d.offsetToIndices(\"global_idx\"), \";\\n                  var sum = \").concat(d.type.value, \"(0);\\n                  let first : i32 = \").concat(y, \";\\n                  let last : i32 = \").concat(g, \";\\n                  for (var i : i32 = first; i < last; i++) {\\n                    \").concat(a.indicesSet(\"inputIndices\", \"uniforms.axis\", \"u32(i)\"), \";\\n                    sum = sum + \").concat(a.getByIndices(\"inputIndices\"), \";\\n                  }\\n                  \").concat(d.setByOffset(\"global_idx\", \"sum\"), \";\\n                }\");\n        };\n        return {\n            name: \"CumSum\",\n            shaderCache: {\n                hint: n.cacheKey,\n                inputDependencies: [\n                    \"rank\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: t,\n                            dataType: e1\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(o / 64)\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: o\n                        },\n                        {\n                            type: 12,\n                            data: p\n                        },\n                        ...N(t, t)\n                    ]\n                }),\n            getShaderSource: m\n        };\n    }, id = (e1, t)=>{\n        let r = e1.inputs[0].dims, n = e1.inputs[0].dataType, o = e1.inputs[1];\n        e1.compute($f(n, r, o, t), {\n            inputs: [\n                0\n            ]\n        });\n    }, ad = (e1)=>{\n        let t = e1.exclusive === 1, r = e1.reverse === 1;\n        return re({\n            exclusive: t,\n            reverse: r\n        });\n    };\n});\nvar xf, Sf, Tf, ud, dd, ld = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    xf = (e1)=>{\n        if (!e1 || e1.length !== 1) throw new Error(\"DepthToSpace requires 1 input.\");\n        if (e1[0].dims.length !== 4) throw new Error(\"DepthToSpace requires 4D input.\");\n    }, Sf = (e1, t, r, n)=>{\n        let o = [];\n        o.push(\"fn perm(i: \".concat(n.type.indices, \") -> \").concat(r.type.indices, \" {\\n    var a: \").concat(r.type.indices, \";\"));\n        for(let i = 0; i < t; ++i)o.push(r.indicesSet(\"a\", e1[i], \"i[\".concat(i, \"]\")));\n        return o.push(\"return a;}\"), o.join(\"\\n\");\n    }, Tf = (e1, t)=>{\n        let r, n, o, i, a, d, l = t.format === \"NHWC\", p = t.blocksize, m = t.mode === \"DCR\";\n        l ? ([r, n, o, i] = e1.dims, a = m ? [\n            r,\n            n,\n            o,\n            p,\n            p,\n            i / p ** 2\n        ] : [\n            r,\n            n,\n            o,\n            i / p ** 2,\n            p,\n            p\n        ], d = m ? [\n            0,\n            1,\n            3,\n            2,\n            4,\n            5\n        ] : [\n            0,\n            1,\n            4,\n            2,\n            5,\n            3\n        ]) : ([r, n, o, i] = [\n            e1.dims[0],\n            e1.dims[2],\n            e1.dims[3],\n            e1.dims[1]\n        ], a = m ? [\n            r,\n            p,\n            p,\n            i / p ** 2,\n            n,\n            o\n        ] : [\n            r,\n            i / p ** 2,\n            p,\n            p,\n            n,\n            o\n        ], d = m ? [\n            0,\n            3,\n            4,\n            1,\n            5,\n            2\n        ] : [\n            0,\n            1,\n            4,\n            2,\n            5,\n            3\n        ]);\n        let u = e1.reshape(a), h = u.dims.length, _ = e1.dataType, y = E(\"a\", _, h), g = M(\"output\", _, h), x = ($)=>\"\\n  \".concat($.registerUniform(\"output_size\", \"u32\").declareVariables(y, g), \"\\n\\n  \").concat(Sf(d, h, y, g), \"\\n\\n  \").concat($.mainStart(), \"\\n    \").concat($.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n\\n    let indices = \").concat(g.offsetToIndices(\"global_idx\"), \";\\n    let aIndices = perm(indices);\\n\\n    \").concat(g.setByOffset(\"global_idx\", y.getByIndices(\"aIndices\")), \"\\n  }\");\n        return {\n            name: \"DepthToSpace\",\n            shaderCache: {\n                hint: \"\".concat(e1.dims, \";\").concat(t.blocksize, \";\").concat(t.mode),\n                inputDependencies: [\n                    \"rank\"\n                ]\n            },\n            getRunData: ($)=>{\n                let v = l ? [\n                    r,\n                    n * p,\n                    o * p,\n                    i / p ** 2\n                ] : [\n                    r,\n                    i / p ** 2,\n                    n * p,\n                    o * p\n                ], S = C.size(v), T = u.dims, A = C.sortBasedOnPerm(T, d);\n                return {\n                    outputs: [\n                        {\n                            dims: v,\n                            dataType: $[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(S / 64)\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: S\n                        },\n                        ...N(T, A)\n                    ]\n                };\n            },\n            getShaderSource: x\n        };\n    }, ud = (e1, t)=>{\n        xf(e1.inputs), e1.compute(Tf(e1.inputs[0], t));\n    }, dd = (e1)=>re({\n            blocksize: e1.blocksize,\n            mode: e1.mode,\n            format: e1.format\n        });\n});\nvar vo, en, cd, If, Cf, $o, xo, pd, Af, md, fd, hd = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    vo = \"[a-zA-Z]|\\\\.\\\\.\\\\.\", en = \"(\" + vo + \")+\", cd = \"^\" + en + \"$\", If = \"(\" + en + \",)*\" + en, Cf = \"^\" + If + \"$\", $o = class {\n        addSymbol(t, r) {\n            let n = this.symbolToIndices.get(t);\n            n === void 0 ? n = [\n                r\n            ] : n.push(r), this.symbolToIndices.set(t, n);\n        }\n        constructor(t = -1){\n            this.symbolToIndices = new Map, this.inputIndex = t;\n        }\n    }, xo = class {\n        addSymbol(t, r, n) {\n            let o = this.symbolToInfo.get(t);\n            if (o !== void 0) {\n                if (o.dimValue !== r && o.count !== 1) throw new Error(\"Dimension mismatch\");\n                o.count++, o.inputIndices.push(n);\n            } else o = {\n                count: 1,\n                dimValue: r,\n                inputIndices: [\n                    n\n                ]\n            };\n            this.symbolToInfo.set(t, o);\n        }\n        processTerm(t, r, n) {\n            let o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : -1;\n            let i = n.length, a = !1, d = [], l = 0;\n            if (!t.match(RegExp(cd)) && !r && t !== \"\") throw new Error(\"Invalid LHS term\");\n            let p = t.match(RegExp(vo, \"g\")), m = new $o(o);\n            return p === null || p === void 0 ? void 0 : p.forEach((u, h)=>{\n                if (u === \"...\") {\n                    if (a) throw new Error(\"Only one ellipsis is allowed per input term\");\n                    a = !0;\n                    let _ = i - p.length + 1;\n                    if (_ < 0) throw new Error(\"Ellipsis out of bounds\");\n                    if (d = n.slice(l, l + _), this.hasEllipsis) {\n                        if (this.ellipsisDims.length !== d.length || this.ellipsisDims.toString() !== d.toString()) throw new Error(\"Ellipsis dimensions mismatch\");\n                    } else if (r) this.hasEllipsis = !0, this.ellipsisDims = d;\n                    else throw new Error(\"Ellipsis must be specified in the LHS\");\n                    for(let y = 0; y < d.length; y++){\n                        let g = String.fromCharCode(\"0\".charCodeAt(0) + y);\n                        m.addSymbol(g, h + y), this.addSymbol(g, n[l++], o);\n                    }\n                } else m.addSymbol(u, h + (this.hasEllipsis ? this.ellipsisDims.length - 1 : 0)), this.addSymbol(u, n[l++], o);\n            }), m;\n        }\n        constructor(t, r){\n            var _o_match;\n            this.equation = r;\n            this.hasEllipsis = !1, this.symbolToInfo = new Map, this.lhs = new Array, this.outputDims = [];\n            let [n, o] = r.includes(\"->\") ? r.split(\"->\", 2) : [\n                r,\n                \"\"\n            ];\n            if (!n.match(RegExp(Cf))) throw new Error(\"Invalid LHS term\");\n            if (n.split(\",\").forEach((d, l)=>{\n                let p = t[l].dims.slice();\n                if (!d.match(RegExp(cd))) throw new Error(\"Invalid LHS term\");\n                let m = this.processTerm(d, !0, p, l);\n                this.lhs.push(m);\n            }), o === \"\") o += [\n                ...this.symbolToInfo.entries()\n            ].filter((param)=>{\n                let [d, l] = param;\n                return l.count === 1 || d === \"...\";\n            }).map((param)=>{\n                let [d] = param;\n                return d;\n            }).join(\"\");\n            else if (!o.match(RegExp(en))) throw new Error(\"Invalid RHS\");\n            (_o_match = o.match(RegExp(vo, \"g\"))) === null || _o_match === void 0 ? void 0 : _o_match.forEach((d)=>{\n                if (d === \"...\") this.outputDims = this.outputDims.concat(this.ellipsisDims);\n                else {\n                    let l = this.symbolToInfo.get(d);\n                    if (l === void 0) throw new Error(\"Invalid RHS symbol\");\n                    this.outputDims.push(l.dimValue);\n                }\n            }), this.rhs = this.processTerm(o, !1, this.outputDims);\n        }\n    }, pd = (e1)=>e1 + \"_max\", Af = (e1, t, r, n)=>{\n        let i = e1.map((m)=>m.length).map((m, u)=>E(\"input\".concat(u), t, m)), a = C.size(n), d = M(\"output\", t, n.length), l = [\n            ...r.symbolToInfo.keys()\n        ].filter((m)=>!r.rhs.symbolToIndices.has(m)), p = (m)=>{\n            let u = [], h = \"var prod = 1.0;\", _ = \"var sum = 0.0;\", y = \"sum += prod;\", g = [], x = [], $ = [], v = [], S = r.symbolToInfo.size === r.rhs.symbolToIndices.size;\n            r.symbolToInfo.forEach((A, k)=>{\n                if (r.rhs.symbolToIndices.has(k)) {\n                    var _r_rhs_symbolToIndices_get;\n                    let P = (_r_rhs_symbolToIndices_get = r.rhs.symbolToIndices.get(k)) === null || _r_rhs_symbolToIndices_get === void 0 ? void 0 : _r_rhs_symbolToIndices_get[0];\n                    P !== void 0 && r.lhs.forEach((D, R)=>{\n                        if (A.inputIndices.includes(R)) {\n                            let G = D.symbolToIndices.get(k);\n                            if (G === void 0) throw new Error(\"Invalid symbol error\");\n                            G.forEach((K)=>{\n                                u.push(\"\".concat(i[R].indicesSet(\"input\".concat(R, \"Indices\"), K, d.indicesGet(\"outputIndices\", P))));\n                            });\n                        }\n                    });\n                } else r.lhs.forEach((P, D)=>{\n                    if (A.inputIndices.includes(D)) {\n                        let R = P.symbolToIndices.get(k);\n                        if (R === void 0) throw new Error(\"Invalid symbol error\");\n                        R.forEach((G)=>{\n                            g.push(\"\".concat(i[D].indicesSet(\"input\".concat(D, \"Indices\"), G, \"\".concat(k))));\n                        }), v.push(\"prod *= \".concat(i[D].getByIndices(\"input\".concat(D, \"Indices\")), \";\"));\n                    }\n                }), x.push(\"for(var \".concat(k, \": u32 = 0; \").concat(k, \" < uniforms.\").concat(pd(k), \"; \").concat(k, \"++) {\")), $.push(\"}\");\n            });\n            let T = S ? [\n                ...u,\n                \"let sum = \".concat(i.map((A, k)=>A.getByIndices(\"input\".concat(k, \"Indices\"))).join(\" * \"), \";\")\n            ] : [\n                ...u,\n                _,\n                ...x,\n                ...g,\n                h,\n                ...v,\n                y,\n                ...$\n            ];\n            return \"\\n            \".concat(m.registerUniforms(l.map((A)=>({\n                    name: \"\".concat(pd(A)),\n                    type: \"u32\"\n                }))).registerUniform(\"outputSize\", \"u32\").declareVariables(...i, d), \"\\n\\n            \").concat(m.mainStart(), \"\\n            \").concat(m.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\"), \"\\n            var outputIndices = \").concat(d.offsetToIndices(\"global_idx\"), \";\\n            \").concat(i.map((A, k)=>\"var input\".concat(k, \"Indices: \").concat(i[k].type.indices, \";\")).join(\"\\n\"), \"\\n            \").concat(T.join(\"\\n\"), \";\\n            \").concat(d.setByOffset(\"global_idx\", \"sum\"), \";\\n          }\");\n        };\n        return {\n            name: \"Einsum\",\n            shaderCache: {\n                hint: r.equation,\n                inputDependencies: e1.map(()=>\"rank\")\n            },\n            getRunData: ()=>{\n                let m = l.filter((h)=>r.symbolToInfo.has(h)).map((h)=>{\n                    var _r_symbolToInfo_get;\n                    return {\n                        type: 12,\n                        data: ((_r_symbolToInfo_get = r.symbolToInfo.get(h)) === null || _r_symbolToInfo_get === void 0 ? void 0 : _r_symbolToInfo_get.dimValue) || 0\n                    };\n                });\n                m.push({\n                    type: 12,\n                    data: a\n                });\n                let u = e1.map((h, _)=>[\n                        ...N(h)\n                    ]).reduce((h, _)=>h.concat(_), m);\n                return u.push(...N(n)), {\n                    outputs: [\n                        {\n                            dims: n,\n                            dataType: t\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(a / 64)\n                    },\n                    programUniforms: u\n                };\n            },\n            getShaderSource: p\n        };\n    }, md = (e1, t)=>{\n        let r = new xo(e1.inputs, t.equation), n = r.outputDims, o = e1.inputs.map((i, a)=>i.dims);\n        e1.compute(Af(o, e1.inputs[0].dataType, r, n));\n    }, fd = (e1)=>{\n        let t = e1.equation.replace(/\\s+/g, \"\");\n        return re({\n            equation: t\n        });\n    };\n});\nvar kf, gd, Ef, Pf, bd, yd = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    kf = (e1)=>{\n        if (!e1 || e1.length !== 2) throw new Error(\"Expand requires 2 input.\");\n        let t = e1[0].dims, r = Array.from(e1[1].getBigInt64Array(), Number), n = r.length < t.length ? 0 : r.length - t.length, o = t.length < r.length ? 0 : t.length - r.length;\n        for(; n < r.length && o < t.length; ++n, ++o)if (r[n] !== t[o] && r[n] !== 1 && t[o] !== 1) throw new Error(\"Expand requires shape to be broadcastable to input\");\n    }, gd = (e1, t)=>{\n        let r = e1.length - t.length, n = [];\n        for(let o = 0; o < r; ++o)n.push(e1[o]);\n        for(let o = 0; o < t.length; ++o)n.push(t[o] === 1 ? e1[o + r] : t[o]);\n        return n;\n    }, Ef = (e1, t)=>e1.length > t.length ? gd(e1, t) : gd(t, e1), Pf = (e1)=>{\n        let t = e1[0].dims, r = Array.from(e1[1].getBigInt64Array(), Number), n = Ef(t, r), o = e1[0].dataType, i = o === 9 || C.size(t) === 1, a = o === 9 || t.length > 0 && t[t.length - 1] % 4 === 0 ? 4 : 1, d = i || n.length > 0 && n[n.length - 1] % 4 === 0 ? 4 : 1, l = Math.ceil(C.size(n) / d), p = (u)=>{\n            let h = E(\"input\", o, t.length, a), _ = M(\"output\", o, n.length, d), y;\n            if (o === 9) {\n                let g = function(x, $) {\n                    let v = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\";\n                    return \"\\n          let outputIndices\".concat($, \" = \").concat(_.offsetToIndices(\"outputOffset + \".concat($, \"u\")), \";\\n          let offset\").concat($, \" = \").concat(h.broadcastedIndicesToOffset(\"outputIndices\".concat($), _), \";\\n          let index\").concat($, \" = offset\").concat($, \" / 4u;\\n          let component\").concat($, \" = offset\").concat($, \" % 4u;\\n          \").concat(x, \"[\").concat($, \"] = \").concat(v, \"(\").concat(h.getByOffset(\"index\".concat($)), \"[component\").concat($, \"]);\\n        \");\n                };\n                y = \"\\n        let outputOffset = global_idx * \".concat(d, \";\\n        var data = vec4<u32>(0);\\n        \").concat(g(\"data\", 0, \"u32\"), \"\\n        \").concat(g(\"data\", 1, \"u32\"), \"\\n        \").concat(g(\"data\", 2, \"u32\"), \"\\n        \").concat(g(\"data\", 3, \"u32\"), \"\\n        \").concat(_.setByOffset(\"global_idx\", \"data\"), \"\\n      }\");\n            } else y = \"\\n        let outputIndices = \".concat(_.offsetToIndices(\"global_idx * \".concat(d)), \";\\n        let inputOffset = \").concat(h.broadcastedIndicesToOffset(\"outputIndices\", _), \";\\n        let data = \").concat(_.type.value, \"(\").concat(h.getByOffset(\"inputOffset / \".concat(a)), \");\\n        \").concat(_.setByOffset(\"global_idx\", \"data\"), \"\\n      }\");\n            return \"\\n    \".concat(u.registerUniform(\"vec_size\", \"u32\").declareVariables(h, _), \"\\n    \").concat(u.mainStart(), \"\\n    \").concat(u.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\"), \"\\n    \").concat(y);\n        }, m = [\n            {\n                type: 12,\n                data: l\n            },\n            ...N(t, n)\n        ];\n        return {\n            name: \"Expand\",\n            shaderCache: {\n                hint: \"\".concat(n.length, \";\").concat(a).concat(d),\n                inputDependencies: [\n                    \"rank\"\n                ]\n            },\n            getShaderSource: p,\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: n,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(l / 64)\n                    },\n                    programUniforms: m\n                })\n        };\n    }, bd = (e1)=>{\n        kf(e1.inputs), e1.compute(Pf(e1.inputs), {\n            inputs: [\n                0\n            ]\n        });\n    };\n});\nvar zf, _d, wd = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    Kr();\n    zf = (e1)=>{\n        let t = e1[0].dataType, r = C.size(e1[0].dims), n = C.size(e1[1].dims), o = n % 4 === 0, i = (a)=>{\n            let d = E(\"x\", t, [\n                1\n            ], 4), l = E(\"bias\", t, [\n                1\n            ], 4), p = M(\"y\", t, [\n                1\n            ], 4), m = [\n                {\n                    name: \"output_vec_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"bias_size\",\n                    type: \"u32\"\n                }\n            ], u = (_)=>\"\\n      let bias\".concat(_, \"_offset: u32 = (global_idx * 4 + \").concat(_, \") % uniforms.bias_size;\\n      let bias\").concat(_, \" = \").concat(l.getByOffset(\"bias\".concat(_, \"_offset / 4\")), \"[bias\").concat(_, \"_offset % 4];\"), h = o ? \"\\n      let bias = \".concat(l.getByOffset(\"global_idx % (uniforms.bias_size / 4)\"), \";\") : \"\".concat(u(0)).concat(u(1)).concat(u(2)).concat(u(3), \"\\n      let bias = \").concat(d.type.value, \"(bias0, bias1, bias2, bias3);\");\n            return \"\".concat(a.registerUniforms(m).declareVariables(d, l, p), \"\\n\\n    \").concat(mo(Ee(t)), \"\\n\\n    \").concat(a.mainStart(kt), \"\\n      \").concat(a.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_vec_size\"), \"\\n\\n      let x = \").concat(d.getByOffset(\"global_idx\"), \";\\n      \").concat(h, \"\\n      let x_in = x + bias;\\n      \").concat(p.setByOffset(\"global_idx\", fo(\"x_in\")), \"\\n    }\");\n        };\n        return {\n            name: \"FastGeluWithBias\",\n            shaderCache: {\n                hint: \"\".concat(o),\n                inputDependencies: [\n                    \"type\",\n                    \"type\"\n                ]\n            },\n            getShaderSource: i,\n            getRunData: (a)=>({\n                    outputs: [\n                        {\n                            dims: a[0].dims,\n                            dataType: a[0].dataType\n                        }\n                    ],\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: Math.ceil(r / 4)\n                        },\n                        {\n                            type: 12,\n                            data: n\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(r / kt / 4)\n                    }\n                })\n        };\n    }, _d = (e1)=>{\n        e1.inputs.length < 2 || C.size(e1.inputs[1].dims) === 0 ? hu(e1) : e1.compute(zf(e1.inputs));\n    };\n});\nvar Of, Df, vd, $d, xd = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    Of = (e1)=>{\n        if (!e1 || e1.length !== 2) throw new Error(\"Gather requires 2 inputs.\");\n    }, Df = (e1, t)=>{\n        let r = e1[0].dims, n = e1[1].dims, o = r.length, i = C.normalizeAxis(t.axis, o), a = r.slice(0);\n        a.splice(i, 1, ...n);\n        let d = r[i], l = e1[0].dataType === 9 ? 4 : 1, p = Math.ceil(C.size(a) / l), m = [\n            {\n                type: 12,\n                data: p\n            },\n            {\n                type: 6,\n                data: d\n            },\n            {\n                type: 12,\n                data: i\n            },\n            ...N(e1[0].dims, e1[1].dims, a)\n        ], u = (h)=>{\n            let _ = E(\"data\", e1[0].dataType, e1[0].dims.length, l), y = E(\"inputIndices\", e1[1].dataType, e1[1].dims.length), g = M(\"output\", e1[0].dataType, a.length, l), x = (v)=>{\n                let S = n.length, T = \"var indicesIndices\".concat(v, \"  = \").concat(y.type.indices, \"(0);\");\n                for(let A = 0; A < S; A++)T += \"\".concat(S > 1 ? \"indicesIndices\".concat(v, \"[\").concat(A, \"]\") : \"indicesIndices\".concat(v), \" = \").concat(a.length > 1 ? \"outputIndices\".concat(v, \"[uniforms.axis + \").concat(A, \"]\") : \"outputIndices\".concat(v), \";\");\n                T += \"\\n          var idx\".concat(v, \" = \").concat(y.getByIndices(\"indicesIndices\".concat(v)), \";\\n          if (idx\").concat(v, \" < 0) {\\n            idx\").concat(v, \" = idx\").concat(v, \" + uniforms.axisDimLimit;\\n          }\\n          var dataIndices\").concat(v, \" : \").concat(_.type.indices, \";\\n        \");\n                for(let A = 0, k = 0; A < o; A++)A === i ? (T += \"\".concat(o > 1 ? \"dataIndices\".concat(v, \"[\").concat(A, \"]\") : \"dataIndices\".concat(v), \" = u32(idx\").concat(v, \");\"), k += S) : (T += \"\".concat(o > 1 ? \"dataIndices\".concat(v, \"[\").concat(A, \"]\") : \"dataIndices\".concat(v), \" = \").concat(a.length > 1 ? \"outputIndices\".concat(v, \"[\").concat(k, \"]\") : \"outputIndices\".concat(v), \";\"), k++);\n                return T;\n            }, $;\n            if (e1[0].dataType === 9) {\n                let v = function(S, T) {\n                    let A = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\";\n                    return \"\\n          let outputIndices\".concat(T, \" = \").concat(g.offsetToIndices(\"outputOffset + \".concat(T, \"u\")), \";\\n          \").concat(x(T), \";\\n          let offset\").concat(T, \" = \").concat(_.indicesToOffset(\"dataIndices\".concat(T)), \";\\n          let index\").concat(T, \" = offset\").concat(T, \" / 4u;\\n          let component\").concat(T, \" = offset\").concat(T, \" % 4u;\\n          \").concat(S, \"[\").concat(T, \"] = \").concat(A, \"(\").concat(_.getByOffset(\"index\".concat(T)), \"[component\").concat(T, \"]);\\n        \");\n                };\n                $ = \"\\n        let outputOffset = global_idx * \".concat(l, \";\\n        var value = vec4<u32>(0);\\n        \").concat(v(\"value\", 0, \"u32\"), \"\\n        \").concat(v(\"value\", 1, \"u32\"), \"\\n        \").concat(v(\"value\", 2, \"u32\"), \"\\n        \").concat(v(\"value\", 3, \"u32\"), \"\\n        \").concat(g.setByOffset(\"global_idx\", \"value\"), \"\\n      \");\n            } else $ = \"\\n      let outputIndices = \".concat(g.offsetToIndices(\"global_idx\"), \";\\n      \").concat(x(\"\"), \";\\n      let value = \").concat(_.getByIndices(\"dataIndices\"), \";\\n      \").concat(g.setByOffset(\"global_idx\", \"value\"), \";\\n      \");\n            return \"\\n      \".concat(h.registerUniform(\"outputSize\", \"u32\").registerUniform(\"axisDimLimit\", \"i32\").registerUniform(\"axis\", \"u32\").declareVariables(_, y, g), \"\\n      \").concat(h.mainStart(), \"\\n        \").concat(h.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\"), \"\\n        \").concat($, \"\\n      }\");\n        };\n        return {\n            name: \"Gather\",\n            shaderCache: {\n                hint: t.cacheKey,\n                inputDependencies: [\n                    \"rank\",\n                    \"rank\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: a,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(p / 64)\n                    },\n                    programUniforms: m\n                }),\n            getShaderSource: u\n        };\n    }, vd = (e1)=>re({\n            axis: e1.axis\n        }), $d = (e1, t)=>{\n        let r = e1.inputs;\n        Of(r), e1.compute(Df(e1.inputs, t));\n    };\n});\nvar Bf, Sd, Td, Id = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    Bf = (e1, t, r, n, o, i, a, d, l)=>{\n        let p = [\n            {\n                type: 12,\n                data: i\n            },\n            {\n                type: 12,\n                data: n\n            },\n            {\n                type: 12,\n                data: o\n            },\n            {\n                type: 12,\n                data: r\n            },\n            {\n                type: 12,\n                data: a\n            },\n            {\n                type: 12,\n                data: d\n            },\n            {\n                type: 12,\n                data: l\n            }\n        ], m = [\n            i\n        ];\n        p.push(...N(t.dims, m));\n        let u = (h)=>{\n            let _ = E(\"indices_data\", t.dataType, t.dims.length), y = M(\"input_slice_offsets_data\", 12, 1, 1), g = [\n                _,\n                y\n            ], x = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"batch_dims\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"input_dims\",\n                    type: \"u32\",\n                    length: o.length\n                },\n                {\n                    name: \"sizes_from_slice_dims_data\",\n                    type: \"u32\",\n                    length: r.length\n                },\n                {\n                    name: \"num_slices_per_batch\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"input_batch_stride\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"num_slice_dims\",\n                    type: \"u32\"\n                }\n            ];\n            return \"\\n  \".concat(h.registerUniforms(x).declareVariables(...g), \"\\n  \").concat(h.mainStart(), \"\\n    \").concat(h.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n    let batch_idx = global_idx / uniforms.num_slices_per_batch;\\n    let base_offset = batch_idx * uniforms.input_batch_stride;\\n\\n    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;\\n    var relative_slice_offset = 0;\\n    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {\\n      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);\\n      let input_dim_idx = uniforms.batch_dims + dim_idx;\\n      if (index < 0) {\\n        \").concat(o.length === 1 ? \"index += i32(uniforms.input_dims);\" : \"index += i32(uniforms.input_dims[input_dim_idx]);\", \"\\n      }\\n      \").concat(r.length === 1 ? \"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);\" : \"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);\", \"\\n    }\\n\\n    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);\\n  }\");\n        };\n        return e1.compute({\n            name: \"computeSliceOffsets\",\n            shaderCache: {\n                hint: \"\".concat(o.length, \"_\").concat(r.length),\n                inputDependencies: [\n                    \"rank\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: m,\n                            dataType: e1.inputs[1].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(i / 64)\n                    },\n                    programUniforms: p\n                }),\n            getShaderSource: u\n        }, {\n            inputs: [\n                t\n            ],\n            outputs: [\n                -1\n            ]\n        })[0];\n    }, Sd = (e1, t)=>{\n        let r = e1.inputs, n = r[0].dims, o = r[0].dataType, i = r[1].dims, a = i[i.length - 1], d = C.sizeToDimension(i, i.length - 1), l = C.sizeFromDimension(n, t.batchDims + a), p = C.sizeToDimension(n, t.batchDims), m = C.sizeFromDimension(n, t.batchDims), u = d / p, h = new Array(a), _ = l;\n        for(let T = 0; T < a; ++T)h[a - 1 - T] = _, _ *= n[t.batchDims + a - 1 - T];\n        let y = Bf(e1, r[1], h, t.batchDims, n, d, u, m, a), g = t.batchDims + a;\n        if (g > n.length) throw new Error(\"last dimension of indices must not be larger than rank of input tensor\");\n        let x = i.slice(0, -1).concat(n.slice(g)), $ = C.size(x), v = [\n            {\n                type: 12,\n                data: $\n            },\n            {\n                type: 12,\n                data: l\n            },\n            ...N(r[0].dims, y.dims, x)\n        ], S = (T)=>{\n            let A = E(\"data\", r[0].dataType, r[0].dims.length), k = E(\"slice_offsets\", 12, y.dims.length), P = M(\"output\", r[0].dataType, x.length);\n            return \"\\n          \".concat(T.registerUniform(\"output_size\", \"u32\").registerUniform(\"slice_size\", \"u32\").declareVariables(A, k, P), \"\\n            \").concat(T.mainStart(), \"\\n            \").concat(T.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];\\n          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];\\n        }\");\n        };\n        e1.compute({\n            name: \"GatherND\",\n            shaderCache: {\n                hint: t.cacheKey,\n                inputDependencies: [\n                    \"rank\",\n                    \"rank\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: x,\n                            dataType: o\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil($ / 64)\n                    },\n                    programUniforms: v\n                }),\n            getShaderSource: S\n        }, {\n            inputs: [\n                r[0],\n                y\n            ]\n        });\n    }, Td = (e1)=>({\n            batchDims: e1.batch_dims,\n            cacheKey: \"\"\n        });\n});\nvar Mf, Rf, Cd, Ad, kd = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    Mf = (e1, t)=>{\n        if (e1.length < 3 || e1.length > 4) throw new Error(\"GatherBlockQuantized requires 3 or 4 inputs.\");\n        let r = C.normalizeAxis(t.quantizeAxis, e1[0].dims.length), n = t.blockSize, o = e1[0], i = e1[2], a = e1.length === 4 ? e1[3] : void 0;\n        if (i.dims.length !== o.dims.length || !o.dims.map((d, l)=>l === r ? Math.ceil(d / n) === i.dims[l] : d === i.dims[l]).reduce((d, l)=>d && l, !0)) throw new Error(\"Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.\");\n        if (a) {\n            if (a.dataType !== o.dataType) throw new Error(\"Zero point must have the same data type as the input tensor.\");\n            if (a.dims.length !== i.dims.length || !a.dims.map((d, l)=>d === i.dims[l]).reduce((d, l)=>d && l, !0)) throw new Error(\"Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.\");\n        }\n    }, Rf = (e1, t)=>{\n        let r = e1[0].dims, n = e1[1].dims, o = r.length, i = C.normalizeAxis(t.gatherAxis, o), a = C.normalizeAxis(t.quantizeAxis, o), d = r.slice(0);\n        d.splice(i, 1, ...n);\n        let l = C.size(d), p = e1[2].dataType, u = e1[0].dataType === 22, h = [\n            {\n                type: 12,\n                data: l\n            },\n            {\n                type: 12,\n                data: a\n            },\n            {\n                type: 12,\n                data: i\n            },\n            {\n                type: 12,\n                data: t.blockSize\n            },\n            ...N(...e1.map((y, g)=>y.dims), d)\n        ], _ = (y)=>{\n            let g = E(\"data\", e1[0].dataType, e1[0].dims.length), x = E(\"inputIndices\", e1[1].dataType, e1[1].dims.length), $ = E(\"scales\", e1[2].dataType, e1[2].dims.length), v = e1.length > 3 ? E(\"zeroPoint\", e1[3].dataType, e1[3].dims.length) : void 0, S = M(\"output\", p, d.length), T = [\n                g,\n                x,\n                $\n            ];\n            v && T.push(v);\n            let A = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"quantize_axis\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"gather_axis\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"block_size\",\n                    type: \"u32\"\n                }\n            ];\n            return \"\\n        \".concat(y.registerUniforms(A).declareVariables(...T, S), \"\\n        \").concat(y.mainStart(), \"\\n        let output_indices = \").concat(S.offsetToIndices(\"global_idx\"), \";\\n        var indices_indices = \").concat(x.type.indices, \"(0);\\n        \").concat((()=>n.length > 1 ? \"\\n          for (var i: u32 = 0; i < \".concat(n.length, \"; i++) {\\n            let index = \").concat(S.indicesGet(\"output_indices\", \"uniforms.gather_axis + i\"), \";\\n            \").concat(x.indicesSet(\"indices_indices\", \"i\", \"index\"), \";\\n          }\") : \"indices_indices = \".concat(S.indicesGet(\"output_indices\", \"uniforms.gather_axis\"), \";\"))(), \";\\n        var data_indices = \").concat(g.type.indices, \"(0);\\n        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {\\n          let index = \").concat(S.indicesGet(\"output_indices\", \"i\"), \";\\n          \").concat(g.indicesSet(\"data_indices\", \"i\", \"index\"), \";\\n        }\\n        var index_from_indices = \").concat(x.getByIndices(\"indices_indices\"), \";\\n        if (index_from_indices < 0) {\\n          index_from_indices += \").concat(r[i], \";\\n        }\\n        \").concat(g.indicesSet(\"data_indices\", \"uniforms.gather_axis\", \"u32(index_from_indices)\"), \";\\n        for (var i = uniforms.gather_axis + 1; i < \").concat(d.length, \"; i++) {\\n          let index = \").concat(S.indicesGet(\"output_indices\", \"i + \".concat(n.length, \" - 1\")), \";\\n          \").concat(g.indicesSet(\"data_indices\", \"i\", \"index\"), \";\\n        }\\n        let data_offset = \").concat(g.indicesToOffset(\"data_indices\"), \";\\n        let data_index = data_offset % 8;\\n        // Convert 4-bit packed data to 8-bit packed data.\\n        let packed_4bit_quantized_data = \").concat(g.getByOffset(\"data_offset / 8\"), \";\\n        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;\\n        let quantized_data_vec = \").concat(u ? \"unpack4xI8\" : \"unpack4xU8\", \"(u32(packed_8bit_quantized_data));\\n        let quantized_data = quantized_data_vec[data_index / 2];\\n        var scale_indices = data_indices;\\n        let quantize_axis_index = \").concat($.indicesGet(\"data_indices\", \"uniforms.quantize_axis\"), \" / uniforms.block_size;\\n        \").concat($.indicesSet(\"scale_indices\", \"uniforms.quantize_axis\", \"quantize_axis_index\"), \";\\n        var scale = \").concat($.getByIndices(\"scale_indices\"), \";\\n        \").concat((()=>v ? \"\\n              let zero_point_indices = scale_indices;\\n              let zero_point_offset = \".concat(v.indicesToOffset(\"zero_point_indices\"), \";\\n              let zero_point_index = zero_point_offset % 8;\\n              let packed_4bit_zero_points = \").concat(v.getByOffset(\"zero_point_offset / 8\"), \";\\n              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;\\n              let zero_point_vec = \").concat(u ? \"unpack4xI8\" : \"unpack4xU8\", \"(u32(packed_8bit_zero_points));\\n              let zero_point = zero_point_vec[zero_point_index / 2];\") : \"var zero_point = 0\")(), \";\\n        let dequantized_data = \").concat(Ee(p), \"(quantized_data - zero_point) * scale;\\n        \").concat(S.setByOffset(\"global_idx\", \"dequantized_data\"), \";\\n    }\");\n        };\n        return {\n            name: \"GatherBlockQuantized\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey, \";\").concat(e1.filter((y, g)=>g !== 1).map((y)=>y.dims.join(\"_\")).join(\";\")),\n                inputDependencies: Array.from({\n                    length: e1.length\n                }, (y, g)=>\"rank\")\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: d,\n                            dataType: p\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(l / 64)\n                    },\n                    programUniforms: h\n                }),\n            getShaderSource: _\n        };\n    }, Cd = (e1, t)=>{\n        let r = e1.inputs;\n        Mf(r, t), e1.compute(Rf(e1.inputs, t));\n    }, Ad = (e1)=>re({\n            blockSize: e1.blockSize,\n            gatherAxis: e1.gatherAxis,\n            quantizeAxis: e1.quantizeAxis\n        });\n});\nvar Uf, Nf, Ed, Pd, zd = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    Uf = (e1)=>{\n        if (!e1 || e1.length !== 2) throw new Error(\"GatherElements requires 2 inputs.\");\n        if (e1[0].dims.length < 1) throw new Error(\"GatherElements requires that the data input be rank >= 1.\");\n        if (e1[0].dims.length !== e1[1].dims.length) throw new Error(\"GatherElements requires that the data input and\\n                     indices input tensors be of same rank.\");\n    }, Nf = (e1, t)=>{\n        let r = e1[0].dims, n = e1[0].dataType, o = r.length, i = e1[1].dims, a = e1[1].dataType, d = C.normalizeAxis(t.axis, o), l = r[d], p = i.slice(0), m = C.size(p), u = E(\"input\", n, o), h = E(\"indicesInput\", a, i.length), _ = M(\"output\", n, p.length), y = [\n            {\n                type: 12,\n                data: m\n            },\n            {\n                type: 6,\n                data: l\n            },\n            {\n                type: 12,\n                data: d\n            }\n        ];\n        return y.push(...N(r, i, p)), {\n            name: \"GatherElements\",\n            shaderCache: {\n                inputDependencies: [\n                    \"rank\",\n                    \"rank\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: p,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(m / 64)\n                    },\n                    programUniforms: y\n                }),\n            getShaderSource: ($)=>\"\\n      \".concat($.registerUniform(\"outputSize\", \"u32\").registerUniform(\"axisDimLimit\", \"i32\").registerUniform(\"axis\", \"u32\").declareVariables(u, h, _), \"\\n      \").concat($.mainStart(), \"\\n      \").concat($.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\"), \"\\n\\n      let outputIndices = \").concat(_.offsetToIndices(\"global_idx\"), \";\\n\\n      var idx = \").concat(h.getByOffset(\"global_idx\"), \";\\n      if (idx < 0) {\\n        idx = idx + uniforms.axisDimLimit;\\n      }\\n      var inputIndices = \").concat(u.type.indices, \"(outputIndices);\\n      \").concat(u.indicesSet(\"inputIndices\", \"uniforms.axis\", \"u32(idx)\"), \";\\n      let value = \").concat(u.getByIndices(\"inputIndices\"), \";\\n\\n      \").concat(_.setByOffset(\"global_idx\", \"value\"), \";\\n  }\")\n        };\n    }, Ed = (e1)=>re({\n            axis: e1.axis\n        }), Pd = (e1, t)=>{\n        let r = e1.inputs;\n        Uf(r), e1.compute(Nf(e1.inputs, t));\n    };\n});\nvar Vf, Wf, Od, Dd, Bd = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    Vf = (e1)=>{\n        if (!e1) throw new Error(\"Input is missing\");\n        if (e1.length < 2 || e1.length > 3) throw new Error(\"Invaid input number.\");\n        if (e1.length === 3 && e1[2].dims.length > 2) throw new Error(\"Invalid input shape of C\");\n        if (e1[0].dataType !== e1[1].dataType || e1.length === 3 && e1[0].dataType !== e1[2].dataType) throw new Error(\"Input types are mismatched\");\n    }, Wf = (e1, t)=>{\n        let r = e1[0].dims.slice(), n = e1[1].dims.slice(), [o, i, a] = Vr.getShapeOfGemmResult(r, t.transA, n, t.transB, e1.length === 3 ? e1[2].dims : void 0), d = [\n            o,\n            i\n        ];\n        if (!d) throw new Error(\"Can't use gemm on the given tensors\");\n        let l = 16, p = Math.ceil(i / l), m = Math.ceil(o / l), u = !0, h = C.size(d), _ = [\n            {\n                type: 12,\n                data: u ? p : h\n            },\n            {\n                type: 12,\n                data: o\n            },\n            {\n                type: 12,\n                data: i\n            },\n            {\n                type: 12,\n                data: a\n            },\n            {\n                type: 1,\n                data: t.alpha\n            },\n            {\n                type: 1,\n                data: t.beta\n            }\n        ], y = [\n            \"type\",\n            \"type\"\n        ];\n        e1.length === 3 && (_.push(...N(e1[2].dims)), y.push(\"rank\")), _.push(...N(d));\n        let g = ($)=>{\n            let v = \"\";\n            t.transA && t.transB ? v = \"value += a[k * uniforms.M + m] * b[n * uniforms.K + k];\" : t.transA && !t.transB ? v = \"value += a[k * uniforms.M + m] * b[k * uniforms.N + n];\" : !t.transA && t.transB ? v = \"value += a[m * uniforms.K + k] * b[n * uniforms.K + k];\" : !t.transA && !t.transB && (v = \"value += a[m * uniforms.K + k] * b[k * uniforms.N + n];\");\n            let S = t.alpha === 1 ? \"\" : \"value *= uniforms.alpha;\", T = E(\"a\", e1[0].dataType, e1[0].dims), A = E(\"b\", e1[1].dataType, e1[1].dims), k = T.type.value, P = null, D = [\n                T,\n                A\n            ];\n            e1.length === 3 && (P = E(\"c\", e1[2].dataType, e1[2].dims.length), D.push(P));\n            let R = M(\"output\", e1[0].dataType, d.length);\n            D.push(R);\n            let G = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"M\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"N\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"K\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"alpha\",\n                    type: \"f32\"\n                },\n                {\n                    name: \"beta\",\n                    type: \"f32\"\n                }\n            ];\n            return \"\\n  \".concat($.registerUniforms(G).declareVariables(...D), \"\\n\\n  \").concat($.mainStart(), \"\\n    \").concat($.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n\\n    let m = global_idx / uniforms.N;\\n    let n = global_idx % uniforms.N;\\n\\n    var value = \").concat(k, \"(0);\\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\\n      \").concat(v, \"\\n    }\\n\\n    \").concat(S, \"\\n    \").concat((()=>P != null ? \"let cOffset = \".concat(P.broadcastedIndicesToOffset(\"vec2(m, n)\", R), \"; value += \").concat(k, \"(uniforms.beta) * \").concat(P.getByOffset(\"cOffset\"), \";\") : \"\")(), \"\\n    output[global_idx] = value;\\n  }\");\n        }, x = ($)=>{\n            let v = E(\"a\", e1[0].dataType, e1[0].dims), S = E(\"b\", e1[1].dataType, e1[1].dims), T = null, A = [\n                v,\n                S\n            ];\n            e1.length === 3 && (T = E(\"c\", e1[2].dataType, e1[2].dims.length), A.push(T));\n            let k = M(\"output\", e1[0].dataType, d.length);\n            A.push(k);\n            let P = [\n                {\n                    name: \"num_tile_n\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"M\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"N\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"K\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"alpha\",\n                    type: \"f32\"\n                },\n                {\n                    name: \"beta\",\n                    type: \"f32\"\n                }\n            ], D = \"\", R = \"\";\n            t.transA && t.transB ? (R = \"\\n      var col = tile_row_start + local_id.x;\\n      var row = k_start + local_id.y;\\n      if (col < uniforms.M && row < uniforms.K) {\\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];\\n      } else {\\n        tile_a[local_id.y][local_id.x] = \".concat(v.type.value, \"(0);\\n      }\\n\\n      col = k_start + local_id.x;\\n      row = tile_col_start + local_id.y;\\n      if (col < uniforms.K && row < uniforms.N) {\\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];\\n      } else {\\n        tile_b[local_id.y][local_id.x] = \").concat(S.type.value, \"(0);\\n      }\\n      \"), D = \"value += tile_a[k][local_id.y] * tile_b[local_id.x][k];\") : t.transA && !t.transB ? (R = \"\\n      var col = tile_row_start + local_id.x;\\n      var row = k_start + local_id.y;\\n      if (col < uniforms.M && row < uniforms.K) {\\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];\\n      } else {\\n        tile_a[local_id.y][local_id.x] = \".concat(v.type.value, \"(0);\\n      }\\n\\n      col = tile_col_start + local_id.x;\\n      row = k_start + local_id.y;\\n      if (col < uniforms.N && row < uniforms.K) {\\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];\\n      } else {\\n        tile_b[local_id.y][local_id.x] = \").concat(S.type.value, \"(0);\\n      }\\n      \"), D = \"value += tile_a[k][local_id.y] * tile_b[k][local_id.x];\") : !t.transA && t.transB ? (R = \"\\n      var col = k_start + local_id.x;\\n      var row = tile_row_start + local_id.y;\\n      if (col < uniforms.K && row < uniforms.M) {\\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];\\n      } else {\\n        tile_a[local_id.y][local_id.x] = \".concat(v.type.value, \"(0);\\n      }\\n\\n      col = k_start + local_id.x;\\n      row = tile_col_start + local_id.y;\\n      if (col < uniforms.K && row < uniforms.N) {\\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];\\n      } else {\\n        tile_b[local_id.y][local_id.x] = \").concat(S.type.value, \"(0);\\n      }\\n      \"), D = \"value += tile_a[local_id.y][k] * tile_b[local_id.x][k];\") : !t.transA && !t.transB && (R = \"\\n      var col = k_start + local_id.x;\\n      var row = tile_row_start + local_id.y;\\n      if (col < uniforms.K && row < uniforms.M) {\\n        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];\\n      } else {\\n        tile_a[local_id.y][local_id.x] = \".concat(v.type.value, \"(0);\\n      }\\n\\n      col = tile_col_start + local_id.x;\\n      row = k_start + local_id.y;\\n      if (col < uniforms.N && row < uniforms.K) {\\n        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];\\n      } else {\\n        tile_b[local_id.y][local_id.x] = \").concat(S.type.value, \"(0);\\n      }\\n      \"), D = \"value += tile_a[local_id.y][k] * tile_b[k][local_id.x];\");\n            let G = t.alpha === 1 ? \"\" : \"value *= uniforms.alpha;\";\n            return \"\\n  \".concat($.registerUniforms(P).declareVariables(...A), \"\\n  var<workgroup> tile_a: array<array<\").concat(v.type.storage, \", \").concat(l, \">, \").concat(l, \">;\\n  var<workgroup> tile_b: array<array<\").concat(S.type.storage, \", \").concat(l, \">, \").concat(l, \">;\\n  \").concat($.mainStart([\n                l,\n                l,\n                1\n            ]), \"\\n    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * \").concat(l, \";\\n    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * \").concat(l, \";\\n    let num_tiles = (uniforms.K - 1) / \").concat(l, \" + 1;\\n    var k_start = 0u;\\n    var value = \").concat(k.type.value, \"(0);\\n    for (var t: u32 = 0u; t < num_tiles; t++) {\\n      \").concat(R, \"\\n      k_start = k_start + \").concat(l, \";\\n      workgroupBarrier();\\n\\n      for (var k: u32 = 0u; k < \").concat(l, \"; k++) {\\n        \").concat(D, \"\\n      }\\n      workgroupBarrier();\\n    }\\n\\n    \").concat(G, \"\\n    let m = tile_row_start + local_id.y;\\n    let n = tile_col_start + local_id.x;\\n    \").concat((()=>T != null ? \"let cOffset = \".concat(T.broadcastedIndicesToOffset(\"vec2(m, n)\", k), \"; value += \").concat(k.type.value, \"(uniforms.beta) * \").concat(T.getByOffset(\"cOffset\"), \";\") : \"\")(), \"\\n    if (m < uniforms.M && n < uniforms.N) {\\n      output[m * uniforms.N + n] = value;\\n    }\\n  }\");\n        };\n        return u ? {\n            name: \"GemmShared\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey),\n                inputDependencies: y\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: d,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: p * m\n                    },\n                    programUniforms: _\n                }),\n            getShaderSource: x\n        } : {\n            name: \"Gemm\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey),\n                inputDependencies: y\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: d,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(h / 64)\n                    },\n                    programUniforms: _\n                }),\n            getShaderSource: g\n        };\n    }, Od = (e1)=>{\n        let t = e1.transA, r = e1.transB, n = e1.alpha, o = e1.beta;\n        return {\n            transA: t,\n            transB: r,\n            alpha: n,\n            beta: o,\n            cacheKey: \"\".concat(e1.transA, \";\").concat(e1.transB, \";\").concat(e1.alpha === 1)\n        };\n    }, Dd = (e1, t)=>{\n        Vf(e1.inputs), e1.compute(Wf(e1.inputs, t));\n    };\n});\nvar lt, _t, Ut, Nt, Lf, Gf, Hf, Ff, qf, Kf, jf, Yf, Md, Rd, Ud = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    [lt, _t, Ut, Nt] = [\n        0,\n        1,\n        2,\n        3\n    ], Lf = (e1)=>{\n        if (e1[0].dims.length !== 4) throw new Error(\"only 4-D tensor is supported.\");\n        if (e1[0].dims.length !== e1[1].dims.length) throw new Error(\"input dimensions must be equal to grid dimensions\");\n        if (e1[0].dims.length - 2 !== e1[1].dims[e1[1].dims.length - 1]) throw new Error(\"last dimension of grid must be equal to \".concat(e1[0].dims.length - 2));\n        if (e1[0].dims[0] !== e1[1].dims[0]) throw new Error(\"grid batch size must match input batch size\");\n    }, Gf = \"\\n  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {\\n    let cubic_alpha = -0.75f;\\n    let x_abs = abs(x);\\n    var coeffs: vec4<f32>;\\n    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);\\n    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);\\n    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);\\n    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);\\n    return coeffs;\\n  }\\n\", Hf = (e1)=>\"\\n  fn gs_bicubic_interpolate(p: mat4x4<\".concat(e1, \">, x: f32, y: f32) -> \").concat(e1, \" {\\n    var v: vec4<f32>;\\n    var coeffs = gs_get_cubic_coeffs(x);\\n    for (var i = 0; i < 4; i++) {\\n      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];\\n    }\\n    coeffs = gs_get_cubic_coeffs(y);\\n    let pixel = \").concat(e1, \"(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);\\n    return pixel;\\n  }\\n\"), Ff = (e1)=>\"\\n  fn gs_denormalize(n: f32, length: i32) -> f32 {\\n    \".concat(e1.alignCorners === 0 ? \"\\n    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]\\n    return ((n + 1.0) * f32(length) - 1.0) / 2.0;\\n    \" : \"\\n    // alignCorners: true => [-1, 1] to [0, length - 1]\\n    return (n + 1.0) / 2.0 * (f32(length - 1));\\n    \", \"\\n  }\\n\"), qf = (e1)=>\"\\n  \".concat(e1.paddingMode === \"reflection\" ? \"\\n      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {\\n        var dx = 0.0;\\n        var fx = f32(x);\\n        let range = x_max - x_min;\\n        if (fx < x_min) {\\n          dx = x_min - fx;\\n          let n = u32(dx / range);\\n          let r = dx - f32(n) * range;\\n          if (n % 2 == 0) {\\n            fx = x_min + r;\\n          } else {\\n            fx = x_max - r;\\n          }\\n        } else if (fx > x_max) {\\n          dx = fx - x_max;\\n          let n = u32(dx / range);\\n          let r = dx - f32(n) * range;\\n          if (n % 2 == 0) {\\n            fx = x_max - r;\\n          } else {\\n            fx = x_min + r;\\n          }\\n        }\\n        return u32(fx);\\n      }\" : \"\", \"\\n\"), Kf = (e1, t, r)=>\"\\n  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> \".concat(t, \" {\\n     var pixel = \").concat(t, \"(0);\\n     var indices = vec4<u32>(0);\\n     indices[\").concat(lt, \"] = batch;\\n     indices[\").concat(_t, \"] = channel;\") + (()=>{\n            switch(r.paddingMode){\n                case \"zeros\":\n                    return \"\\n          if (r >= 0 && r < H && c >=0 && c < W) {\\n            indices[\".concat(Ut, \"] = u32(r);\\n            indices[\").concat(Nt, \"] = u32(c);\\n          }\\n        \");\n                case \"border\":\n                    return \"\\n          indices[\".concat(Ut, \"] = u32(clamp(r, 0, H - 1));\\n          indices[\").concat(Nt, \"] = u32(clamp(c, 0, W - 1));\\n        \");\n                case \"reflection\":\n                    return \"\\n          indices[\".concat(Ut, \"] = gs_reflect(r, border[1], border[3]);\\n          indices[\").concat(Nt, \"] = gs_reflect(c, border[0], border[2]);\\n        \");\n                default:\n                    throw new Error(\"padding mode \".concat(r.paddingMode, \" is not supported\"));\n            }\n        })() + \"\\n    return \".concat(e1.getByIndices(\"indices\"), \";\\n  }\\n\"), jf = (e1, t, r)=>(()=>{\n            switch(r.mode){\n                case \"nearest\":\n                    return \"\\n          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[\".concat(lt, \"], indices[\").concat(_t, \"], border);\\n        \");\n                case \"bilinear\":\n                    return \"\\n          let x1 = i32(floor(x));\\n          let y1 = i32(floor(y));\\n          let x2 = x1 + 1;\\n          let y2 = y1 + 1;\\n\\n          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[\".concat(lt, \"], indices[\").concat(_t, \"], border);\\n          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[\").concat(lt, \"], indices[\").concat(_t, \"], border);\\n          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[\").concat(lt, \"], indices[\").concat(_t, \"], border);\\n          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[\").concat(lt, \"], indices[\").concat(_t, \"], border);\\n\\n          let dx2 = \").concat(t, \"(f32(x2) - x);\\n          let dx1 = \").concat(t, \"(x - f32(x1));\\n          let dy2 = \").concat(t, \"(f32(y2) - y);\\n          let dy1 = \").concat(t, \"(y - f32(y1));\\n          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);\\n        \");\n                case \"bicubic\":\n                    return \"\\n          let x0 = i32(floor(x)) - 1;\\n          let y0 = i32(floor(y)) - 1;\\n          var p: mat4x4<\".concat(t, \">;\\n          for (var h = 0; h < 4; h++) {\\n            for (var w = 0; w < 4; w++) {\\n              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[\").concat(lt, \"], indices[\").concat(_t, \"], border);\\n            }\\n          }\\n\\n          let dx = x - f32(x0 + 1);\\n          let dy = y - f32(y0 + 1);\\n          let result = gs_bicubic_interpolate(p, dx, dy);\\n        \");\n                default:\n                    throw new Error(\"mode \".concat(r.mode, \" is not supported\"));\n            }\n        })() + \"\".concat(e1.setByOffset(\"global_idx\", \"result\")), Yf = (e1, t)=>{\n        let r = E(\"x\", e1[0].dataType, e1[0].dims.length), n = [\n            e1[1].dims[0],\n            e1[1].dims[1],\n            e1[1].dims[2]\n        ], o = E(\"grid\", e1[1].dataType, n.length, 2), i = [\n            e1[0].dims[0],\n            e1[0].dims[1],\n            e1[1].dims[1],\n            e1[1].dims[2]\n        ];\n        t.format === \"NHWC\" && (i = [\n            e1[0].dims[0],\n            e1[1].dims[1],\n            e1[1].dims[2],\n            e1[0].dims[3]\n        ], [lt, _t, Ut, Nt] = [\n            0,\n            3,\n            1,\n            2\n        ]);\n        let a = M(\"output\", e1[0].dataType, i.length), d = r.type.value, l = C.size(i), p = [\n            {\n                type: 12,\n                data: l\n            },\n            ...N(e1[0].dims, n, i)\n        ], m = (u)=>\"\\n  \".concat(u.registerUniform(\"output_size\", \"u32\").declareVariables(r, o, a), \"\\n  \").concat(Gf, \"\\n  \").concat(Hf(d), \"\\n  \").concat(Ff(t), \"\\n  \").concat(qf(t), \"\\n  \").concat(Kf(r, d, t), \"\\n\\n  \").concat(u.mainStart(), \"\\n    \").concat(u.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n      let H_in = i32(uniforms.x_shape[\").concat(Ut, \"]);\\n      let W_in = i32(uniforms.x_shape[\").concat(Nt, \"]);\\n\\n      \").concat(t.alignCorners === 0 ? \"\\n      let x_min = -0.5;\\n      let x_max = f32(W_in) - 0.5;\\n      let y_min = -0.5;\\n      let y_max = f32(H_in) - 0.5;\\n      \" : \"\\n      let x_min = 0.0;\\n      let x_max = f32(W_in) - 1.0;\\n      let y_min = 0.0;\\n      let y_max = f32(H_in) - 1.0;\\n      \", \";\\n      let border = vec4<f32>(x_min, y_min, x_max, y_max);\\n\\n      let indices = \").concat(a.offsetToIndices(\"global_idx\"), \";\\n      var grid_indices = vec3<u32>(indices[\").concat(lt, \"], indices[\").concat(Ut, \"], indices[\").concat(Nt, \"]);\\n      let nxy = \").concat(o.getByIndices(\"grid_indices\"), \";\\n      var x = gs_denormalize(f32(nxy[0]), W_in);\\n      var y = gs_denormalize(f32(nxy[1]), H_in);\\n\\n      \").concat(jf(a, d, t), \"\\n  }\");\n        return {\n            name: \"GridSample\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey),\n                inputDependencies: [\n                    \"type\",\n                    \"type\"\n                ]\n            },\n            getRunData: (u)=>{\n                let h = C.size(i);\n                return {\n                    outputs: [\n                        {\n                            dims: i,\n                            dataType: u[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(h / 64)\n                    },\n                    programUniforms: p\n                };\n            },\n            getShaderSource: m\n        };\n    }, Md = (e1, t)=>{\n        Lf(e1.inputs), e1.compute(Yf(e1.inputs, t));\n    }, Rd = (e1)=>re({\n            alignCorners: e1.align_corners,\n            mode: e1.mode,\n            paddingMode: e1.padding_mode,\n            format: e1.format\n        });\n});\nvar Be, Xf, Vd, Nd, Jf, tr, Wd, So = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    Nr();\n    Fr();\n    ae();\n    dt();\n    Be = (e1, t)=>e1.length > t && e1[t].dims.length > 0 ? e1[t] : void 0, Xf = (e1, t)=>{\n        let r = e1[0], n = Be(e1, 1), o = Be(e1, 2), i = Be(e1, 3), a = Be(e1, 4), d = Be(e1, 5), l = Be(e1, 6), p = Be(e1, 7);\n        if (r.dims.length !== 3 && r.dims.length !== 5) throw new Error(\"Input query is expected to have 3 or 5 dimensions\");\n        let m = r.dims[0], u = r.dims[1], h = r.dims.length === 3 ? r.dims[2] : t.numHeads * r.dims[4], _ = u, y = 0, g = 0, x = Math.floor(h / t.numHeads);\n        if (l && p && C.size(l.dims) && C.size(p.dims)) {\n            if (l.dims.length !== 4) throw new Error('Input \"past_key\" is expected to have 4 dimensions');\n            if (l.dims[0] !== m || l.dims[1] !== t.numHeads || l.dims[3] !== x) throw new Error('Input \"past_key\" shape (batch_size, num_heads, past_sequence_length, head_size)');\n            if (p.dims[0] !== m || p.dims[1] !== t.numHeads || p.dims[3] !== x) throw new Error('Input \"past_value\" shape (batch_size, num_heads, past_sequence_length, head_size)');\n            if (l.dims[2] !== p.dims[2]) throw new Error('Input \"past_key\" and \"past_value\" shall have same dim 2 (past_sequence_length)');\n            if (p.dims.length !== 4) throw new Error('Input \"past_value\" is expected to have 4 dimensions');\n            y = l.dims[2], g = l.dims[2];\n        } else if (l && C.size(l.dims) || p && C.size(p.dims)) throw new Error('Input \"past_key\" and \"past_value\" shall be both present or both absent');\n        let $;\n        if (n && C.size(n.dims) > 0) {\n            if (r.dims.length !== 3) throw new Error('Input \"query\" is expected to have 3 dimensions when key is given');\n            if (n.dims.length < 3 || n.dims.length > 5) throw new Error('Input \"key\" is expected to have 3, 4, or 5 dimensions');\n            if (r.dims[0] !== n.dims[0]) throw new Error('Input \"query\" and \"key\" shall have same dim 0 (batch size)');\n            if (n.dims.length === 3) {\n                if (n.dims[2] !== r.dims[2]) throw new Error('Input \"query\" and \"key\" shall have same dim 2 (hidden_size)');\n                $ = 2, _ = n.dims[1];\n            } else if (n.dims.length === 5) {\n                if (n.dims[2] !== t.numHeads || n.dims[3] !== 2 || n.dims[4] !== x) throw new Error('Expect \"key\" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');\n                if (o) throw new Error('Expect \"value\" be none when \"key\" has packed kv format.');\n                $ = 5, _ = n.dims[1];\n            } else {\n                if (n.dims[1] !== t.numHeads || n.dims[3] !== x) throw new Error('Expect \"key\" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');\n                $ = 0, _ = n.dims[2];\n            }\n        } else {\n            if (r.dims.length !== 5) throw new Error('Input \"query\" is expected to have 5 dimensions when key is empty');\n            if (r.dims[2] !== t.numHeads || r.dims[3] !== 3) throw new Error('Expect \"query\" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');\n            $ = 3;\n        }\n        if (i && C.size(i.dims) > 0) {\n            if (i.dims.length !== 1) throw new Error('Input \"bias\" is expected to have 1 dimension');\n            if (n && n.dims.length === 5 && n.dims[3] === 2) throw new Error(\"bias is not allowed for packed kv.\");\n        }\n        let v = y + _, S = 0;\n        if (a && C.size(a.dims) > 0) {\n            S = 8;\n            let P = a.dims;\n            throw P.length === 1 ? P[0] === m ? S = 1 : P[0] === 3 * m + 2 && (S = 3) : P.length === 2 && P[0] === m && P[1] === v && (S = 5), S === 8 ? new Error('Input \"key_padding_mask\" shape shall be (batch_size) or (batch_size, total_sequence_length)') : new Error(\"Mask not supported\");\n        }\n        let T = !1, A = h;\n        if (o && C.size(o.dims) > 0) {\n            if (o.dims.length !== 3 && o.dims.length !== 4) throw new Error('Input \"value\" is expected to have 3 or 4 dimensions');\n            if (r.dims[0] !== o.dims[0]) throw new Error('Input \"query\" and \"value\" shall have same dim 0 (batch_size)');\n            if (o.dims.length === 3) {\n                if (_ !== o.dims[1]) throw new Error('Input \"key\" and \"value\" shall have the same dim 1 (kv_sequence_length)');\n                A = o.dims[2];\n            } else {\n                if (_ !== o.dims[2]) throw new Error('Input \"key\" and \"value\" shall have the same dim 2 (kv_sequence_length)');\n                A = o.dims[1] * o.dims[3], T = !0;\n            }\n        }\n        let k = !1;\n        if (a && C.size(a.dims) > 0) throw new Error(\"Key padding mask is not supported\");\n        if (d && C.size(d.dims) > 0) {\n            if (d.dims.length !== 4) throw new Error('Input \"attention_bias\" is expected to have 4 dimensions');\n            if (d.dims[0] !== m || d.dims[1] !== t.numHeads || d.dims[2] !== u || d.dims[3] !== v) throw new Error('Expect \"attention_bias\" shape (batch_size, num_heads, sequence_length, total_sequence_length)');\n        }\n        return {\n            batchSize: m,\n            sequenceLength: u,\n            pastSequenceLength: y,\n            kvSequenceLength: _,\n            totalSequenceLength: v,\n            maxSequenceLength: g,\n            inputHiddenSize: 0,\n            hiddenSize: h,\n            vHiddenSize: A,\n            headSize: x,\n            vHeadSize: Math.floor(A / t.numHeads),\n            numHeads: t.numHeads,\n            isUnidirectional: !1,\n            pastPresentShareBuffer: !1,\n            maskFilterValue: t.maskFilterValue,\n            maskType: S,\n            scale: t.scale,\n            broadcastResPosBias: k,\n            passPastInKv: T,\n            qkvFormat: $\n        };\n    }, Vd = (e1)=>re({\n            ...e1\n        }), Nd = re({\n        perm: [\n            0,\n            2,\n            1,\n            3\n        ]\n    }), Jf = (e1, t, r, n, o, i, a)=>{\n        let d = [\n            n,\n            o,\n            i\n        ], l = C.size(d), p = [\n            {\n                type: 12,\n                data: l\n            },\n            {\n                type: 12,\n                data: a\n            },\n            {\n                type: 12,\n                data: i\n            }\n        ], m = (u)=>{\n            let h = M(\"qkv_with_bias\", t.dataType, d), _ = E(\"qkv\", t.dataType, d), y = E(\"bias\", r.dataType, d), g = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"bias_offset\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"hidden_size\",\n                    type: \"u32\"\n                }\n            ];\n            return \"\\n  \".concat(u.registerUniforms(g).declareVariables(_, y, h), \"\\n  \").concat(u.mainStart(), \"\\n    \").concat(u.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\\n\\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\\n  }\");\n        };\n        return e1.compute({\n            name: \"MultiHeadAttentionAddBias\",\n            shaderCache: {\n                inputDependencies: [\n                    \"type\",\n                    \"type\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: d,\n                            dataType: t.dataType,\n                            gpuDataType: 0\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(l / 64)\n                    },\n                    programUniforms: p\n                }),\n            getShaderSource: m\n        }, {\n            inputs: [\n                t,\n                r\n            ],\n            outputs: [\n                -1\n            ]\n        })[0];\n    }, tr = (e1, t, r, n, o, i, a, d)=>{\n        let l = i;\n        if (a && C.size(a.dims) > 0) {\n            if (n === 1) throw new Error(\"AddBiasReshape is not implemented. Please export your model with packed QKV or KV\");\n            return l = Jf(e1, i, a, t, n, r * o, d), l = l.reshape([\n                t,\n                n,\n                r,\n                o\n            ]), r === 1 || n === 1 ? l : e1.compute(Pe(l, Nd.perm), {\n                inputs: [\n                    l\n                ],\n                outputs: [\n                    -1\n                ]\n            })[0];\n        } else return i.dims.length === 3 && (l = i.reshape([\n            t,\n            n,\n            r,\n            o\n        ])), r === 1 || n === 1 ? l : e1.compute(Pe(l, Nd.perm), {\n            inputs: [\n                l\n            ],\n            outputs: [\n                -1\n            ]\n        })[0];\n    }, Wd = (e1, t)=>{\n        let r = Xf(e1.inputs, t), n = e1.inputs[0], o = Be(e1.inputs, 1), i = Be(e1.inputs, 2), a = Be(e1.inputs, 3), d = Be(e1.inputs, 4), l = Be(e1.inputs, 5), p = Be(e1.inputs, 6), m = Be(e1.inputs, 7);\n        if (n.dims.length === 5) throw new Error(\"Packed QKV is not implemented\");\n        if ((o === null || o === void 0 ? void 0 : o.dims.length) === 5) throw new Error(\"Packed KV is not implemented\");\n        let u = o && i && o.dims.length === 4 && i.dims.length === 4, h = tr(e1, r.batchSize, r.numHeads, r.sequenceLength, r.headSize, n, a, 0);\n        if (u) return Rt(e1, h, o, i, d, void 0, p, m, l, r);\n        if (!o || !i) throw new Error(\"key and value must be provided\");\n        let _ = tr(e1, r.batchSize, r.numHeads, r.kvSequenceLength, r.headSize, o, a, r.hiddenSize), y = tr(e1, r.batchSize, r.numHeads, r.kvSequenceLength, r.vHeadSize, i, a, 2 * r.hiddenSize);\n        Rt(e1, h, _, y, d, void 0, p, m, l, r);\n    };\n});\nvar eh, th, rh, nh, To, Ld, Gd, Io = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    eh = (e1)=>{\n        if (!e1 || e1.length < 1) throw new Error(\"too few inputs\");\n    }, th = (e1, t)=>{\n        let r = [], n = t.numOutputs;\n        return e1[1].dims[0] > 0 && (e1[1].getBigInt64Array().forEach((o)=>r.push(Number(o))), n = r.length), re({\n            numOutputs: n,\n            axis: t.axis,\n            splitSizes: r\n        });\n    }, rh = (e1)=>\"\\nfn calculateOutputIndex(index: u32) -> u32 {\\n    for (var i: u32 = 0u; i < \".concat(e1, \"u; i += 1u ) {\\n    if (index < \").concat(F(\"uniforms.size_in_split_axis\", \"i\", e1), \") {\\n        return i;\\n    }\\n    }\\n    return \").concat(e1, \"u;\\n}\"), nh = (e1)=>{\n        let t = e1.length, r = [];\n        for(let n = 0; n < t; ++n){\n            let o = e1[n].setByIndices(\"indices\", \"input[global_idx]\");\n            t === 1 ? r.push(o) : n === 0 ? r.push(\"if (output_number == \".concat(n, \"u) { \").concat(o, \" }\")) : n === t - 1 ? r.push(\"else { \".concat(o, \" }\")) : r.push(\"else if (output_number == \".concat(n, \") { \").concat(o, \" }\"));\n        }\n        return \"\\n      fn writeBufferData(output_number: u32, indices: \".concat(e1[0].type.indices, \", global_idx: u32) {\\n        \").concat(r.join(\"\\n\"), \"\\n      }\");\n    }, To = (e1, t)=>{\n        let r = e1[0].dims, n = C.size(r), o = e1[0].dataType, i = C.normalizeAxis(t.axis, r.length), a = new Array(t.numOutputs), d = E(\"input\", o, r.length), l = new Array(t.numOutputs), p = [], m = [], u = 0, h = [\n            {\n                type: 12,\n                data: n\n            }\n        ];\n        for(let y = 0; y < t.numOutputs; y++){\n            u += t.splitSizes[y], l[y] = u;\n            let g = r.slice();\n            g[i] = t.splitSizes[y], m.push(g), a[y] = M(\"output\".concat(y), o, g.length), p.push({\n                dims: m[y],\n                dataType: e1[0].dataType\n            });\n        }\n        h.push({\n            type: 12,\n            data: l\n        }, ...N(r, ...m));\n        let _ = (y)=>\"\\n  \".concat(y.registerUniform(\"input_size\", \"u32\").registerUniform(\"size_in_split_axis\", \"u32\", l.length).declareVariables(d, ...a), \"\\n  \").concat(rh(l.length), \"\\n  \").concat(nh(a), \"\\n\\n  \").concat(y.mainStart(), \"\\n    \").concat(y.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.input_size\"), \"\\n\\n    var indices = \").concat(d.offsetToIndices(\"global_idx\"), \";\\n    var index = \").concat(d.indicesGet(\"indices\", i), \";\\n    let output_number = calculateOutputIndex(index);\\n    if (output_number != 0) {\\n      index -= \").concat(F(\"uniforms.size_in_split_axis\", \"output_number - 1u\", l.length), \";\\n      \").concat(d.indicesSet(\"indices\", i, \"index\"), \";\\n    }\\n    writeBufferData(output_number, indices, global_idx);\\n  }\");\n        return {\n            name: \"Split\",\n            shaderCache: {\n                hint: t.cacheKey,\n                inputDependencies: [\n                    \"rank\"\n                ]\n            },\n            getShaderSource: _,\n            getRunData: ()=>({\n                    outputs: p,\n                    dispatchGroup: {\n                        x: Math.ceil(n / 64)\n                    },\n                    programUniforms: h\n                })\n        };\n    }, Ld = (e1, t)=>{\n        eh(e1.inputs);\n        let r = e1.inputs.length === 1 ? t : th(e1.inputs, t);\n        e1.compute(To(e1.inputs, r), {\n            inputs: [\n                0\n            ]\n        });\n    }, Gd = (e1)=>{\n        let t = e1.axis, r = e1.splitSizes, n = e1.numOutputs < 0 ? r.length : e1.numOutputs;\n        if (n !== r.length) throw new Error(\"numOutputs and splitSizes lengh must be equal\");\n        return re({\n            axis: t,\n            numOutputs: n,\n            splitSizes: r\n        });\n    };\n});\nvar oh, ih, Hd, Fd, qd = U(()=>{\n    \"use strict\";\n    Se();\n    Fr();\n    So();\n    Io();\n    dt();\n    oh = (e1, t)=>{\n        if (t.doRotary) throw new Error(\"GroupQuerryAttention do_rotary attribute is not supported\");\n        if (t.doRotary && e1.length <= 7) throw new Error(\"cos_cache and sin_cache inputs are required if do_rotary is specified\");\n        let r = e1[0], n = e1[1], o = e1[2], i = e1[3], a = e1[4];\n        if (t.localWindowSize !== -1) throw new Error(\"Local attention is not supported\");\n        if (t.softcap !== 0) throw new Error(\"Softcap is not supported\");\n        if (t.rotaryInterleaved !== 0) throw new Error(\"Rotary interleaved is not supported\");\n        if (t.smoothSoftmax) throw new Error(\"Smooth softmax is not supported\");\n        if (r.dims.length !== 3 && r.dims.length !== 5) throw new Error(\"Input query is expected to have 3 or 5 dimensions\");\n        let d = !1, l = r.dims[0], p = r.dims[1], m = r.dims.length === 3 ? d ? r.dims[2] / 3 : r.dims[2] : t.numHeads * r.dims[4], u = p, h = 0, _ = !n || n.dims.length === 0, y = Math.floor(_ ? m / (t.numHeads + 2 * t.kvNumHeads) : m / t.numHeads);\n        _ && (m = y * t.numHeads);\n        let g = i && i.dims.length !== 0, x = a && a.dims.length !== 0;\n        if (g && i.dims.length === 4 && i.dims[0] === l && i.dims[1] !== t.kvNumHeads && i.dims[2] === t.kvNumHeads && i.dims[3] === y) throw new Error(\"BSNH pastKey/pastValue is not supported\");\n        if (g && x) {\n            if (i.dims.length !== 4) throw new Error('Input \"past_key\" is expected to have 4 dimensions');\n            if (a.dims.length !== 4) throw new Error('Input \"past_value\" is expected to have 4 dimensions');\n            h = i.dims[2];\n        } else if (g || x) throw new Error('Input \"past_key\" and \"past_value\" shall be both present or both absent');\n        let v = 1;\n        if (n && n.dims.length > 0) {\n            if (r.dims.length !== 3) throw new Error('Input \"query\" is expected to have 3 dimensions when key is given');\n            if (n.dims.length < 3 || n.dims.length > 5) throw new Error('Input \"key\" is expected to have 3, 4, or 5 dimensions');\n            if (r.dims[0] !== n.dims[0]) throw new Error('Input \"query\" and \"key\" shall have same dim 0 (batch size)');\n            if (n.dims.length === 3) {\n                if (r.dims[2] % n.dims[2] !== 0) throw new Error('Dimension 2 of \"query\" should be a multiple of \"key\"');\n                u = n.dims[1];\n            } else if (n.dims.length === 5) {\n                if (n.dims[2] !== t.numHeads || n.dims[3] !== 2 || n.dims[4] !== y) throw new Error('Expect \"key\" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');\n                if (o) throw new Error('Expect \"value\" be none when \"key\" has packed kv format.');\n                u = n.dims[1];\n            } else {\n                if (n.dims[1] !== t.numHeads || n.dims[3] !== y) throw new Error('Expect \"key\" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');\n                u = n.dims[2];\n            }\n        } else {\n            if (r.dims.length !== 3 && r.dims.length !== 5) throw new Error('Input \"query\" is expected to have 3 or 5 dimensions when key is empty');\n            if (r.dims.length === 5 && (r.dims[2] !== t.numHeads || r.dims[3] !== 3)) throw new Error('Expect \"query\" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');\n            v = 3;\n        }\n        let S = 0, T = !1, A = t.kvNumHeads ? y * t.kvNumHeads : m;\n        if (o && o.dims.length > 0) {\n            if (o.dims.length !== 3 && o.dims.length !== 4) throw new Error('Input \"value\" is expected to have 3 or 4 dimensions');\n            if (r.dims[0] !== o.dims[0]) throw new Error('Input \"query\" and \"value\" shall have same dim 0 (batch_size)');\n            if (o.dims.length === 3) {\n                if (u !== o.dims[1]) throw new Error('Input \"key\" and \"value\" shall have the same dim 1 (kv_sequence_length)');\n                A = o.dims[2];\n            } else {\n                if (u !== o.dims[2]) throw new Error('Input \"past_key\" and \"past_value\" shall have the same dim 2 (kv_sequence_length)');\n                A = o.dims[1] * o.dims[3], T = !0;\n            }\n        }\n        let k = e1.length > 4 ? e1[5] : void 0;\n        if (k && k.dims.length !== 1 && k.dims[0] !== l) throw new Error('Input \"seqlens\" is expected to have 1 dimension and the same dim 0 as batch_size');\n        let P = -1, D = -1, R = !1;\n        return {\n            batchSize: l,\n            sequenceLength: p,\n            pastSequenceLength: h,\n            kvSequenceLength: u,\n            totalSequenceLength: P,\n            maxSequenceLength: D,\n            inputHiddenSize: 0,\n            hiddenSize: m,\n            vHiddenSize: A,\n            headSize: y,\n            vHeadSize: Math.floor(A / t.kvNumHeads),\n            numHeads: t.numHeads,\n            kvNumHeads: t.kvNumHeads,\n            nReps: t.numHeads / t.kvNumHeads,\n            pastPresentShareBuffer: !1,\n            maskType: S,\n            scale: t.scale,\n            broadcastResPosBias: R,\n            passPastInKv: T,\n            qkvFormat: v\n        };\n    }, ih = re({\n        perm: [\n            0,\n            2,\n            1,\n            3\n        ]\n    }), Hd = (e1, t, r)=>{\n        let n = t, o = r.kvNumHeads;\n        return t.dims.length === 3 && r.kvSequenceLength !== 0 && (n = t.reshape([\n            r.batchSize,\n            r.kvSequenceLength,\n            o,\n            r.headSize\n        ]), n = e1.compute(Pe(n, ih.perm), {\n            inputs: [\n                n\n            ],\n            outputs: [\n                -1\n            ]\n        })[0]), n;\n    }, Fd = (e1, t)=>{\n        var _e_inputs_;\n        let r = oh(e1.inputs, t);\n        if (e1.inputs[0].dims.length === 5) throw new Error(\"Packed QKV is not implemented\");\n        if (((_e_inputs_ = e1.inputs[1]) === null || _e_inputs_ === void 0 ? void 0 : _e_inputs_.dims.length) === 5) throw new Error(\"Packed KV is not implemented\");\n        let n = e1.inputs[0], o = e1.inputs[1] && e1.inputs[1].dims.length > 0 ? e1.inputs[1] : void 0, i = e1.inputs[2] && e1.inputs[2].dims.length > 0 ? e1.inputs[2] : void 0, a = e1.inputs[3] && e1.inputs[3].dims.length !== 0 ? e1.inputs[3] : void 0, d = e1.inputs[4] && e1.inputs[4].dims.length !== 0 ? e1.inputs[4] : void 0, l = e1.inputs.length > 4 ? e1.inputs[5] : void 0, p = e1.inputs.length > 5 ? e1.inputs[6] : void 0, m = r.kvNumHeads ? r.kvNumHeads : r.numHeads, u = re({\n            axis: 2,\n            numOutputs: 3,\n            splitSizes: [\n                r.numHeads * r.headSize,\n                m * r.headSize,\n                m * r.headSize\n            ]\n        }), [h, _, y] = !o && !i ? e1.compute(To([\n            n\n        ], u), {\n            inputs: [\n                n\n            ],\n            outputs: [\n                -1,\n                -1,\n                -1\n            ]\n        }) : [\n            n,\n            o,\n            i\n        ], g = tr(e1, r.batchSize, r.numHeads, r.sequenceLength, r.headSize, h, void 0, 0);\n        Rt(e1, g, Hd(e1, _, r), Hd(e1, y, r), void 0, void 0, a, d, void 0, r, l, p);\n    };\n});\nvar Kd, ah, sh, jd, Yd = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    dt();\n    ae();\n    Kd = (e1, t, r, n, o, i, a, d)=>{\n        let l = me(i), p = l === 1 ? \"f32\" : \"vec\".concat(l, \"f\"), m = l === 1 ? \"vec2f\" : \"mat2x\".concat(l, \"f\"), u = o * a, h = 64;\n        u === 1 && (h = 256);\n        let _ = [\n            o,\n            a,\n            i / l\n        ], y = [\n            o,\n            a,\n            2\n        ], g = [\n            \"rank\",\n            \"type\",\n            \"type\"\n        ], x = [];\n        x.push(...N(_, y));\n        let $ = (v)=>{\n            let S = E(\"x\", t.dataType, 3, l), T = E(\"scale\", r.dataType, r.dims), A = E(\"bias\", n.dataType, n.dims), k = M(\"output\", 1, 3, 2), P = [\n                S,\n                T,\n                A,\n                k\n            ];\n            return \"\\n  var<workgroup> workgroup_shared : array<\".concat(m, \", \").concat(h, \">;\\n  const workgroup_size = \").concat(h, \"u;\\n  \").concat(v.declareVariables(...P), \"\\n  \").concat(v.mainStart(h), \"\\n    let batch = workgroup_index / uniforms.x_shape[1];\\n    let channel = workgroup_index % uniforms.x_shape[1];\\n    let hight = uniforms.x_shape[2];\\n    // initialize workgroup memory\\n    var sum = \").concat(p, \"(0);\\n    var squared_sum = \").concat(p, \"(0);\\n    for (var h = local_idx; h < hight; h += workgroup_size) {\\n      let value = \").concat(p, \"(\").concat(S.get(\"batch\", \"channel\", \"h\"), \");\\n      sum += value;\\n      squared_sum += value * value;\\n    }\\n    workgroup_shared[local_idx] = \").concat(m, \"(sum, squared_sum);\\n    workgroupBarrier();\\n\\n    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {\\n      if (local_idx < currSize) {\\n        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];\\n      }\\n      workgroupBarrier();\\n    }\\n    if (local_idx == 0) {\\n      let sum_final = \").concat(Fe(\"workgroup_shared[0][0]\", l), \" / f32(hight * \").concat(l, \");\\n      let squared_sum_final = \").concat(Fe(\"workgroup_shared[0][1]\", l), \" / f32(hight * \").concat(l, \");\\n\\n      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(\").concat(d, \"));\\n      let channel_scale = inv_std_dev * f32(scale[channel]);\\n      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;\\n      output[workgroup_index] = vec2f(channel_scale, channel_shift);\\n    }\\n  }\");\n        };\n        return e1.compute({\n            name: \"InstanceNormComputeChannelScaleShift\",\n            shaderCache: {\n                hint: \"\".concat(l, \";\").concat(d, \";\").concat(h),\n                inputDependencies: g\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: y,\n                            dataType: 1\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: u\n                    },\n                    programUniforms: x\n                }),\n            getShaderSource: $\n        }, {\n            inputs: [\n                t,\n                r,\n                n\n            ],\n            outputs: [\n                -1\n            ]\n        })[0];\n    }, ah = (e1, t, r)=>{\n        let n = t[0].dims, o = n, i = 2, a = n[0], d = n[1], l = C.sizeFromDimension(n, i), p = me(l), m = C.size(o) / p, u = Kd(e1, t[0], t[1], t[2], a, l, d, r.epsilon), h = [\n            a,\n            d,\n            l / p\n        ], _ = [\n            a,\n            d\n        ], y = [\n            \"type\",\n            \"none\"\n        ], g = (x)=>{\n            let $ = E(\"x\", t[0].dataType, h.length, p), v = E(\"scale_shift\", 1, _.length, 2), S = M(\"output\", t[0].dataType, h.length, p), T = [\n                $,\n                v,\n                S\n            ];\n            return \"\\n  \".concat(x.registerUniform(\"output_size\", \"u32\").declareVariables(...T), \"\\n  \").concat(x.mainStart(), \"\\n  \").concat(x.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n      let outputIndices = \").concat(S.offsetToIndices(\"global_idx\"), \";\\n      let batch = outputIndices[0];\\n      let channel = outputIndices[1];\\n      let scale_shift = \").concat(v.getByIndices(\"vec2<u32>(batch, channel)\"), \";\\n      let value = \").concat($.getByOffset(\"global_idx\"), \" * \").concat(S.type.value, \"(scale_shift.x) + \").concat(S.type.value, \"(scale_shift.y);\\n      \").concat(S.setByOffset(\"global_idx\", \"value\"), \";\\n  }\");\n        };\n        e1.compute({\n            name: \"InstanceNormalization\",\n            shaderCache: {\n                hint: \"\".concat(p),\n                inputDependencies: y\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: o,\n                            dataType: t[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(m / 64)\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: m\n                        },\n                        ...N(h, _, h)\n                    ]\n                }),\n            getShaderSource: g\n        }, {\n            inputs: [\n                t[0],\n                u\n            ]\n        });\n    }, sh = (e1, t, r)=>{\n        let n = t[0].dims, o = n, i = n[0], a = n[n.length - 1], d = C.sizeFromDimension(n, 1) / a, l = me(a), p = C.size(o) / l, m = [\n            {\n                type: 12,\n                data: d\n            },\n            {\n                type: 12,\n                data: Math.floor(a / l)\n            }\n        ], u = [\n            \"type\",\n            \"type\"\n        ], h = !1, _ = [\n            0,\n            n.length - 1\n        ];\n        for(let $ = 0; $ < n.length - 2; $++)h = h || n[$ + 1] !== 1, _.push($ + 1);\n        h = h && n[n.length - 1] !== 1;\n        let y = h ? e1.compute(Pe(e1.inputs[0], _), {\n            inputs: [\n                e1.inputs[0]\n            ],\n            outputs: [\n                -1\n            ]\n        })[0] : e1.inputs[0].reshape(Array.from({\n            length: n.length\n        }, ($, v)=>n[_[v]])), g = Kd(e1, y, t[1], t[2], i, d, a, r.epsilon), x = ($)=>{\n            let v = _e(t[0].dataType), S = l === 1 ? \"vec2f\" : \"mat\".concat(l, \"x2f\"), T = (P)=>{\n                let D = P === 0 ? \"x\" : \"y\", R = l === 1 ? \"f32\" : \"vec\".concat(l, \"f\");\n                switch(l){\n                    case 1:\n                        return \"\".concat(v, \"(\").concat(R, \"(scale.\").concat(D, \"))\");\n                    case 2:\n                        return \"vec2<\".concat(v, \">(\").concat(R, \"(scale[0].\").concat(D, \", scale[1].\").concat(D, \"))\");\n                    case 4:\n                        return \"vec4<\".concat(v, \">(\").concat(R, \"(scale[0].\").concat(D, \", scale[1].\").concat(D, \", scale[2].\").concat(D, \", scale[3].\").concat(D, \"))\");\n                    default:\n                        throw new Error(\"Not supported compoents \".concat(l));\n                }\n            }, A = E(\"input\", t[0].dataType, t[0].dims, l), k = M(\"output\", t[0].dataType, o, l);\n            return \"\\n  @group(0) @binding(0) var<storage, read> input : array<\".concat(A.type.storage, \">;\\n  @group(0) @binding(1) var<storage, read> scale_input : array<\").concat(S, \">;\\n  @group(0) @binding(2) var<storage, read_write> output : array<\").concat(k.type.storage, \">;\\n  struct Uniforms {H: u32, C : u32};\\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\\n\\n  \").concat($.mainStart(), \"\\n    let current_image_number = global_idx / (uniforms.C * uniforms.H);\\n    let current_channel_number = global_idx % uniforms.C;\\n\\n    let scale_offset = current_image_number * uniforms.C + current_channel_number;\\n    let scale = scale_input[scale_offset];\\n    output[global_idx] = fma(input[global_idx], \").concat(T(0), \", \").concat(T(1), \");\\n  }\");\n        };\n        e1.compute({\n            name: \"InstanceNormalizationNHWC\",\n            shaderCache: {\n                hint: \"\".concat(l),\n                inputDependencies: u\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: o,\n                            dataType: t[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(p / 64)\n                    },\n                    programUniforms: m\n                }),\n            getShaderSource: x\n        }, {\n            inputs: [\n                t[0],\n                g\n            ]\n        });\n    }, jd = (e1, t)=>{\n        t.format === \"NHWC\" ? sh(e1, e1.inputs, t) : ah(e1, e1.inputs, t);\n    };\n});\nvar uh, dh, Zd, Qd = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    uh = (e1)=>{\n        if (!e1 || e1.length < 2) throw new Error(\"layerNorm requires at least 2 inputs.\");\n    }, dh = (e1, t, r)=>{\n        let n = t.simplified, o = e1[0].dims, i = e1[1], a = !n && e1[2], d = o, l = C.normalizeAxis(t.axis, o.length), p = C.sizeToDimension(o, l), m = C.sizeFromDimension(o, l), u = C.size(i.dims), h = a ? C.size(a.dims) : 0;\n        if (u !== m || a && h !== m) throw new Error(\"Size of X.shape()[axis:] == \".concat(m, \".\\n       Size of scale and bias (if provided) must match this.\\n       Got scale size of \").concat(u, \" and bias size of \").concat(h));\n        let _ = [];\n        for(let A = 0; A < o.length; ++A)A < l ? _.push(o[A]) : _.push(1);\n        let y = me(m), g = [\n            \"type\",\n            \"type\"\n        ], x = [\n            {\n                type: 12,\n                data: p\n            },\n            {\n                type: 1,\n                data: m\n            },\n            {\n                type: 12,\n                data: Math.floor(m / y)\n            },\n            {\n                type: 1,\n                data: t.epsilon\n            }\n        ];\n        a && g.push(\"type\");\n        let $ = r > 1, v = r > 2, S = (A)=>{\n            let k = _e(e1[0].dataType), P = [\n                E(\"x\", e1[0].dataType, e1[0].dims, y),\n                E(\"scale\", i.dataType, i.dims, y)\n            ];\n            a && P.push(E(\"bias\", a.dataType, a.dims, y)), P.push(M(\"output\", e1[0].dataType, d, y)), $ && P.push(M(\"mean_data_output\", 1, _)), v && P.push(M(\"inv_std_output\", 1, _));\n            let D = [\n                {\n                    name: \"norm_count\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"norm_size\",\n                    type: \"f32\"\n                },\n                {\n                    name: \"norm_size_vectorized\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"epsilon\",\n                    type: \"f32\"\n                }\n            ];\n            return \"\\n  \".concat(A.registerUniforms(D).declareVariables(...P), \"\\n  \").concat(A.mainStart(), \"\\n    \").concat(A.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.norm_count\"), \"\\n    let offset = global_idx * uniforms.norm_size_vectorized;\\n    var mean_vector = \").concat(uo(\"f32\", y), \";\\n    var mean_square_vector = \").concat(uo(\"f32\", y), \";\\n\\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\\n      let value = \").concat(Et(k, y, \"x[h + offset]\"), \";\\n      mean_vector += value;\\n      mean_square_vector += value * value;\\n    }\\n    let mean = \").concat(Fe(\"mean_vector\", y), \" / uniforms.norm_size;\\n    let inv_std_dev = inverseSqrt(\").concat(Fe(\"mean_square_vector\", y), \" / uniforms.norm_size \").concat(n ? \"\" : \"- mean * mean\", \" + uniforms.epsilon);\\n\\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\\n      let f32input = \").concat(Et(k, y, \"x[j + offset]\"), \";\\n      let f32scale = \").concat(Et(k, y, \"scale[j]\"), \";\\n      output[j + offset] = \").concat(P[0].type.value, \"((f32input \").concat(n ? \"\" : \"- mean\", \") * inv_std_dev * f32scale\\n        \").concat(a ? \"+ \".concat(Et(k, y, \"bias[j]\")) : \"\", \"\\n      );\\n    }\\n\\n    \").concat($ ? \"mean_data_output[global_idx] = mean\" : \"\", \";\\n    \").concat(v ? \"inv_std_output[global_idx] = inv_std_dev\" : \"\", \";\\n  }\");\n        }, T = [\n            {\n                dims: d,\n                dataType: e1[0].dataType\n            }\n        ];\n        return $ && T.push({\n            dims: _,\n            dataType: 1\n        }), v && T.push({\n            dims: _,\n            dataType: 1\n        }), {\n            name: \"LayerNormalization\",\n            shaderCache: {\n                hint: \"\".concat(y, \";\").concat(r, \";\").concat(n),\n                inputDependencies: g\n            },\n            getRunData: ()=>({\n                    outputs: T,\n                    dispatchGroup: {\n                        x: Math.ceil(p / 64)\n                    },\n                    programUniforms: x\n                }),\n            getShaderSource: S\n        };\n    }, Zd = (e1, t)=>{\n        uh(e1.inputs), e1.compute(dh(e1.inputs, t, e1.outputCount));\n    };\n});\nvar lh, Xd, Jd = U(()=>{\n    \"use strict\";\n    oe();\n    Qr();\n    Xr();\n    lh = (e1)=>{\n        if (!e1 || e1.length !== 2) throw new Error(\"MatMul requires 2 inputs.\");\n        if (e1[0].dims[e1[0].dims.length - 1] !== e1[1].dims[e1[1].dims.length - 2]) throw new Error(\"shared dimension does not match.\");\n    }, Xd = (e1)=>{\n        lh(e1.inputs);\n        let t = tt.calcShape(e1.inputs[0].dims, e1.inputs[1].dims, !0);\n        if (!t) throw new Error(\"Can't use matmul on the given tensors\");\n        let r = t[t.length - 1], n = e1.inputs[0].dims[e1.inputs[0].dims.length - 1];\n        if (r < 8 && n < 8) e1.compute(Zr(e1.inputs, {\n            activation: \"\"\n        }, t));\n        else {\n            let o = t[t.length - 2], i = C.size(e1.inputs[0].dims.slice(0, -2)), a = C.size(e1.inputs[1].dims.slice(0, -2));\n            if (i !== 1 && o === 1 && a === 1) {\n                let d = e1.inputs[0].reshape([\n                    1,\n                    i,\n                    n\n                ]), l = e1.inputs[1].reshape([\n                    1,\n                    n,\n                    r\n                ]), p = [\n                    1,\n                    i,\n                    r\n                ], m = [\n                    d,\n                    l\n                ];\n                e1.compute(er(m, {\n                    activation: \"\"\n                }, t, p), {\n                    inputs: m\n                });\n            } else e1.compute(er(e1.inputs, {\n                activation: \"\"\n            }, t));\n        }\n    };\n});\nvar ch, ph, mh, el, tl, rl = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    ch = (e1, t)=>{\n        if (e1.length < 3 || e1.length > 4) throw new Error(\"MatMulNBits requires 3 or 4 inputs\");\n        let r = e1[0], n = r.dims.length;\n        if (r.dims[n - 1] !== t.k) throw new Error(\"The last dim of input shape does not match the k value\");\n        let o = Math.floor((t.k + t.blockSize - 1) / t.blockSize), i = t.blockSize / 8 * t.bits, a = e1[1];\n        if (!C.areEqual(a.dims, [\n            t.n,\n            o,\n            i\n        ])) throw new Error(\"The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize\");\n        let l = e1[2].dims;\n        if (C.size(l) !== t.n * o) throw new Error(\"scales input size error.\");\n        if (e1.length === 4) {\n            let m = e1[3].dims, u = t.bits > 4 ? t.n * o : t.n * Math.floor((o + 1) / 2);\n            if (C.size(m) !== u) throw new Error(\"zeroPoints input size error.\");\n        }\n    }, ph = (e1, t)=>{\n        let r = e1[0].dims, n = r.length, o = r[n - 2], i = t.k, a = t.n, d = r.slice(0, n - 2), l = C.size(d), m = e1[1].dims[2] / 4, u = e1[0].dataType, h = me(t.k), _ = me(m), y = me(a), g = d.concat([\n            o,\n            a\n        ]), x = o > 1 && a / y % 2 === 0 ? 2 : 1, $ = C.size(g) / y / x, v = 64, S = [], T = [\n            l,\n            o,\n            i / h\n        ], A = C.convertShape(e1[1].dims).slice();\n        A.splice(-1, 1, m / _), S.push(...N(T)), S.push(...N(A)), S.push(...N(e1[2].dims)), e1.length === 4 && S.push(...N(C.convertShape(e1[3].dims)));\n        let k = [\n            l,\n            o,\n            a / y\n        ];\n        S.push(...N(k));\n        let P = (D)=>{\n            let R = T.length, G = E(\"a\", e1[0].dataType, R, h), K = E(\"b\", 12, A.length, _), j = E(\"scales\", e1[2].dataType, e1[2].dims.length), V = [\n                G,\n                K,\n                j\n            ], Q = e1.length === 4 ? E(\"zero_points\", 12, e1[3].dims.length) : void 0;\n            Q && V.push(Q);\n            let se = k.length, Y = M(\"output\", e1[0].dataType, se, y), ee = _e(e1[0].dataType), J = (()=>{\n                switch(h){\n                    case 1:\n                        return \"array<\".concat(ee, \", 8>\");\n                    case 2:\n                        return \"mat4x2<\".concat(ee, \">\");\n                    case 4:\n                        return \"mat2x4<\".concat(ee, \">\");\n                    default:\n                        throw new Error(\"\".concat(h, \"-component is not supported.\"));\n                }\n            })(), ne = ()=>{\n                let $e = \"\\n          // reuse a data\\n            var input_offset = \".concat(G.indicesToOffset(\"\".concat(G.type.indices, \"(batch, row, word_offset)\")), \";\\n            var a_data: \").concat(J, \";\\n            for (var j: u32 = 0; j < \").concat(8 / h, \"; j++) {\\n              a_data[j] = \").concat(G.getByOffset(\"input_offset\"), \";\\n              input_offset++;\\n            }\\n          \");\n                for(let le = 0; le < y * x; le++)$e += \"\\n            b_value = \".concat(_ === 1 ? \"b\".concat(le, \"_data\") : \"b\".concat(le, \"_data[i]\"), \";\\n            b_value_lower = unpack4xU8(b_value & b_mask);\\n            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);\\n            b_quantized_values = \").concat(J, \"(\").concat(Array.from({\n                    length: 4\n                }, (W, q)=>\"\".concat(ee, \"(b_value_lower[\").concat(q, \"]), \").concat(ee, \"(b_value_upper[\").concat(q, \"])\")).join(\", \"), \");\\n            b_dequantized_values = \").concat((()=>h === 1 ? \"\".concat(J, \"(\").concat(Array.from({\n                        length: 8\n                    }, (W, q)=>\"(b_quantized_values[\".concat(q, \"] - \").concat(Q ? \"zero_point\".concat(le) : \"zero_point\", \") * scale\").concat(le)).join(\", \"), \");\") : \"(b_quantized_values - \".concat(J, \"(\").concat(Array(8).fill(\"\".concat(Q ? \"zero_point\".concat(le) : \"zero_point\")).join(\",\"), \")) * scale\").concat(le, \";\"))(), \";\\n            workgroup_shared[local_id.x * \").concat(x, \" + \").concat(Math.floor(le / y), \"]\").concat(y > 1 ? \"[\".concat(le % y, \"]\") : \"\", \" += \").concat(Array.from({\n                    length: 8 / h\n                }, (W, q)=>\"\".concat(h === 1 ? \"a_data[\".concat(q, \"] * b_dequantized_values[\").concat(q, \"]\") : \"dot(a_data[\".concat(q, \"], b_dequantized_values[\").concat(q, \"])\"))).join(\" + \"), \";\\n          \");\n                return $e;\n            }, be = ()=>{\n                let $e = \"\\n            var col_index = col * \".concat(y, \";\\n            \").concat(Q ? \"\\n            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;\\n            var zero_point_byte_count: u32;\\n            var zero_point_word_index: u32;\\n            var zero_point_byte_offset: u32;\\n            let zero_point_nibble_offset: u32 = block & 0x1u;\\n            var zero_point_bits_offset: u32;\\n            var zero_point_word: u32;\" : \"\\n            // The default zero point is 8 for unsigned 4-bit quantization.\\n            let zero_point = \".concat(ee, \"(8);\"), \"\\n            \");\n                for(let le = 0; le < y * x; le++)$e += \"\\n            let scale\".concat(le, \" = \").concat(j.getByOffset(\"col_index * nBlocksPerCol + block\"), \";\\n            \").concat(Q ? \"\\n            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);\\n            zero_point_word_index = zero_point_byte_count >> 0x2u;\\n            zero_point_byte_offset = zero_point_byte_count & 0x3u;\\n            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\\n            zero_point_word = \".concat(Q.getByOffset(\"zero_point_word_index\"), \" >> zero_point_bits_offset;\\n            let zero_point\").concat(le, \" = \").concat(ee, \"((zero_point_word) & 0xFu);\") : \"\", \"\\n            col_index += 1;\");\n                return $e;\n            }, Oe = ()=>{\n                let $e = \"col_index = col * \".concat(y, \";\");\n                for(let le = 0; le < y * x; le++)$e += \"\\n            let b\".concat(le, \"_data = \").concat(K.getByIndices(\"\".concat(K.type.indices, \"(col_index, block, word)\")), \";\\n            col_index += 1;\");\n                return $e += \"\\n            var b_value: u32;\\n            let b_mask: u32 = 0x0F0F0F0Fu;\\n            var b_value_lower: vec4<u32>;\\n            var b_value_upper: vec4<u32>;\\n            var b_quantized_values: \".concat(J, \";\\n            var b_dequantized_values: \").concat(J, \";\"), $e;\n            };\n            return \"\\n        var<workgroup> workgroup_shared: array<\".concat(Y.type.value, \", \").concat(x * v, \">;\\n        \").concat(D.declareVariables(...V, Y), \"\\n        \").concat(D.mainStart([\n                v,\n                1,\n                1\n            ]), \"\\n          let output_indices = \").concat(Y.offsetToIndices(\"(global_idx / \".concat(v, \") * \").concat(x)), \";\\n          let col = output_indices[2];\\n          let row = output_indices[1];\\n          let batch = output_indices[0];\\n          let nBlocksPerCol = uniforms.b_shape[1];\\n\\n          for (var block = local_id.x; block < nBlocksPerCol; block += \").concat(v, \") {\\n            //process one block\\n            var word_offset: u32 = block * \").concat(t.blockSize / h, \";\\n            \").concat(be(), \"\\n            for (var word: u32 = 0; word < \").concat(m, \"; word += \").concat(_, \") {\\n              \").concat(Oe(), \"\\n              for (var i: u32 = 0; i < \").concat(_, \"; i++) {\\n                \").concat(ne(), \"\\n                word_offset += \").concat(8 / h, \";\\n              }\\n            }\\n          }\\n          workgroupBarrier();\\n\\n          if (local_id.x < \").concat(x, \") {\\n            var output_value: \").concat(Y.type.value, \" = \").concat(Y.type.value, \"(0);\\n            var workgroup_shared_offset: u32 = local_id.x;\\n            for (var b: u32 = 0u; b < \").concat(v, \"u; b++) {\\n              output_value += workgroup_shared[workgroup_shared_offset];\\n              workgroup_shared_offset += \").concat(x, \";\\n            }\\n            \").concat(Y.setByIndices(\"\".concat(Y.type.indices, \"(batch, row, col + local_id.x)\"), \"output_value\"), \";\\n          }\\n        }\");\n        };\n        return {\n            name: \"MatMulNBits\",\n            shaderCache: {\n                hint: \"\".concat(t.blockSize, \";\").concat(t.bits, \";\").concat(h, \";\").concat(_, \";\").concat(y, \";\").concat(x, \";\").concat(v),\n                inputDependencies: Array(e1.length).fill(\"rank\")\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: g,\n                            dataType: u\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: $\n                    },\n                    programUniforms: S\n                }),\n            getShaderSource: P\n        };\n    }, mh = (e1, t)=>{\n        let r = e1[0].dims, n = r.length, o = r[n - 2], i = t.k, a = t.n, d = r.slice(0, n - 2), l = C.size(d), m = e1[1].dims[2] / 4, u = e1[0].dataType, h = me(t.k), _ = me(m), y = d.concat([\n            o,\n            a\n        ]), g = 128, x = a % 8 === 0 ? 8 : a % 4 === 0 ? 4 : 1, $ = g / x, v = $ * _ * 8, S = v / h, T = v / t.blockSize, A = C.size(y) / x, k = [], P = [\n            l,\n            o,\n            i / h\n        ], D = C.convertShape(e1[1].dims).slice();\n        D.splice(-1, 1, m / _), k.push(...N(P)), k.push(...N(D)), k.push(...N(e1[2].dims)), e1.length === 4 && k.push(...N(C.convertShape(e1[3].dims)));\n        let R = [\n            l,\n            o,\n            a\n        ];\n        k.push(...N(R));\n        let G = (K)=>{\n            let j = P.length, V = E(\"a\", e1[0].dataType, j, h), Q = E(\"b\", 12, D.length, _), se = E(\"scales\", e1[2].dataType, e1[2].dims.length), Y = [\n                V,\n                Q,\n                se\n            ], ee = e1.length === 4 ? E(\"zero_points\", 12, e1[3].dims.length) : void 0;\n            ee && Y.push(ee);\n            let J = R.length, ne = M(\"output\", e1[0].dataType, J), be = _e(e1[0].dataType), Oe = ()=>{\n                switch(h){\n                    case 1:\n                        return \"\\n          let a_data0 = vec4<\".concat(be, \">(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);\\n          let a_data1 = vec4<\").concat(be, \">(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);\");\n                    case 2:\n                        return \"\\n          let a_data0 = vec4<\".concat(be, \">(sub_a[word_offset], sub_a[word_offset + 1]);\\n          let a_data1 = vec4<\").concat(be, \">(sub_a[word_offset + 2], sub_a[word_offset + 3]);\");\n                    case 4:\n                        return \"\\n          let a_data0 = sub_a[word_offset];\\n          let a_data1 = sub_a[word_offset + 1];\";\n                    default:\n                        throw new Error(\"\".concat(h, \"-component is not supported.\"));\n                }\n            };\n            return \"\\n        var<workgroup> sub_a: array<\".concat(V.type.value, \", \").concat(S, \">;\\n        var<workgroup> inter_results: array<array<\").concat(ne.type.value, \", \").concat($, \">, \").concat(x, \">;\\n        \").concat(K.declareVariables(...Y, ne), \"\\n        \").concat(K.mainStart([\n                $,\n                x,\n                1\n            ]), \"\\n          let output_indices = \").concat(ne.offsetToIndices(\"workgroup_index * \".concat(x)), \";\\n          let col = output_indices[2];\\n          let row = output_indices[1];\\n          let batch = output_indices[0];\\n          let n_blocks_per_col = uniforms.b_shape[1];\\n          let num_tiles =  (n_blocks_per_col - 1) / \").concat(T, \" + 1;\\n\\n          // Loop over shared dimension.\\n          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {\\n            let a_col_start = tile * \").concat(S, \";\\n            // load one tile A data into shared memory.\\n            for (var a_offset = local_idx; a_offset < \").concat(S, \"; a_offset += \").concat(g, \")\\n            {\\n              let a_col = a_col_start + a_offset;\\n              if (a_col < uniforms.a_shape[2])\\n              {\\n                sub_a[a_offset] = \").concat(V.getByIndices(\"\".concat(V.type.indices, \"(batch, row, a_col)\")), \";\\n              } else {\\n                sub_a[a_offset] = \").concat(V.type.value, \"(0);\\n              }\\n            }\\n            workgroupBarrier();\\n\\n            // each thread process one block\\n            let b_row = col + local_id.y;\\n            let block = tile * \").concat(T, \" + local_id.x;\\n            \").concat(ee ? \"\\n            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;\\n            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);\\n            let zero_point_word_index = zero_point_byte_count >> 0x2u;\\n            let zero_point_byte_offset = zero_point_byte_count & 0x3u;\\n            let zero_point_nibble_offset: u32 = block & 0x1u;\\n            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\\n            let zero_point_word = \".concat(ee.getByOffset(\"zero_point_word_index\"), \" >> zero_point_bits_offset;\\n            let zero_point = \").concat(be, \"((zero_point_word) & 0xFu);\") : \"\\n            // The default zero point is 8 for unsigned 4-bit quantization.\\n            let zero_point = \".concat(be, \"(8);\"), \"\\n            let scale = \").concat(se.getByOffset(\"b_row * n_blocks_per_col + block\"), \";\\n            let b_data = \").concat(Q.getByIndices(\"\".concat(Q.type.indices, \"(b_row, block, 0)\")), \";\\n            var word_offset = local_id.x * \").concat(t.blockSize / h, \";\\n            for (var i: u32 = 0; i < \").concat(_, \"; i++) {\\n              \").concat(Oe(), \"\\n              let b_value = \").concat(_ === 1 ? \"b_data\" : \"b_data[i]\", \";\\n              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);\\n              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);\\n              let b_quantized_values = mat2x4<\").concat(be, \">(\").concat(Array.from({\n                length: 4\n            }, ($e, le)=>\"\".concat(be, \"(b_value_lower[\").concat(le, \"]), \").concat(be, \"(b_value_upper[\").concat(le, \"])\")).join(\", \"), \");\\n              let b_dequantized_values = (b_quantized_values - mat2x4<\").concat(be, \">(\").concat(Array(8).fill(\"zero_point\").join(\",\"), \")) * scale;\\n              inter_results[local_id.y][local_id.x] += \").concat(Array.from({\n                length: 2\n            }, ($e, le)=>\"\".concat(\"dot(a_data\".concat(le, \", b_dequantized_values[\").concat(le, \"])\"))).join(\" + \"), \";\\n              word_offset += \").concat(8 / h, \";\\n            }\\n            workgroupBarrier();\\n          }\\n\\n          if (local_idx < \").concat(x, \") {\\n            var output_value: \").concat(ne.type.value, \" = \").concat(ne.type.value, \"(0);\\n            for (var b = 0u; b < \").concat($, \"; b++) {\\n              output_value += inter_results[local_idx][b];\\n            }\\n            if (col + local_idx < uniforms.output_shape[2])\\n            {\\n              \").concat(ne.setByIndices(\"\".concat(ne.type.indices, \"(batch, row, col + local_idx)\"), \"output_value\"), \"\\n            }\\n          }\\n        }\");\n        };\n        return {\n            name: \"BlockwiseMatMulNBits32\",\n            shaderCache: {\n                hint: \"\".concat(t.blockSize, \";\").concat(h, \";\").concat(_, \";\").concat($, \";\").concat(x),\n                inputDependencies: Array(e1.length).fill(\"rank\")\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: y,\n                            dataType: u\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: A\n                    },\n                    programUniforms: k\n                }),\n            getShaderSource: G\n        };\n    }, el = (e1, t)=>{\n        ch(e1.inputs, t), t.blockSize === 32 && e1.adapterInfo.isVendor(\"intel\") && e1.adapterInfo.isArchitecture(\"gen-12lp\") ? e1.compute(mh(e1.inputs, t)) : e1.compute(ph(e1.inputs, t));\n    }, tl = (e1)=>re(e1);\n});\nvar fh, hh, gh, bh, yh, _h, wh, vh, nl, ol = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    fh = (e1)=>{\n        if (!e1 || e1.length < 1) throw new Error(\"Too few inputs\");\n        if (e1[0].dataType !== 1 && e1[0].dataType !== 10) throw new Error(\"Input type must be float or float16.\");\n        if (e1.length >= 2) {\n            let t = e1[0].dims.length * 2 === e1[1].dims[0];\n            if (e1.length === 4 && (t = e1[3].dims[0] * 2 === e1[1].dims[0]), !t) throw new Error(\"The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].\");\n        }\n    }, hh = (e1, t, r)=>{\n        let n = \"\";\n        for(let o = t - 1; o >= 0; --o)n += \"\\n            k = i32(\".concat(e1.indicesGet(\"indices\", o), \") - \").concat(F(\"uniforms.pads\", o, r), \";\\n            if (k < 0) {\\n              break;\\n            }\\n            if (k >= i32(\").concat(F(\"uniforms.x_shape\", o, t), \")) {\\n              break;\\n            }\\n            offset += k * i32(\").concat(F(\"uniforms.x_strides\", o, t), \");\\n        \");\n        return \"\\n          value = \".concat(e1.type.value, \"(uniforms.constant_value);\\n          for (var i = 0; i < 1; i++) {\\n            var offset = 0;\\n            var k = 0;\\n            \").concat(n, \"\\n            value = x[offset];\\n          }\\n      \");\n    }, gh = (e1, t, r)=>{\n        let n = \"\";\n        for(let o = t - 1; o >= 0; --o)n += \"\\n                k = i32(\".concat(e1.indicesGet(\"indices\", o), \") - \").concat(F(\"uniforms.pads\", o, r), \";\\n                if (k < 0) {\\n                  k = -k;\\n                }\\n                {\\n                  let _2n_1 = 2 * (i32(\").concat(F(\"uniforms.x_shape\", o, t), \") - 1);\\n                  k = k % _2n_1;\\n                  if(k >= i32(\").concat(F(\"uniforms.x_shape\", o, t), \")) {\\n                    k = _2n_1 - k;\\n                  }\\n                }\\n                offset += k * i32(\").concat(F(\"uniforms.x_strides\", o, t), \");\\n            \");\n        return \"\\n              var offset = 0;\\n              var k = 0;\\n              \".concat(n, \"\\n              value = x[offset];\\n          \");\n    }, bh = (e1, t, r)=>{\n        let n = \"\";\n        for(let o = t - 1; o >= 0; --o)n += \"\\n                k = i32(\".concat(e1.indicesGet(\"indices\", o), \") - \").concat(F(\"uniforms.pads\", o, r), \";\\n                if (k < 0) {\\n                  k = 0;\\n                }\\n                if (k >= i32(\").concat(F(\"uniforms.x_shape\", o, t), \")) {\\n                  k = i32(\").concat(F(\"uniforms.x_shape\", o, t), \") - 1;\\n                }\\n                offset += k * i32(\").concat(F(\"uniforms.x_strides\", o, t), \");\\n            \");\n        return \"\\n              var offset = 0;\\n              var k = 0;\\n              \".concat(n, \"\\n              value = x[offset];\\n          \");\n    }, yh = (e1, t, r)=>{\n        let n = \"\";\n        for(let o = t - 1; o >= 0; --o)n += \"\\n                k = i32(\".concat(e1.indicesGet(\"indices\", o), \") - \").concat(F(\"uniforms.pads\", o, r), \";\\n                if (k < 0)  {\\n                  k += i32(\").concat(F(\"uniforms.x_shape\", o, t), \"]);\\n                }\\n                if (k >= i32(\").concat(F(\"uniforms.x_shape\", o, t), \")) {\\n                  k -= i32(\").concat(F(\"uniforms.x_shape\", o, t), \");\\n                }\\n                offset += k * i32(\").concat(F(\"uniforms.x_strides\", o, t), \");\\n            \");\n        return \"\\n              var offset = 0;\\n              var k = 0;\\n              \".concat(n, \"\\n              value = x[offset];\\n          \");\n    }, _h = (e1, t, r)=>{\n        switch(r.mode){\n            case 0:\n                return hh(e1, t, r.pads.length);\n            case 1:\n                return gh(e1, t, r.pads.length);\n            case 2:\n                return bh(e1, t, r.pads.length);\n            case 3:\n                return yh(e1, t, r.pads.length);\n            default:\n                throw new Error(\"Invalid mode\");\n        }\n    }, wh = (e1, t)=>{\n        let r = C.padShape(e1[0].dims.slice(), t.pads), n = e1[0].dims, o = C.size(r), i = [\n            {\n                type: 12,\n                data: o\n            },\n            {\n                type: 6,\n                data: t.pads\n            }\n        ], a = e1.length >= 3 && e1[2].data;\n        t.mode === 0 && i.push({\n            type: a ? e1[2].dataType : 1,\n            data: t.value\n        }), i.push(...N(e1[0].dims, r));\n        let d = [\n            \"rank\"\n        ], l = (p)=>{\n            let m = M(\"output\", e1[0].dataType, r.length), u = E(\"x\", e1[0].dataType, n.length), h = u.type.value, _ = _h(m, n.length, t), y = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"pads\",\n                    type: \"i32\",\n                    length: t.pads.length\n                }\n            ];\n            return t.mode === 0 && y.push({\n                name: \"constant_value\",\n                type: a ? h : \"f32\"\n            }), \"\\n            \".concat(p.registerUniforms(y).declareVariables(u, m), \"\\n            \").concat(p.mainStart(), \"\\n            \").concat(p.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n\\n            let indices = \").concat(m.offsetToIndices(\"global_idx\"), \";\\n\\n            var value = \").concat(h, \"(0);\\n            \").concat(_, \"\\n            output[global_idx] = value;\\n        }\");\n        };\n        return {\n            name: \"Pad\",\n            shaderCache: {\n                hint: \"\".concat(t.mode).concat(a),\n                inputDependencies: d\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: r,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(C.size(r) / 64)\n                    },\n                    programUniforms: i\n                }),\n            getShaderSource: l\n        };\n    }, vh = (e1, t)=>{\n        if (e1.length > 1) {\n            let r = e1[1].getBigInt64Array(), n = e1.length >= 3 && e1[2].data ? e1[2].dataType === 10 ? e1[2].getUint16Array()[0] : e1[2].getFloat32Array()[0] : 0, o = e1[0].dims.length, i = new Int32Array(2 * o).fill(0);\n            if (e1.length >= 4) {\n                let d = e1[3].getBigInt64Array();\n                for(let l = 0; l < d.length; l++)i[Number(d[l])] = Number(r[l]), i[Number(d[l]) + o] = Number(r[l + d.length]);\n            } else r.forEach((d, l)=>i[Number(l)] = Number(d));\n            let a = [];\n            return i.forEach((d)=>a.push(d)), {\n                mode: t.mode,\n                value: n,\n                pads: a\n            };\n        } else return t;\n    }, nl = (e1, t)=>{\n        fh(e1.inputs);\n        let r = vh(e1.inputs, t);\n        e1.compute(wh(e1.inputs, r), {\n            inputs: [\n                0\n            ]\n        });\n    };\n});\nvar tn, il, al, sl, ul, $h, xh, dl, ll, cl, pl, ml, fl, hl, gl, bl, yl, _l, wl, vl = U(()=>{\n    \"use strict\";\n    We();\n    te();\n    oe();\n    ae();\n    tn = (e1)=>{\n        if (ve.webgpu.validateInputContent && (!e1 || e1.length !== 1)) throw new Error(\"Pool ops requires 1 input.\");\n    }, il = (e1, t, r)=>{\n        let n = t.format === \"NHWC\", o = e1.dims.slice();\n        n && o.splice(1, 0, o.pop());\n        let i = Object.hasOwnProperty.call(t, \"dilations\"), a = t.kernelShape.slice(), d = t.strides.slice(), l = i ? t.dilations.slice() : [], p = t.pads.slice();\n        At.adjustPoolAttributes(r, o, a, d, l, p);\n        let m = At.computePoolOutputShape(r, o, d, l, a, p, t.autoPad), u = Object.assign({}, t);\n        i ? Object.assign(u, {\n            kernelShape: a,\n            strides: d,\n            pads: p,\n            dilations: l,\n            cacheKey: t.cacheKey\n        }) : Object.assign(u, {\n            kernelShape: a,\n            strides: d,\n            pads: p,\n            cacheKey: t.cacheKey\n        });\n        let h = m.slice();\n        return h.push(h.splice(1, 1)[0]), [\n            u,\n            n ? h : m\n        ];\n    }, al = (e1, t)=>{\n        let r = t.format === \"NHWC\", n = C.size(e1), o = C.size(t.kernelShape), i = [\n            {\n                type: 12,\n                data: n\n            },\n            {\n                type: 12,\n                data: o\n            }\n        ], a = [\n            {\n                name: \"outputSize\",\n                type: \"u32\"\n            },\n            {\n                name: \"kernelSize\",\n                type: \"u32\"\n            }\n        ];\n        if (t.kernelShape.length <= 2) {\n            let d = t.kernelShape[t.kernelShape.length - 1], l = t.strides[t.strides.length - 1], p = t.pads[t.pads.length / 2 - 1], m = t.pads[t.pads.length - 1], u = !!(p + m);\n            i.push({\n                type: 12,\n                data: d\n            }, {\n                type: 12,\n                data: l\n            }, {\n                type: 12,\n                data: p\n            }, {\n                type: 12,\n                data: m\n            }), a.push({\n                name: \"kw\",\n                type: \"u32\"\n            }, {\n                name: \"sw\",\n                type: \"u32\"\n            }, {\n                name: \"pwStart\",\n                type: \"u32\"\n            }, {\n                name: \"pwEnd\",\n                type: \"u32\"\n            });\n            let h = !1;\n            if (t.kernelShape.length === 2) {\n                let _ = t.kernelShape[t.kernelShape.length - 2], y = t.strides[t.strides.length - 2], g = t.pads[t.pads.length / 2 - 2], x = t.pads[t.pads.length - 2];\n                h = !!(g + x), i.push({\n                    type: 12,\n                    data: _\n                }, {\n                    type: 12,\n                    data: y\n                }, {\n                    type: 12,\n                    data: g\n                }, {\n                    type: 12,\n                    data: x\n                }), a.push({\n                    name: \"kh\",\n                    type: \"u32\"\n                }, {\n                    name: \"sh\",\n                    type: \"u32\"\n                }, {\n                    name: \"phStart\",\n                    type: \"u32\"\n                }, {\n                    name: \"phEnd\",\n                    type: \"u32\"\n                });\n            }\n            return [\n                i,\n                a,\n                !0,\n                u,\n                h\n            ];\n        } else {\n            if (r) throw new Error(\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\");\n            let d = C.computeStrides(t.kernelShape);\n            i.push({\n                type: 12,\n                data: d\n            }, {\n                type: 12,\n                data: t.pads\n            }, {\n                type: 12,\n                data: t.strides\n            }), a.push({\n                name: \"kernelStrides\",\n                type: \"u32\",\n                length: d.length\n            }, {\n                name: \"pads\",\n                type: \"u32\",\n                length: t.pads.length\n            }, {\n                name: \"strides\",\n                type: \"u32\",\n                length: t.strides.length\n            });\n            let l = t.pads.reduce((p, m)=>p + m);\n            return [\n                i,\n                a,\n                !!l,\n                !1,\n                !1\n            ];\n        }\n    }, sl = (e1, t, r, n, o, i, a, d, l, p, m, u)=>{\n        let h = o.format === \"NHWC\", _ = t.type.value, y = M(\"output\", t.type.tensor, n);\n        if (o.kernelShape.length <= 2) {\n            let g = \"\", x = \"\", $ = \"\", v = r - (h ? 2 : 1);\n            if (m ? g = \"\\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\\n                  xIndices[\".concat(v, \"] = indices[\").concat(v, \"] * uniforms.sw - uniforms.pwStart + i;\\n                  if (xIndices[\").concat(v, \"] < 0 || xIndices[\").concat(v, \"]\\n                      >= uniforms.x_shape[\").concat(v, \"]) {\\n                    pad++;\\n                    continue;\\n                  }\\n                  let x_val = x[\").concat(t.indicesToOffset(\"xIndices\"), \"];\\n                  \").concat(i, \"\\n                }\") : g = \"\\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\\n                  xIndices[\".concat(v, \"] = indices[\").concat(v, \"] * uniforms.sw - uniforms.pwStart + i;\\n                  let x_val = x[\").concat(t.indicesToOffset(\"xIndices\"), \"];\\n                  \").concat(i, \"\\n                }\"), o.kernelShape.length === 2) {\n                let T = r - (h ? 3 : 2);\n                u ? x = \"\\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\\n                  xIndices[\".concat(T, \"] = indices[\").concat(T, \"] * uniforms.sh - uniforms.phStart + j;\\n                  if (xIndices[\").concat(T, \"] < 0 || xIndices[\").concat(T, \"] >= uniforms.x_shape[\").concat(T, \"]) {\\n                    pad += i32(uniforms.kw);\\n                    continue;\\n                  }\\n              \") : x = \"\\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\\n                  xIndices[\".concat(T, \"] = indices[\").concat(T, \"] * uniforms.sh - uniforms.phStart + j;\\n                \"), $ = \"\\n              }\\n            \";\n            }\n            return \"\\n            \".concat(e1.registerUniforms(l).declareVariables(t, y), \"\\n\\n            \").concat(e1.mainStart(), \"\\n              \").concat(e1.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\"), \"\\n\\n              let indices = \").concat(y.offsetToIndices(\"global_idx\"), \";\\n              var xIndices = \").concat(y.offsetToIndices(\"global_idx\"), \";\\n\\n              var value = \").concat(_, \"(\").concat(d, \");\\n              var pad = 0;\\n              \").concat(x, \"\\n              \").concat(g, \"\\n              \").concat($, \"\\n              \").concat(a, \"\\n\\n              output[global_idx] = value;\\n            }\");\n        } else {\n            if (h) throw new Error(\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\");\n            let g = o.kernelShape.length, x = o.pads.length, $ = \"\";\n            return p ? $ = \"\\n                if (xIndices[j] >= uniforms.x_shape[j]) {\\n                  pad++;\\n                  isPad = true;\\n                  break;\\n                }\\n              }\\n              if (!isPad) {\\n                let x_val = x[\".concat(t.indicesToOffset(\"xIndices\"), \"];\\n                \").concat(i, \"\\n              }\") : $ = \"\\n              }\\n              let x_val = x[\".concat(t.indicesToOffset(\"xIndices\"), \"];\\n              \").concat(i, \"\\n            \"), \"\\n            \".concat(e1.registerUniforms(l).declareVariables(t, y), \"\\n\\n            \").concat(e1.mainStart(), \"\\n              \").concat(e1.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\"), \"\\n              let indices = \").concat(y.offsetToIndices(\"global_idx\"), \";\\n              var xIndices = \").concat(y.offsetToIndices(\"global_idx\"), \";\\n\\n              var offsets: array<u32, \").concat(g, \">;\\n\\n              var value = \").concat(_, \"(\").concat(d, \");\\n              var pad = 0;\\n              var isPad = false;\\n\\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\\n                var offset = i;\\n                for (var j = 0u; j < \").concat(g - 1, \"u; j++) {\\n                  offsets[j] = offset / \").concat(F(\"uniforms.kernelStrides\", \"j\", g), \";\\n                  offset -= offsets[j] * \").concat(F(\"uniforms.kernelStrides\", \"j\", g), \";\\n                }\\n                offsets[\").concat(g - 1, \"] = offset;\\n\\n                isPad = false;\\n                for (var j = \").concat(r - g, \"u; j < \").concat(r, \"u; j++) {\\n                  xIndices[j] = indices[j] * \").concat(F(\"uniforms.strides\", \"j - \".concat(r - g, \"u\"), g), \"\\n                    + offsets[j - \").concat(r - g, \"u] - \").concat(F(\"uniforms.pads\", \"j - 2u\", x), \";\\n                  \").concat($, \"\\n              }\\n              \").concat(a, \"\\n\\n              output[global_idx] = value;\\n            }\");\n        }\n    }, ul = (e1)=>\"\".concat(e1.format, \";\").concat(e1.ceilMode, \";\").concat(e1.autoPad, \";\").concat(e1.kernelShape.length), $h = (e1)=>\"\".concat(ul(e1), \";\").concat(e1.countIncludePad), xh = (e1)=>\"\".concat(ul(e1), \";\").concat(e1.storageOrder, \";\").concat(e1.dilations), dl = (e1)=>({\n            format: e1.format,\n            autoPad: [\n                \"NOTSET\",\n                \"VALID\",\n                \"SAME_UPPER\",\n                \"SAME_LOWER\"\n            ][e1.auto_pad],\n            ceilMode: e1.ceil_mode,\n            kernelShape: e1.kernel_shape,\n            strides: e1.strides,\n            pads: e1.pads\n        }), ll = (e1, t, r, n)=>{\n        let [o, i] = il(t, n, r), a = E(\"x\", t.dataType, t.dims.length), d = a.type.value, l = \"value += x_val;\", p = \"\";\n        o.countIncludePad ? p += \"value /= \".concat(d, \"(uniforms.kernelSize);\") : p += \"value /= \".concat(d, \"(i32(uniforms.kernelSize) - pad);\");\n        let [m, u, h, _, y] = al(i, o);\n        m.push(...N(t.dims, i));\n        let g = [\n            \"rank\"\n        ];\n        return {\n            name: e1,\n            shaderCache: {\n                hint: \"\".concat(n.cacheKey, \";\").concat(h, \";\").concat(_, \";\").concat(y),\n                inputDependencies: g\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: i,\n                            dataType: t.dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(C.size(i) / 64)\n                    },\n                    programUniforms: m\n                }),\n            getShaderSource: (x)=>sl(x, a, t.dims.length, i.length, o, l, p, 0, u, h, _, y)\n        };\n    }, cl = (e1)=>{\n        let t = e1.count_include_pad !== 0, r = dl(e1);\n        if (r.ceilMode !== 0) throw new Error(\"using ceil() in shape computation is not yet supported for AveragePool\");\n        let n = {\n            countIncludePad: t,\n            ...r,\n            cacheKey: \"\"\n        };\n        return {\n            ...n,\n            cacheKey: $h(n)\n        };\n    }, pl = (e1, t)=>{\n        tn(e1.inputs), e1.compute(ll(\"AveragePool\", e1.inputs[0], !1, t));\n    }, ml = {\n        autoPad: \"\",\n        ceilMode: 0,\n        countIncludePad: !1,\n        kernelShape: [],\n        strides: [],\n        pads: [],\n        storageOrder: 0,\n        dilations: []\n    }, fl = (e1)=>{\n        let t = e1.format;\n        return {\n            format: t,\n            ...ml,\n            cacheKey: t\n        };\n    }, hl = (e1, t)=>{\n        tn(e1.inputs), e1.compute(ll(\"GlobalAveragePool\", e1.inputs[0], !0, t));\n    }, gl = (e1, t, r, n)=>{\n        let [o, i] = il(t, n, r), a = \"\\n      value = max(x_val, value);\\n    \", d = \"\", l = E(\"x\", t.dataType, t.dims.length), p = [\n            \"rank\"\n        ], [m, u, h, _, y] = al(i, o);\n        return m.push(...N(t.dims, i)), {\n            name: e1,\n            shaderCache: {\n                hint: \"\".concat(n.cacheKey, \";\").concat(h, \";\").concat(_, \";\").concat(y),\n                inputDependencies: p\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: i,\n                            dataType: t.dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(C.size(i) / 64)\n                    },\n                    programUniforms: m\n                }),\n            getShaderSource: (g)=>sl(g, l, t.dims.length, i.length, o, a, d, t.dataType === 10 ? -65504 : -1e5, u, h, _, y)\n        };\n    }, bl = (e1, t)=>{\n        tn(e1.inputs), e1.compute(gl(\"MaxPool\", e1.inputs[0], !1, t));\n    }, yl = (e1)=>{\n        let t = e1.storage_order, r = e1.dilations, n = dl(e1);\n        if (t !== 0) throw new Error(\"column major storage order is not yet supported for MaxPool\");\n        if (n.ceilMode !== 0) throw new Error(\"using ceil() in shape computation is not yet supported for MaxPool\");\n        let o = {\n            storageOrder: t,\n            dilations: r,\n            ...n,\n            cacheKey: \"\"\n        };\n        return {\n            ...o,\n            cacheKey: xh(o)\n        };\n    }, _l = (e1)=>{\n        let t = e1.format;\n        return {\n            format: t,\n            ...ml,\n            cacheKey: t\n        };\n    }, wl = (e1, t)=>{\n        tn(e1.inputs), e1.compute(gl(\"GlobalMaxPool\", e1.inputs[0], !0, t));\n    };\n});\nvar Th, Ih, $l, xl, Sl = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    Th = (e1, t)=>{\n        if (e1.length < 2 || e1.length > 3) throw new Error(\"DequantizeLinear requires 2 or 3 inputs.\");\n        if (e1.length === 3 && e1[1].dims === e1[2].dims) throw new Error(\"x-scale and x-zero-point must have the same shape.\");\n        if (e1.length === 3 && e1[0].dataType !== e1[2].dataType) throw new Error(\"x and x-zero-point must have the same data type.\");\n        if (e1[0].dataType === 6 && e1.length > 2) throw new Error(\"In the case of dequantizing int32 there is no zero point.\");\n        if (e1[1].dims.length !== 0 && e1[1].dims.length !== 1 && e1[1].dims.length !== e1[0].dims.length) throw new Error(\"scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.\");\n        if (e1.length > 2) {\n            if (e1[0].dataType !== e1[2].dataType) throw new Error(\"x and x-zero-point must have the same data type.\");\n            if (e1[1].dims.length !== e1[2].dims.length) throw new Error(\"scale and zero-point inputs must have the same rank.\");\n            if (!e1[1].dims.map((r, n)=>r === e1[2].dims[n]).reduce((r, n)=>r && n, !0)) throw new Error(\"scale and zero-point inputs must have the same shape.\");\n        }\n        if (t.blockSize > 0) {\n            if (e1[1].dims.length === 0 || e1[1].dims.length === 1 && e1[1].dims[0] === 1) throw new Error(\"blockSize must be set only for block quantization.\");\n            if (!e1[1].dims.map((o, i)=>i === t.axis || o === e1[0].dims[i]).reduce((o, i)=>o && i, !0)) throw new Error(\"For block qunatization, scale input shape to match the input shape except for the axis\");\n            if (e1[1].dims.length !== e1[0].dims.length) throw new Error(\"For block qunatization the scale input rank must be the same as the x rank.\");\n            let r = e1[0].dims[t.axis], n = e1[1].dims[t.axis];\n            if (t.blockSize < Math.ceil(r / n) || t.blockSize > Math.ceil(r / (n - 1) - 1)) throw new Error(\"blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].\");\n        }\n    }, Ih = (e1, t)=>{\n        let r = C.normalizeAxis(t.axis, e1[0].dims.length), n = e1[0].dataType, o = n === 3, i = e1[0].dims, a = e1[1].dataType, d = C.size(i), l = n === 3 || n === 2, p = l ? [\n            Math.ceil(C.size(e1[0].dims) / 4)\n        ] : e1[0].dims, m = e1[1].dims, u = e1.length > 2 ? e1[2] : void 0, h = u ? l ? [\n            Math.ceil(C.size(u.dims) / 4)\n        ] : u.dims : void 0, _ = m.length === 0 || m.length === 1 && m[0] === 1, y = _ === !1 && m.length === 1, g = me(d), x = _ && (!l || g === 4), $ = x ? g : 1, v = x && !l ? g : 1, S = E(\"input\", l ? 12 : n, p.length, v), T = E(\"scale\", a, m.length), A = u ? E(\"zero_point\", l ? 12 : n, h.length) : void 0, k = M(\"output\", a, i.length, $), P = [\n            S,\n            T\n        ];\n        A && P.push(A);\n        let D = [\n            p,\n            m\n        ];\n        u && D.push(h);\n        let R = [\n            {\n                type: 12,\n                data: d / $\n            },\n            {\n                type: 12,\n                data: r\n            },\n            {\n                type: 12,\n                data: t.blockSize\n            },\n            ...N(...D, i)\n        ], G = (K)=>{\n            let j = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"axis\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"block_size\",\n                    type: \"u32\"\n                }\n            ];\n            return \"\\n      \".concat(K.registerUniforms(j).declareVariables(...P, k), \"\\n      \").concat(K.mainStart(), \"\\n          \").concat(K.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n          let output_indices = \").concat(k.offsetToIndices(\"global_idx\"), \";\\n\\n          // Set input x\\n          \").concat((()=>l ? \"\\n            let input = \".concat(S.getByOffset(\"global_idx / 4\"), \";\\n            let x_vec = \").concat(o ? \"unpack4xI8(input)\" : \"unpack4xU8(input)\", \";\\n            let x_value = \").concat($ === 1 ? \"x_vec[global_idx % 4]\" : \"x_vec\", \";\") : \"let x_value = \".concat(S.getByOffset(\"global_idx\"), \";\"))(), \";\\n\\n          // Set scale input\\n          \").concat((()=>_ ? \"let scale_value= \".concat(T.getByOffset(\"0\")) : y ? \"\\n            let scale_index = \".concat(k.indicesGet(\"output_indices\", \"uniforms.axis\"), \";\\n            let scale_value= \").concat(T.getByOffset(\"scale_index\"), \";\") : \"\\n            var scale_indices: \".concat(T.type.indices, \" = output_indices;\\n            let index = \").concat(T.indicesGet(\"scale_indices\", \"uniforms.axis\"), \" / uniforms.block_size;\\n            \").concat(T.indicesSet(\"scale_indices\", \"uniforms.axis\", \"index\"), \";\\n            let scale_value= \").concat(T.getByIndices(\"scale_indices\"), \";\"))(), \";\\n\\n          // Set zero-point input\\n          \").concat((()=>A ? _ ? l ? \"\\n                let zero_point_input = \".concat(A.getByOffset(\"0\"), \";\\n                let zero_point_vec =  \").concat(o ? \"unpack4xI8(zero_point_input)\" : \"unpack4xU8(zero_point_input)\", \";\\n                let zero_point_value= zero_point_vec[0]\") : \"let zero_point_value = \".concat(A.getByOffset(\"0\")) : y ? l ? \"\\n                let zero_point_index = \".concat(k.indicesGet(\"output_indices\", \"uniforms.axis\"), \";\\n                let zero_point_input = \").concat(A.getByOffset(\"zero_point_index / 4\"), \";\\n                let zero_point_vec =  \").concat(o ? \"unpack4xI8(zero_point_input)\" : \"unpack4xU8(zero_point_input)\", \";\\n                let zero_point_value = zero_point_vec[zero_point_index % 4]\") : \"\\n                let zero_point_index = \".concat(k.indicesGet(\"output_indices\", \"uniforms.axis\"), \";\\n                let zero_point_value = \").concat(A.getByOffset(\"zero_point_index\"), \";\") : l ? \"\\n                let zero_point_offset = \".concat(T.indicesToOffset(\"scale_indices\"), \";\\n                let zero_point_input = \").concat(A.getByOffset(\"zero_point_offset / 4\"), \";\\n                let zero_point_vec = \").concat(o ? \"unpack4xI8(zero_point_input)\" : \"unpack4xU8(zero_point_input)\", \";\\n                let zero_point_value = zero_point_vec[zero_point_offset % 4];\") : \"let zero_point_value = \".concat(A.getByIndices(\"scale_indices\"), \";\") : \"let zero_point_value = \".concat(l ? o ? \"i32\" : \"u32\" : S.type.value, \"(0);\"))(), \";\\n      // Compute and write output\\n      \").concat(k.setByOffset(\"global_idx\", \"\".concat(k.type.value, \"(x_value - zero_point_value) * scale_value\")), \";\\n      }\");\n        };\n        return {\n            name: \"DequantizeLinear\",\n            shaderCache: {\n                hint: t.cacheKey,\n                inputDependencies: A ? [\n                    \"rank\",\n                    \"rank\",\n                    \"rank\"\n                ] : [\n                    \"rank\",\n                    \"rank\"\n                ]\n            },\n            getShaderSource: G,\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: i,\n                            dataType: a\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(d / $ / 64),\n                        y: 1,\n                        z: 1\n                    },\n                    programUniforms: R\n                })\n        };\n    }, $l = (e1, t)=>{\n        Th(e1.inputs, t), e1.compute(Ih(e1.inputs, t));\n    }, xl = (e1)=>re({\n            axis: e1.axis,\n            blockSize: e1.blockSize\n        });\n});\nvar Ch, Ah, Tl, Il = U(()=>{\n    \"use strict\";\n    We();\n    te();\n    ae();\n    Ch = (e1, t, r)=>{\n        let n = e1 === t, o = e1 < t && r < 0, i = e1 > t && r > 0;\n        if (n || o || i) throw new Error(\"Range these inputs' contents are invalid.\");\n    }, Ah = (e1, t, r, n)=>{\n        let o = Math.abs(Math.ceil((t - e1) / r)), i = [\n            o\n        ], a = o, d = [\n            {\n                type: 12,\n                data: a\n            },\n            {\n                type: n,\n                data: e1\n            },\n            {\n                type: n,\n                data: r\n            },\n            ...N(i)\n        ], l = (p)=>{\n            let m = M(\"output\", n, i.length), u = m.type.value, h = [\n                {\n                    name: \"outputSize\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"start\",\n                    type: u\n                },\n                {\n                    name: \"delta\",\n                    type: u\n                }\n            ];\n            return \"\\n        \".concat(p.registerUniforms(h).declareVariables(m), \"\\n        \").concat(p.mainStart(), \"\\n        \").concat(p.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\"), \"\\n        output[global_idx] = uniforms.start + \").concat(u, \"(global_idx) * uniforms.delta;\\n      }\");\n        };\n        return {\n            name: \"Range\",\n            shaderCache: {\n                hint: \"\".concat(n)\n            },\n            getShaderSource: l,\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: i,\n                            dataType: n\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(a / 64)\n                    },\n                    programUniforms: d\n                })\n        };\n    }, Tl = (e1)=>{\n        let t = 0, r = 0, n = 0;\n        e1.inputs[0].dataType === 6 ? (t = e1.inputs[0].getInt32Array()[0], r = e1.inputs[1].getInt32Array()[0], n = e1.inputs[2].getInt32Array()[0]) : e1.inputs[0].dataType === 1 && (t = e1.inputs[0].getFloat32Array()[0], r = e1.inputs[1].getFloat32Array()[0], n = e1.inputs[2].getFloat32Array()[0]), ve.webgpu.validateInputContent && Ch(t, r, n), e1.compute(Ah(t, r, n, e1.inputs[0].dataType), {\n            inputs: []\n        });\n    };\n});\nvar kh, Eh, Cl, Al, kl = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    kh = (e1, t, r, n)=>{\n        if (e1 !== \"none\" && n !== \"i32\" && n !== \"u32\" && n !== \"f32\") throw new Error(\"Input \".concat(n, \" is not supported with reduction \").concat(e1, \".\"));\n        let o = \"{\\n                var oldValue = 0;\\n                loop {\\n                  let newValueF32 =\", i = \";\\n                  let newValue = bitcast<i32>(newValueF32);\\n                  let res = atomicCompareExchangeWeak(&\".concat(t, \", oldValue, newValue);\\n                  if res.exchanged {\\n                    break;\\n                  }\\n                  oldValue = res.old_value;\\n                }\\n              }\");\n        switch(e1){\n            case \"none\":\n                return \"\".concat(t, \"=\").concat(r, \";\");\n            case \"add\":\n                return n === \"i32\" || n === \"u32\" ? \"atomicAdd(&\".concat(t, \", bitcast<\").concat(n, \">(\").concat(r, \"));\") : \"\\n              \".concat(o, \"bitcast<\").concat(n, \">(oldValue) + (\").concat(r, \")\").concat(i);\n            case \"max\":\n                return n === \"i32\" || n === \"u32\" ? \"atomicMax(&\".concat(t, \", bitcast<\").concat(n, \">(\").concat(r, \"));\") : \"\\n                \".concat(o, \"max(bitcast<f32>(oldValue), (\").concat(r, \"))\").concat(i);\n            case \"min\":\n                return n === \"i32\" || n === \"u32\" ? \"atomicMin(&\".concat(t, \", bitcast<\").concat(n, \">(\").concat(r, \"));\") : \"\".concat(o, \"min(bitcast<\").concat(n, \">(oldValue), (\").concat(r, \"))\").concat(i);\n            case \"mul\":\n                return \"\".concat(o, \"(bitcast<\").concat(n, \">(oldValue) * (\").concat(r, \"))\").concat(i);\n            default:\n                throw new Error(\"Reduction \".concat(e1, \" is not supported.\"));\n        }\n    }, Eh = (e1, t)=>{\n        let r = e1[0].dims, n = e1[1].dims, o = r, i = 1, a = Math.ceil(C.size(n) / i), d = n[n.length - 1], l = C.sizeFromDimension(r, d), p = [\n            {\n                type: 12,\n                data: a\n            },\n            {\n                type: 12,\n                data: d\n            },\n            {\n                type: 12,\n                data: l\n            },\n            ...N(e1[1].dims, e1[2].dims, o)\n        ], m = (u)=>{\n            let h = E(\"indices\", e1[1].dataType, e1[1].dims.length), _ = E(\"updates\", e1[2].dataType, e1[2].dims.length, i), y = t.reduction !== \"none\" && t.reduction !== \"\" ? rs(\"output\", e1[0].dataType, o.length) : M(\"output\", e1[0].dataType, o.length, i);\n            return \"\\n      \".concat(u.registerUniform(\"output_size\", \"u32\").registerUniform(\"last_index_dimension\", \"u32\").registerUniform(\"num_updates_elements\", \"u32\").declareVariables(h, _, y), \"\\n      \").concat(u.mainStart(), \"\\n        \").concat(u.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n  var data_offset = 0u;\\n  let indices_start = uniforms.last_index_dimension * global_idx;\\n  let indices_end = indices_start + uniforms.last_index_dimension;\\n  for (var i = indices_start; i < indices_end; i++) {\\n    var index = i32(indices[i].x);\\n    \").concat(e1[0].dims.length === 1 ? \"\\n    let element_count_dim = uniforms.output_strides;\\n    let dim_value = uniforms.output_shape;\" : \"\\n    let element_count_dim = uniforms.output_strides[i - indices_start];\\n    let dim_value = uniforms.output_shape[i - indices_start + uniforms.last_index_dimension];\", \"\\n    if (index >= 0) {\\n      if (index >= i32(dim_value)) {\\n        index = i32(dim_value - 1);\\n      }\\n    } else {\\n      if (index < -i32(dim_value)) {\\n        index = 0;\\n      } else {\\n        index += i32(dim_value);\\n      }\\n    }\\n    data_offset += u32((u32(index) * element_count_dim));\\n  }\\n\\n  for (var i = 0u; i < uniforms.num_updates_elements; i++) {\\n    let value = updates[uniforms.num_updates_elements * global_idx + i];\\n    \").concat(kh(t.reduction, \"output[data_offset + i]\", \"value\", y.type.value), \"\\n  }\\n\\n      }\");\n        };\n        return {\n            name: \"ScatterND\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey, \"_\").concat(t.reduction),\n                inputDependencies: [\n                    \"rank\",\n                    \"rank\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: o,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(a / 64)\n                    },\n                    programUniforms: p\n                }),\n            getShaderSource: m\n        };\n    }, Cl = (e1)=>re({\n            reduction: e1.reduction\n        }), Al = (e1, t)=>{\n        e1.compute(Eh(e1.inputs, t), {\n            inputs: [\n                e1.inputs[1],\n                e1.inputs[2]\n            ],\n            outputs: []\n        });\n    };\n});\nvar Ph, zh, Oh, Dh, Bh, Mh, Rh, Uh, Nh, Vh, Wh, El, Lh, Gh, Hh, Fh, qh, Pl, zl, Ol = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    Ph = (e1, t)=>{\n        if (e1.every((r)=>r > 0 || (()=>{\n                throw new Error(\"Resize requires scales input values to be positive\");\n            })), e1.length > 0) {\n            if (t.mode === \"linear\") {\n                if (!(e1.length === 2 || e1.length === 3 || e1.length === 4 && e1[0] === 1 && e1[1] === 1 || e1.length === 4 && e1[0] === 1 && e1[3] === 1 || e1.length === 5 && e1[0] === 1 && e1[1] === 1)) throw new Error(\"For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1\");\n            } else if (t.mode === \"cubic\" && !(e1.length === 2 || e1.length === 4 && e1[0] === 1 && e1[1] === 1 || e1.length === 4 && e1[0] === 1 && e1[3] === 1)) throw new Error(\"Resize requires scales input size to be 2 or 4 for cubic mode\");\n        }\n    }, zh = (e1, t, r)=>{\n        t.every((o)=>o >= 0 && o < r || (()=>{\n                throw new Error(\"Resize requires axes input values to be positive and less than rank\");\n            }));\n        let n = new Array(r).fill(1);\n        return t.forEach((o, i)=>n[o] = e1[i]), n;\n    }, Oh = (e1, t, r, n, o, i)=>{\n        let [a, d, l] = r > 10 ? [\n            1,\n            2,\n            3\n        ] : [\n            -1,\n            e1.length > 1 ? 1 : -1,\n            -1\n        ], p = e1[0].dims.length;\n        if (a > 0 && e1.length > a && e1[a].dims.length > 0) e1[a].getFloat32Array().forEach((m)=>i.push(m));\n        else if (t.coordinateTransformMode === \"tf_crop_and_resize\") throw new Error(\"Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize\");\n        if (d > 0 && e1.length > d && e1[d].dims.length === 1 && e1[d].dims[0] > 0) {\n            if (e1[d].getFloat32Array().forEach((m)=>n.push(m)), n.length !== 0 && n.length !== p && r >= 18 && n.length !== t.axes.length) throw new Error(\"Resize requires scales input size to be same as input rank or axes size for opset 18 and up\");\n            Ph(n, t), t.axes.length > 0 && zh(n, t.axes, p).forEach((m, u)=>n[u] = m);\n        }\n        if (l > 0 && e1.length > l && e1[l].dims.length === 1 && e1[l].dims[0] > 0 && (e1[l].getBigInt64Array().forEach((m)=>o.push(Number(m))), o.length !== 0 && o.length !== p && r >= 18 && o.length !== t.axes.length)) throw new Error(\"Resize requires sizes input size to be same as input rank or axes size for opset 18 and up\");\n        if (t.axes.length > 0) {\n            if (n.length !== 0 && n.length !== t.axes.length) throw new Error('Resize requires \"scales\" input size to be of axes rank when axes attributes is specified');\n            if (o.length !== 0 && o.length !== t.axes.length) throw new Error('Resize requires \"sizes\" input size to be of rank axes rank when axes attributes is specified');\n        }\n        if (typeof n < \"u\" && typeof o < \"u\" && n.length > 0 && o.length > p) throw new Error(\"Resize requires only of scales or sizes to be specified\");\n    }, Dh = (e1, t)=>\"fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> \".concat(t, \" { \") + (()=>{\n            switch(e1){\n                case \"asymmetric\":\n                    return \"return \".concat(t, \"(xResized) / \").concat(t, \"(xScale);\");\n                case \"pytorch_half_pixel\":\n                    return \"if (lengthResized > 1) {\\n                    return (\".concat(t, \"(xResized) + 0.5) / \").concat(t, \"(xScale) - 0.5;\\n                  } else {\\n                    return 0.0;\\n                  }\");\n                case \"tf_half_pixel_for_nn\":\n                    return \"return (\".concat(t, \"(xResized) + 0.5) / \").concat(t, \"(xScale);\");\n                case \"align_corners\":\n                    return \"if (lengthResized == 1) {\\n                    return 0.0;\\n                  } else {\\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\\n                    // offset-by-one error later in floor().\\n                    let whole = \".concat(t, \"(xResized * (lengthOriginal - 1) / (lengthResized - 1));\\n                    let fract =\\n                        \").concat(t, \"(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / \").concat(t, \"(lengthResized - 1);\\n                    return whole + fract;\\n                  }\");\n                case \"tf_crop_and_resize\":\n                    return \"if (lengthResized > 1) {\\n                    return \".concat(t, \"(roiStart) * \").concat(t, \"(lengthOriginal - 1) +\\n                        (\").concat(t, \"(xResized) * \").concat(t, \"(roiEnd - roiStart) * \").concat(t, \"(lengthOriginal - 1)) /\\n                        \").concat(t, \"(lengthResized - 1);\\n                  } else {\\n                    return 0.5 * \").concat(t, \"(roiStart + roiEnd) * \").concat(t, \"(lengthOriginal - 1);\\n                  }\");\n                case \"half_pixel_symmetric\":\n                    return \"const outputWidth = \".concat(t, \"xScale * \").concat(t, \"(lengthResized);\\n                  const adjustment = \").concat(t, \"(lengthResized) / outputWidth;\\n                  const center = \").concat(t, \"(lengthOriginal) / 2;\\n                  const offset = center * (1 - adjustment);\\n                  return offset + ((\").concat(t, \"(xResized) + 0.5) / \").concat(t, \"(xScale)) - 0.5;\");\n                case \"half_pixel\":\n                    return \"return ((\".concat(t, \"(xResized) + 0.5) / \").concat(t, \"(xScale)) - 0.5;\");\n                default:\n                    throw new Error(\"Coordinate transform mode \".concat(e1, \" is not supported\"));\n            }\n        })() + \"}\", Bh = (e1, t, r)=>\"fn getNearestPixelFromOriginal(xOriginal: \".concat(r, \", isDownSample: bool) -> \").concat(r, \" {\") + (()=>{\n            switch(e1){\n                case \"round_prefer_ceil\":\n                    return \"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }\";\n                case \"floor\":\n                    return \"return floor(xOriginal);\";\n                case \"ceil\":\n                    return \"return ceil(xOriginal);\";\n                case \"round_prefer_floor\":\n                    return \"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }\";\n                case \"simple\":\n                default:\n                    if (t < 11) return \"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }\";\n                    throw new Error(\"Nearest mode \".concat(e1, \" is not supported\"));\n            }\n        })() + \"}\", Mh = (e1, t, r)=>{\n        let n = new Array(r).fill(0).concat(new Array(r).fill(1)), o = e1.length === 0 ? n : e1.slice();\n        return t.length > 0 ? (t.forEach((i, a)=>{\n            n[i] = o[a], n[a + r] = o[t.length + a];\n        }), n) : o;\n    }, Rh = (e1, t, r, n)=>{\n        let o = [];\n        if (r.length > 0) if (n.length > 0) {\n            if (e1.forEach((i)=>o.push(i)), Math.max(...n) > e1.length) throw new Error(\"axes is out of bound\");\n            n.forEach((i, a)=>o[i] = r[a]);\n        } else r.forEach((i)=>o.push(i));\n        else {\n            if (t.length === 0) throw new Error(\"Resize requires either scales or sizes.\");\n            o = e1.map((i, a)=>Math.round(i * t[a]));\n        }\n        return o;\n    }, Uh = (e1, t, r)=>{\n        let n = (()=>{\n            switch(r.keepAspectRatioPolicy){\n                case \"not_larger\":\n                    return r.axes.length > 0 ? Math.min(...r.axes.map((i)=>t[i]), Number.MAX_VALUE) : Math.min(...t, Number.MAX_VALUE);\n                case \"not_smaller\":\n                    return r.axes.length > 0 ? Math.max(...r.axes.map((i)=>t[i]), Number.MIN_VALUE) : Math.max(...t, Number.MIN_VALUE);\n                default:\n                    throw new Error(\"Keep aspect ratio policy \".concat(r.keepAspectRatioPolicy, \" is not supported\"));\n            }\n        })();\n        t.fill(1, 0, t.length);\n        let o = e1.slice();\n        return r.axes.length > 0 ? (r.axes.forEach((i)=>t[i] = n), r.axes.forEach((i)=>o[i] = Math.round(e1[i] * t[i]))) : (t.fill(n, 0, t.length), o.forEach((i, a)=>o[a] = Math.round(i * t[a]))), o;\n    }, Nh = (e1, t, r, n, o)=>\"\\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: \".concat(e1.type.indices, \") -> array<\").concat(e1.type.value, \", \").concat(r.length, \"> {\\n      var original_indices: array<\").concat(e1.type.value, \", \").concat(r.length, \">;\\n      for (var i:u32 = 0; i < \").concat(r.length, \"; i++) {\\n        var output_index = \").concat(e1.indicesGet(\"output_indices\", \"i\"), \";\\n        var scale = \").concat(F(\"uniforms.scales\", \"i\", n), \";\\n        var roi_low = \").concat(F(\"uniforms.roi\", \"i\", o), \";\\n        var roi_hi = \").concat(F(\"uniforms.roi\", \"i + \".concat(t.length), o), \";\\n        if (scale == 1.0) {\\n          original_indices[i] = \").concat(e1.type.value, \"(output_index);\\n        } else {\\n          var input_shape_i = \").concat(F(\"uniforms.input_shape\", \"i\", t.length), \";\\n          var output_shape_i = \").concat(F(\"uniforms.output_shape\", \"i\", r.length), \";\\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\\n                                                                           input_shape_i, roi_low, roi_hi);\\n        }\\n      }\\n      return original_indices;\\n    }\"), Vh = (e1, t, r, n, o, i, a)=>\"\\n    fn calculateInputIndicesFromOutputIndices(output_indices: \".concat(t.type.indices, \") -> \").concat(e1.type.indices, \" {\\n      var input_indices: \").concat(e1.type.indices, \";\\n      for (var i:u32 = 0; i < \").concat(n.length, \"; i++) {\\n        var output_index = \").concat(t.indicesGet(\"output_indices\", \"i\"), \";\\n        var input_index: u32;\\n        var scale = \").concat(F(\"uniforms.scales\", \"i\", o), \";\\n        if (scale == 1.0) {\\n          input_index = output_index;\\n        } else {\\n          var roi_low = \").concat(F(\"uniforms.roi\", \"i\", i), \";\\n          var roi_hi = \").concat(F(\"uniforms.roi\", \"i + \".concat(r.length), i), \";\\n          var input_shape_i = \").concat(F(\"uniforms.input_shape\", \"i\", r.length), \";\\n          var output_shape_i = \").concat(F(\"uniforms.output_shape\", \"i\", n.length), \";\\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\\n                                                                        input_shape_i, roi_low, roi_hi);\\n          if (!\").concat(a, \" || (original_idx >= 0 && original_idx < \").concat(t.type.value, \"(input_shape_i))) {\\n            if (original_idx < 0) {\\n              input_index = 0;\\n            } else if (original_idx > \").concat(t.type.value, \"(input_shape_i - 1)) {\\n              input_index = input_shape_i - 1;\\n            } else {\\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\\n            }\\n          } else {\\n            input_index = u32(original_idx);\\n          }\\n        }\\n        \").concat(e1.indicesSet(\"input_indices\", \"i\", \" input_index\"), \"\\n      }\\n      return input_indices;\\n    }\"), Wh = (e1, t)=>\"\\n    fn checkInputIndices(input_indices: \".concat(e1.type.indices, \") -> bool {\\n      for (var i:u32 = 0; i < \").concat(t.length, \"; i++) {\\n        var input_index = \").concat(e1.indicesGet(\"input_indices\", \"i\"), \";\\n        if (input_index < 0 || input_index >= \").concat(F(\"uniforms.input_shape\", \"i\", t.length), \") {\\n          return false;\\n        }\\n      }\\n      return true;\\n    }\"), El = (e1, t, r, n)=>e1.rank > n ? \"\\n    \".concat(e1.indicesSet(\"input_indices\", t, \"channel\"), \";\\n    \").concat(e1.indicesSet(\"input_indices\", r, \"batch\"), \";\\n\") : \"\", Lh = (e1, t, r, n, o)=>{\n        let [a, d, l, p] = r.length === 2 ? [\n            -1,\n            0,\n            1,\n            -1\n        ] : [\n            0,\n            2,\n            3,\n            1\n        ], m = e1.type.value;\n        return \"\\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> \".concat(m, \" {\\n      var input_indices: \").concat(e1.type.indices, \";\\n      \").concat(e1.indicesSet(\"input_indices\", d, \"max(0, min(row, \".concat(r[d], \" - 1))\")), \";\\n      \").concat(e1.indicesSet(\"input_indices\", l, \"max(0, min(col, \".concat(r[l], \" - 1))\")), \";\\n      \").concat(El(e1, p, a, 2), \"\\n      return \").concat(e1.getByIndices(\"input_indices\"), \";\\n    }\\n\\n    fn bilinearInterpolation(output_indices: \").concat(t.type.indices, \") -> \").concat(m, \" {\\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\\n      var row:\").concat(m, \" = originalIndices[\").concat(d, \"];\\n      var col:\").concat(m, \" = originalIndices[\").concat(l, \"];\\n      \").concat(n ? \"if (row < 0 || row > (\".concat(r[d], \" - 1) || col < 0 || col > (\").concat(r[l], \" - 1)) {\\n        return \").concat(o, \";\\n      }\") : \"\", \";\\n      row = max(0, min(row, \").concat(r[d], \" - 1));\\n      col = max(0, min(col, \").concat(r[l], \" - 1));\\n      var row1: u32 = u32(row);\\n      var col1: u32 = u32(col);\\n      var row2: u32 = u32(row + 1);\\n      var col2: u32 = u32(col + 1);\\n      var channel: u32 = \").concat(r.length > 2 ? \"u32(originalIndices[\".concat(p, \"])\") : \"0\", \";\\n      var batch: u32 =  \").concat(r.length > 2 ? \"u32(originalIndices[\".concat(a, \"])\") : \"0\", \";\\n      var x11: \").concat(m, \" = getInputValue(batch, channel, row1, col1);\\n      var x12: \").concat(m, \" = getInputValue(batch, channel, row1, col2);\\n      var x21: \").concat(m, \" = getInputValue(batch, channel, row2, col1);\\n      var x22: \").concat(m, \" = getInputValue(batch, channel, row2, col2);\\n      var dx1: \").concat(m, \" = abs(row - \").concat(m, \"(row1));\\n      var dx2: \").concat(m, \" = abs(\").concat(m, \"(row2) - row);\\n      var dy1: \").concat(m, \" = abs(col - \").concat(m, \"(col1));\\n      var dy2: \").concat(m, \" = abs(\").concat(m, \"(col2) - col);\\n      if (row1 == row2) {\\n        dx1 = 0.5;\\n        dx2 = 0.5;\\n      }\\n      if (col1 == col2) {\\n        dy1 = 0.5;\\n        dy2 = 0.5;\\n      }\\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\\n    }\");\n    }, Gh = (e1, t, r, n, o, i, a, d, l, p)=>{\n        let m = r.length === 2, u = !0, [h, _] = m ? [\n            0,\n            1\n        ] : u ? [\n            2,\n            3\n        ] : [\n            1,\n            2\n        ], y = e1.type.value, g = (x)=>{\n            let $ = x === h ? \"row\" : \"col\";\n            return \"\\n      fn \".concat($, \"CubicInterpolation(input_indices: \").concat(e1.type.indices, \", output_indices: \").concat(t.type.indices, \") -> \").concat(y, \" {\\n        var output_index = \").concat(t.indicesGet(\"output_indices\", x), \";\\n        var originalIdx: \").concat(y, \" = getOriginalCoordinateFromResizedCoordinate(output_index, \").concat(o[x], \",\\n        \").concat(n[x], \", \").concat(r[x], \", \").concat(i[x], \", \").concat(i[x], \" + \").concat(r.length, \");\\n        var fractOriginalIdx: \").concat(y, \" = originalIdx - floor(originalIdx);\\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\\n\\n        if (\").concat(d, \" && (originalIdx < 0 || originalIdx > (\").concat(r[x], \" - 1))) {\\n          return \").concat(l, \";\\n        }\\n        var data: array<\").concat(y, \", 4> = array<\").concat(y, \", 4>(0.0, 0.0, 0.0, 0.0);\\n        for (var i: i32 = -1; i < 3; i++) {\\n          var \").concat($, \": \").concat(y, \" = originalIdx + \").concat(y, \"(i);\\n          if (\").concat($, \" < 0 || \").concat($, \" >= \").concat(r[x], \") {\\n            \").concat((()=>p ? \"coefs[i + 1] = 0.0;\\n                        continue;\" : d ? \"return \".concat(l, \";\") : \"\".concat($, \" = max(0, min(\").concat($, \", \").concat(r[x], \" - 1));\"))(), \";\\n          }\\n        var input_indices_copy: \").concat(e1.type.indices, \" = input_indices;\\n          \").concat(e1.indicesSet(\"input_indices_copy\", x, \"u32(\".concat($, \")\")), \";\\n          data[i + 1] = \").concat(x === h ? e1.getByIndices(\"input_indices_copy\") : \"rowCubicInterpolation(input_indices_copy, output_indices)\", \";\\n        }\\n        return cubicInterpolation1D(data, coefs);\\n      }\");\n        };\n        return \"\\n    \".concat(g(h), \";\\n    \").concat(g(_), \";\\n  fn getCubicInterpolationCoefs(s: \").concat(y, \") -> array<\").concat(y, \", 4> {\\n    var absS = abs(s);\\n    var coeffs: array<\").concat(y, \", 4> = array<\").concat(y, \", 4>(0.0, 0.0, 0.0, 0.0);\\n    var oneMinusAbsS: \").concat(y, \" = 1.0 - absS;\\n    var twoMinusAbsS: \").concat(y, \" = 2.0 - absS;\\n    var onePlusAbsS: \").concat(y, \" = 1.0 + absS;\\n    coeffs[0] = ((\").concat(a, \" * onePlusAbsS - 5 * \").concat(a, \") * onePlusAbsS + 8 * \").concat(a, \") * onePlusAbsS - 4 * \").concat(a, \";\\n    coeffs[1] = ((\").concat(a, \" + 2) * absS - (\").concat(a, \" + 3)) * absS * absS + 1;\\n    coeffs[2] = ((\").concat(a, \" + 2) * oneMinusAbsS - (\").concat(a, \" + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\\n    coeffs[3] = ((\").concat(a, \" * twoMinusAbsS - 5 * \").concat(a, \") * twoMinusAbsS + 8 * \").concat(a, \") * twoMinusAbsS - 4 * \").concat(a, \";\\n    return coeffs;\\n  }\\n\\n  fn cubicInterpolation1D(x: array<\").concat(y, \", 4>, coefs: array<\").concat(y, \", 4>) -> \").concat(y, \" {\\n    var coefsSum: \").concat(y, \" = coefs[0] + coefs[1] + coefs[2] + coefs[3];\\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\\n  }\\n\\n  fn bicubicInterpolation(output_indices: \").concat(t.type.indices, \") -> \").concat(y, \" {\\n    var input_indices: \").concat(e1.type.indices, \" = output_indices;\\n    return colCubicInterpolation(input_indices, output_indices);\\n  }\\n    \");\n    }, Hh = (e1, t, r, n, o)=>{\n        let [a, d, l, p, m] = r.length === 3 ? [\n            -1,\n            0,\n            1,\n            2,\n            -1\n        ] : [\n            0,\n            2,\n            3,\n            4,\n            1\n        ], u = e1.type.value;\n        return \"\\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> \".concat(u, \" {\\n      var input_indices: \").concat(e1.type.indices, \";\\n      \").concat(e1.indicesSet(\"input_indices\", d, \"max(0, min(depth, \".concat(r[d], \" - 1))\")), \";\\n      \").concat(e1.indicesSet(\"input_indices\", l, \"max(0, min(height, \".concat(r[l], \" - 1))\")), \";\\n      \").concat(e1.indicesSet(\"input_indices\", p, \"max(0, min(width, \".concat(r[p], \" - 1))\")), \";\\n      \").concat(El(e1, m, a, 3), \"\\n      return \").concat(e1.getByIndices(\"input_indices\"), \";\\n    }\\n\\n    fn trilinearInterpolation(output_indices: \").concat(t.type.indices, \") -> \").concat(u, \" {\\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\\n      var depth:\").concat(u, \" = originalIndices[\").concat(d, \"];\\n      var height:\").concat(u, \" = originalIndices[\").concat(l, \"];\\n      var width:\").concat(u, \" = originalIndices[\").concat(p, \"];\\n      \").concat(n ? \"if (depth < 0 || depth > (\".concat(r[d], \" - 1) || height < 0 || height > (\").concat(r[l], \" - 1) || width < 0 || (width > \").concat(r[p], \" - 1)) {\\n      return \").concat(o, \";\\n        }\") : \"\", \";\\n\\n    depth = max(0, min(depth, \").concat(r[d], \" - 1));\\n      height = max(0, min(height, \").concat(r[l], \" - 1));\\n      width = max(0, min(width, \").concat(r[p], \" - 1));\\n      var depth1: u32 = u32(depth);\\n      var height1: u32 = u32(height);\\n      var width1: u32 = u32(width);\\n      var depth2: u32 = u32(depth + 1);\\n      var height2: u32 = u32(height + 1);\\n      var width2: u32 = u32(width + 1);\\n      var channel: u32 = \").concat(r.length > 3 ? \"u32(originalIndices[\".concat(m, \"])\") : \"0\", \";\\n      var batch: u32 =  \").concat(r.length > 3 ? \"u32(originalIndices[\".concat(a, \"])\") : \"0\", \";\\n\\n      var x111: \").concat(u, \" = getInputValue(batch, channel, depth1, height1, width1);\\n      var x112: \").concat(u, \" = getInputValue(batch, channel, depth1, height1, width2);\\n      var x121: \").concat(u, \" = getInputValue(batch, channel, depth1, height2, width1);\\n      var x122: \").concat(u, \" = getInputValue(batch, channel, depth1, height2, width2);\\n      var x211: \").concat(u, \" = getInputValue(batch, channel, depth2, height1, width1);\\n      var x212: \").concat(u, \" = getInputValue(batch, channel, depth2, height1, width2);\\n      var x221: \").concat(u, \" = getInputValue(batch, channel, depth2, height2, width1);\\n      var x222: \").concat(u, \" = getInputValue(batch, channel, depth2, height2, width2);\\n      var dx1: \").concat(u, \" = abs(depth - \").concat(u, \"(depth1));\\n      var dx2: \").concat(u, \" = abs(\").concat(u, \"(depth2) - depth);\\n      var dy1: \").concat(u, \" = abs(height - \").concat(u, \"(height1));\\n      var dy2: \").concat(u, \" = abs(\").concat(u, \"(height2) - height);\\n      var dz1: \").concat(u, \" = abs(width - \").concat(u, \"(width1));\\n      var dz2: \").concat(u, \" = abs(\").concat(u, \"(width2) - width);\\n      if (depth1 == depth2) {\\n        dx1 = 0.5;\\n        dx2 = 0.5;\\n      }\\n      if (height1 == height2) {\\n        dy1 = 0.5;\\n        dy2 = 0.5;\\n      }\\n      if (width1 == width2) {\\n        dz1 = 0.5;\\n        dz2 = 0.5;\\n      }\\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\\n    }\");\n    }, Fh = (e1, t, r, n, o, i)=>{\n        let a = e1.dims, d = Mh(i, t.axes, a.length), l = Rh(a, n, o, t.axes), p = n.slice();\n        n.length === 0 && (p = a.map((v, S)=>v === 0 ? 1 : l[S] / v), t.keepAspectRatioPolicy !== \"stretch\" && (l = Uh(a, p, t)));\n        let m = M(\"output\", e1.dataType, l.length), u = E(\"input\", e1.dataType, a.length), h = C.size(l), _ = a.length === l.length && a.every((v, S)=>v === l[S]), y = t.coordinateTransformMode === \"tf_crop_and_resize\", g = t.extrapolationValue, x = u.type.value, $ = (v)=>\"\\n      \".concat(_ ? \"\" : \"\\n      \".concat(Dh(t.coordinateTransformMode, x), \";\\n      \").concat((()=>{\n                switch(t.mode){\n                    case \"nearest\":\n                        return \"\\n              \".concat(Wh(u, a), \";\\n              \").concat(Bh(t.nearestMode, r, x), \";\\n              \").concat(Vh(u, m, a, l, p.length, d.length, y), \";\\n              \");\n                    case \"linear\":\n                        return \"\\n              \".concat(Nh(m, a, l, p.length, d.length), \";\\n              \").concat((()=>{\n                            if (a.length === 2 || a.length === 4) return \"\".concat(Lh(u, m, a, y, g));\n                            if (a.length === 3 || a.length === 5) return \"\".concat(Hh(u, m, a, y, g));\n                            throw Error(\"Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.\");\n                        })(), \";\\n            \");\n                    case \"cubic\":\n                        return \"\\n            \".concat((()=>{\n                            if (a.length === 2 || a.length === 4) return \"\".concat(Gh(u, m, a, l, p, d, t.cubicCoeffA, y, t.extrapolationValue, t.excludeOutside));\n                            throw Error(\"Cubic mode only supports input dims 2 and 4 are supported in linear mode.\");\n                        })(), \";\\n            \");\n                    default:\n                        throw Error(\"Invalid resize mode\");\n                }\n            })(), \";\\n      \"), \"\\n      \").concat(v.registerUniform(\"output_size\", \"u32\").registerUniform(\"scales\", \"f32\", p.length).registerUniform(\"roi\", \"f32\", d.length).declareVariables(u, m), \"\\n      \").concat(v.mainStart(), \"\\n        \").concat(v.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n        \").concat(_ ? \"output[global_idx] = input[global_idx];\" : \"\\n        let output_indices = \".concat(m.offsetToIndices(\"global_idx\"), \";\\n        var input_indices: \").concat(u.type.indices, \";\\n        \").concat((()=>{\n                switch(t.mode){\n                    case \"nearest\":\n                        return \"input_indices = calculateInputIndicesFromOutputIndices(output_indices);\\n                if (checkInputIndices(input_indices)) {\\n                  output[global_idx] = \".concat(u.getByIndices(\"input_indices\"), \";\\n                } else {\\n                  output[global_idx] = \").concat(t.extrapolationValue, \";\\n                }\");\n                    case \"linear\":\n                        return \"output[global_idx] = \".concat(a.length === 2 || a.length === 4 ? \"bilinearInterpolation\" : \"trilinearInterpolation\", \"(output_indices);\");\n                    case \"cubic\":\n                        return \"output[global_idx] = bicubicInterpolation(output_indices);\";\n                    default:\n                        throw Error(\"Unsupported resize mode: \".concat(t.mode));\n                }\n            })(), \";\\n\"), \"\\n      }\");\n        return {\n            name: \"Resize\",\n            shaderCache: {\n                hint: \"\".concat(t.cacheKey, \"|\").concat(r, \"|\").concat(p.length > 0 ? p : \"\", \"|\").concat(o.length > 0 ? o : \"\", \"|\").concat(d.length > 0 ? d : \"\", \"|\").concat(_, \"|\").concat(a),\n                inputDependencies: [\n                    \"rank\"\n                ]\n            },\n            getShaderSource: $,\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: l,\n                            dataType: e1.dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(h / 64)\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: h\n                        },\n                        {\n                            type: 1,\n                            data: p\n                        },\n                        {\n                            type: 1,\n                            data: d\n                        },\n                        ...N(a, l)\n                    ]\n                })\n        };\n    }, qh = (e1)=>{\n        let t = e1.customDataBuffer;\n        return new Uint32Array(t, t.byteOffset, 1)[0];\n    }, Pl = (e1, t)=>{\n        let r = [], n = [], o = [], i = qh(e1);\n        if (t.antialias !== 0) throw Error(\"Only default value (0) for Antialias attribute is supported\");\n        Oh(e1.inputs, t, i, r, n, o), e1.compute(Fh(e1.inputs[0], t, i, r, n, o), {\n            inputs: [\n                0\n            ]\n        });\n    }, zl = (e1)=>{\n        let t = e1.antialias, r = e1.axes, n = e1.coordinateTransformMode, o = e1.cubicCoeffA, i = e1.excludeOutside !== 0, a = e1.extrapolationValue, d = e1.keepAspectRatioPolicy, l = e1.mode, p = e1.nearestMode === \"\" ? \"simple\" : e1.nearestMode;\n        return re({\n            antialias: t,\n            axes: r,\n            coordinateTransformMode: n,\n            cubicCoeffA: o,\n            excludeOutside: i,\n            extrapolationValue: a,\n            keepAspectRatioPolicy: d,\n            mode: l,\n            nearestMode: p\n        });\n    };\n});\nvar Kh, jh, Dl, Bl = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    Kh = (e1, t)=>{\n        let [r, n, o, i] = e1, { numHeads: a, rotaryEmbeddingDim: d } = t;\n        if (r.dims.length !== 3 && r.dims.length !== 4) throw new Error(\"Input 'x' is expected to have 3 or 4 dimensions, got \".concat(r.dims.length));\n        if (!C.areEqual(n.dims, []) && !C.areEqual(n.dims, [\n            1\n        ]) && n.dims.length !== 2) throw new Error(\"Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got \".concat(n.dims.length));\n        if (o.dims.length !== 2) throw new Error(\"Input 'cos_cache' is expected to have 2 dimensions, got \".concat(o.dims.length));\n        if (i.dims.length !== 2) throw new Error(\"Input 'sin_cache' is expected to have 2 dimensions, got \".concat(i.dims.length));\n        if (!C.areEqual(o.dims, i.dims)) throw new Error(\"Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape\");\n        if (d > 0 && a === 0) throw new Error(\"num_heads must be provided if rotary_embedding_dim is specified\");\n        let l = r.dims[0], p = r.dims[r.dims.length - 2], m = o.dims[0], u = C.sizeFromDimension(r.dims, 1) / p, h = d === 0 ? o.dims[1] * 2 : u / a;\n        if (d > h) throw new Error(\"rotary_embedding_dim must be less than or equal to head_size\");\n        if (n.dims.length === 2) {\n            if (l !== n.dims[0]) throw new Error(\"Input 'position_ids' dimension 0 should be of size batch_size, got \".concat(n.dims[0]));\n            if (p !== n.dims[1]) throw new Error(\"Input 'position_ids' dimension 1 should be of size sequence_length, got \".concat(n.dims[1]));\n        }\n        if (h / 2 !== o.dims[1] && d / 2 !== o.dims[1]) throw new Error(\"Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got \".concat(o.dims[1]));\n        if (p > m) throw new Error(\"Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported\");\n    }, jh = (e1, t)=>{\n        let { interleaved: r, numHeads: n, rotaryEmbeddingDim: o, scale: i } = t, a = e1[0].dims[0], d = C.sizeFromDimension(e1[0].dims, 1), l = e1[0].dims[e1[0].dims.length - 2], p = d / l, m = e1[2].dims[1], u = o === 0 ? m * 2 : p / n, h = new Array(a, l, p / u, u - m), _ = C.computeStrides(h), y = [\n            {\n                type: 1,\n                data: i\n            },\n            {\n                type: 12,\n                data: h\n            },\n            {\n                type: 12,\n                data: _\n            },\n            ...e1[0].dims.length === 3 ? new Array({\n                type: 12,\n                data: [\n                    d,\n                    p,\n                    u,\n                    1\n                ]\n            }) : [],\n            ...e1[0].dims.length === 4 ? new Array({\n                type: 12,\n                data: [\n                    d,\n                    u,\n                    l * u,\n                    1\n                ]\n            }) : [],\n            ...N(e1[0].dims, e1[1].dims, e1[2].dims, e1[3].dims, e1[0].dims)\n        ], g = (x)=>{\n            let $ = E(\"input\", e1[0].dataType, e1[0].dims.length), v = E(\"position_ids\", e1[1].dataType, e1[1].dims.length), S = E(\"cos_cache\", e1[2].dataType, e1[2].dims.length), T = E(\"sin_cache\", e1[3].dataType, e1[3].dims.length), A = M(\"output\", e1[0].dataType, e1[0].dims.length);\n            return x.registerUniforms([\n                {\n                    name: \"scale\",\n                    type: \"f32\"\n                },\n                {\n                    name: \"global_shape\",\n                    type: \"u32\",\n                    length: h.length\n                },\n                {\n                    name: \"global_strides\",\n                    type: \"u32\",\n                    length: _.length\n                },\n                {\n                    name: \"input_output_strides\",\n                    type: \"u32\",\n                    length: _.length\n                }\n            ]), \"\\n        \".concat(x.declareVariables($, v, S, T, A), \"\\n\\n        \").concat(x.mainStart(kt), \"\\n          let half_rotary_emb_dim = uniforms.\").concat(S.name, \"_shape[1];\\n          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;\\n          let size = uniforms.global_shape[0] * uniforms.global_strides[0];\\n          \").concat(x.guardAgainstOutOfBoundsWorkgroupSizes(\"size\"), \"\\n\\n          if (bsnh[3] < half_rotary_emb_dim) {\\n            let position_ids_idx =\\n                \").concat(v.broadcastedIndicesToOffset(\"bsnh.xy\", M(\"\", v.type.tensor, 2)), \";\\n            let position_id =\\n                u32(\").concat(v.getByOffset(\"position_ids_idx\"), \") + select(0, bsnh[1], position_ids_idx == 0);\\n            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], \").concat(r, \");\\n            let j = i + select(half_rotary_emb_dim, 1, \").concat(r, \");\\n            let re = \").concat($.getByOffset(\"i\"), \" * \").concat(S.get(\"position_id\", \"bsnh[3]\"), \" -\\n                \").concat($.getByOffset(\"j\"), \" * \").concat(T.get(\"position_id\", \"bsnh[3]\"), \";\\n            \").concat(A.setByOffset(\"i\", \"re\"), \"\\n            let im = \").concat($.getByOffset(\"i\"), \" * \").concat(T.get(\"position_id\", \"bsnh[3]\"), \" +\\n                \").concat($.getByOffset(\"j\"), \" * \").concat(S.get(\"position_id\", \"bsnh[3]\"), \";\\n            \").concat(A.setByOffset(\"j\", \"im\"), \"\\n          } else {\\n            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;\\n            \").concat(A.setByOffset(\"k\", $.getByOffset(\"k\")), \"\\n          }\\n        }\");\n        };\n        return {\n            name: \"RotaryEmbedding\",\n            shaderCache: {\n                hint: re({\n                    interleaved: r\n                }).cacheKey,\n                inputDependencies: [\n                    \"rank\",\n                    \"rank\",\n                    \"rank\",\n                    \"rank\"\n                ]\n            },\n            getShaderSource: g,\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: e1[0].dims,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(C.size(h) / kt)\n                    },\n                    programUniforms: y\n                })\n        };\n    }, Dl = (e1, t)=>{\n        Kh(e1.inputs, t), e1.compute(jh(e1.inputs, t));\n    };\n});\nvar Yh, Zh, Ml, Rl = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    Yh = (e1)=>{\n        if (!e1 || e1.length < 3) throw new Error(\"layerNorm requires at least 3 inputs.\");\n        let t = e1[0], r = e1[1], n = e1[2];\n        if (t.dataType !== r.dataType || t.dataType !== n.dataType) throw new Error(\"All inputs must have the same data type\");\n        if (t.dims.length !== 3 && t.dims.length !== 2) throw new Error(\"Input must be 2D or 3D\");\n        if (r.dims.length !== 3 && r.dims.length !== 2) throw new Error(\"Skip must be 2D or 3D\");\n        let o = t.dims[t.dims.length - 1], i = t.dims[t.dims.length - 2];\n        if (r.dims[r.dims.length - 1] !== o) throw new Error(\"Skip must have the same hidden size as input\");\n        if (r.dims[r.dims.length - 2] !== i) throw new Error(\"Skip must have the same sequence length as input\");\n        if (n.dims.length !== 1) throw new Error(\"Gamma must be 1D\");\n        if (n.dims[n.dims.length - 1] !== o) throw new Error(\"Gamma must have the same hidden size as input\");\n        if (e1.length > 3) {\n            let a = e1[3];\n            if (a.dims.length !== 1) throw new Error(\"Beta must be 1D\");\n            if (a.dims[a.dims.length - 1] !== o) throw new Error(\"Beta must have the same hidden size as input\");\n        }\n        if (e1.length > 4) {\n            let a = e1[4];\n            if (a.dims.length !== 1) throw new Error(\"Bias must be 1D\");\n            if (a.dims[a.dims.length - 1] !== o) throw new Error(\"Bias must have the same hidden size as input\");\n        }\n    }, Zh = (e1, t, r, n)=>{\n        let o = t.simplified, i = e1[0].dims, a = C.size(i), d = i, l = a, p = i.slice(-1)[0], m = n ? i.slice(0, -1).concat(1) : [], u = !o && e1.length > 3, h = e1.length > 4, _ = n && r > 1, y = n && r > 2, g = r > 3, x = 64, $ = me(p), v = [\n            {\n                type: 12,\n                data: l\n            },\n            {\n                type: 12,\n                data: $\n            },\n            {\n                type: 12,\n                data: p\n            },\n            {\n                type: 1,\n                data: t.epsilon\n            }\n        ], S = (A)=>{\n            let k = [\n                {\n                    name: \"output_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"components\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"hidden_size\",\n                    type: \"u32\"\n                },\n                {\n                    name: \"epsilon\",\n                    type: \"f32\"\n                }\n            ], P = [\n                E(\"x\", e1[0].dataType, e1[0].dims, $),\n                E(\"skip\", e1[1].dataType, e1[1].dims, $),\n                E(\"gamma\", e1[2].dataType, e1[2].dims, $)\n            ];\n            u && P.push(E(\"beta\", e1[3].dataType, e1[3].dims, $)), h && P.push(E(\"bias\", e1[4].dataType, e1[4].dims, $)), P.push(M(\"output\", e1[0].dataType, d, $)), _ && P.push(M(\"mean_output\", 1, m)), y && P.push(M(\"inv_std_output\", 1, m)), g && P.push(M(\"input_skip_bias_sum\", e1[0].dataType, d, $));\n            let D = _e(e1[0].dataType), R = _e(1, $);\n            return \"\\n\\n      \".concat(A.registerUniforms(k).declareVariables(...P), \"\\n      var<workgroup> sum_shared : array<\").concat(R, \", \").concat(x, \">;\\n      var<workgroup> sum_squared_shared : array<\").concat(R, \", \").concat(x, \">;\\n\\n      \").concat(A.mainStart([\n                x,\n                1,\n                1\n            ]), \"\\n        let ix = local_id.x;\\n        let iy = global_id.x / \").concat(x, \";\\n\\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\\n        var stride = hidden_size_vectorized / \").concat(x, \";\\n        let offset = ix * stride + iy * hidden_size_vectorized;\\n        let offset1d = stride * ix;\\n        if (ix == \").concat(x - 1, \") {\\n          stride = hidden_size_vectorized - stride * ix;\\n        }\\n        for (var i: u32 = 0; i < stride; i++) {\\n          let skip_value = skip[offset + i];\\n          let bias_value = \").concat(h ? \"bias[offset1d + i]\" : D + \"(0.0)\", \";\\n          let input_value = x[offset + i];\\n          let value = input_value + skip_value + bias_value;\\n          \").concat(g ? \"input_skip_bias_sum[offset + i] = value;\" : \"\", \"\\n          output[offset + i] = value;\\n          let f32_value = \").concat(Et(D, $, \"value\"), \";\\n          sum_shared[ix] += f32_value;\\n          sum_squared_shared[ix] += f32_value * f32_value;\\n        }\\n        workgroupBarrier();\\n\\n        var reduce_size : u32 = \").concat(x, \";\\n        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {\\n          reduce_size = curr_size + (reduce_size & 1);\\n          if (ix < curr_size) {\\n            sum_shared[ix] += sum_shared[ix + reduce_size];\\n            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];\\n          }\\n          workgroupBarrier();\\n        }\\n\\n        let sum = sum_shared[0];\\n        let square_sum = sum_squared_shared[0];\\n        let mean = \").concat(Fe(\"sum\", $), \" / f32(uniforms.hidden_size);\\n        let inv_std_dev = inverseSqrt(\").concat(Fe(\"square_sum\", $), \" / f32(uniforms.hidden_size) \").concat(o ? \"\" : \"- mean * mean\", \" + uniforms.epsilon);\\n        \").concat(_ ? \"mean_output[global_idx] = mean;\" : \"\", \"\\n        \").concat(y ? \"inv_std_output[global_idx] = inv_std_dev;\" : \"\", \"\\n\\n        for (var i: u32 = 0; i < stride; i++) {\\n          output[offset + i] = (output[offset + i] \").concat(o ? \"\" : \"- \".concat(D, \"(mean)\"), \") *\\n            \").concat(D, \"(inv_std_dev) * gamma[offset1d + i]\\n            \").concat(u ? \"+ beta[offset1d + i]\" : \"\", \";\\n        }\\n      }\");\n        }, T = [\n            {\n                dims: d,\n                dataType: e1[0].dataType\n            }\n        ];\n        return r > 1 && T.push({\n            dims: m,\n            dataType: 1\n        }), r > 2 && T.push({\n            dims: m,\n            dataType: 1\n        }), r > 3 && T.push({\n            dims: i,\n            dataType: e1[0].dataType\n        }), {\n            name: \"SkipLayerNormalization\",\n            shaderCache: {\n                hint: \"\".concat($, \";\").concat(_, \";\").concat(y, \";\").concat(g),\n                inputDependencies: e1.map((A, k)=>\"type\")\n            },\n            getShaderSource: S,\n            getRunData: ()=>({\n                    outputs: T,\n                    dispatchGroup: {\n                        x: Math.ceil(l / p)\n                    },\n                    programUniforms: v\n                })\n        };\n    }, Ml = (e1, t)=>{\n        Yh(e1.inputs);\n        let n = [\n            0\n        ];\n        e1.outputCount > 1 && n.push(-3), e1.outputCount > 2 && n.push(-3), e1.outputCount > 3 && n.push(3), e1.compute(Zh(e1.inputs, t, e1.outputCount, !1), {\n            outputs: n\n        });\n    };\n});\nvar Qh, rn, Xh, Ul, Jh, eg, Nl, Vl, Wl = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    ae();\n    Qh = (e1, t)=>{\n        if (!e1 || e1.length < 1) throw new Error(\"too few inputs\");\n        if (t.axes.length !== 0) {\n            if (t.axes.length !== t.starts.length || t.axes.length !== t.ends.length) throw new Error(\"axes, starts and ends must have the same length\");\n        } else if (t.starts.length !== t.ends.length) throw new Error(\"starts and ends must have the same length\");\n        e1.slice(1).forEach((r, n)=>{\n            if (e1[n + 1].dataType !== 6 && e1[n + 1].dataType !== 7) throw new Error(\"Input \".concat(n, \" must be an array of int32 or int64\"));\n        });\n    }, rn = (e1, t)=>{\n        let r = [];\n        if (e1.length > t) if (e1[t].dataType === 7) e1[t].getBigInt64Array().forEach((n)=>r.push(Number(n)));\n        else if (e1[t].dataType === 6) e1[t].getInt32Array().forEach((n)=>r.push(Number(n)));\n        else throw new Error(\"Input \".concat(t, \" must be an array of int32 or int64\"));\n        return r;\n    }, Xh = (e1, t)=>{\n        if (e1.length > 1) {\n            let r = rn(e1, 1), n = rn(e1, 2), o = rn(e1, 3);\n            return o.length === 0 && (o = [\n                ...Array(e1[0].dims.length).keys()\n            ]), re({\n                starts: r,\n                ends: n,\n                axes: o\n            });\n        } else return t;\n    }, Ul = (e1, t, r, n, o)=>{\n        let i = e1;\n        return e1 < 0 && (i += r[n[t]]), o[t] < 0 ? Math.max(0, Math.min(i, r[n[t]] - 1)) : Math.max(0, Math.min(i, r[n[t]]));\n    }, Jh = (e1, t, r)=>\"fn calculateInputIndices(output_indices: \".concat(t.type.indices, \") -> \").concat(e1.type.indices, \" {\\n          var input_indices: \").concat(e1.type.indices, \";\\n          var carry = 0u;\\n          for (var i = \").concat(r.length, \"; i >= 0; i--) {\\n            let input_shape_i = \").concat(F(\"uniforms.input_shape\", \"i\", r.length), \";\\n            let steps_i = \").concat(F(\"uniforms.steps\", \"i\", r.length), \";\\n            let signs_i = \").concat(F(\"uniforms.signs\", \"i\", r.length), \";\\n            let starts_i = \").concat(F(\"uniforms.starts\", \"i\", r.length), \";\\n            var output_index = \").concat(t.indicesGet(\"output_indices\", \"i\"), \";\\n            var input_index = output_index * steps_i + starts_i + carry;\\n            carry = input_index / input_shape_i;\\n            input_index = input_index % input_shape_i;\\n            if (signs_i < 0) {\\n              input_index = input_shape_i - input_index - 1u + starts_i;\\n            }\\n            \").concat(e1.indicesSet(\"input_indices\", \"i\", \"input_index\"), \";\\n          }\\n          return input_indices;\\n      }\"), eg = (e1, t)=>{\n        let r = e1[0].dims, n = C.size(r), o = t.axes.length > 0 ? C.normalizeAxes(t.axes, r.length) : [\n            ...Array(r.length).keys()\n        ], i = rn(e1, 4);\n        i.forEach(($)=>$ !== 0 || (()=>{\n                throw new Error(\"step cannot be 0\");\n            })), i.length === 0 && (i = Array(o.length).fill(1));\n        let a = t.starts.map(($, v)=>Ul($, v, r, o, i)), d = t.ends.map(($, v)=>Ul($, v, r, o, i));\n        if (o.length !== a.length || o.length !== d.length) throw new Error(\"start, ends and axes should have the same number of elements\");\n        if (o.length !== r.length) for(let $ = 0; $ < r.length; ++$)o.includes($) || (a.splice($, 0, 0), d.splice($, 0, r[$]), i.splice($, 0, 1));\n        let l = i.map(($)=>Math.sign($));\n        i.forEach(($, v, S)=>{\n            if ($ < 0) {\n                let T = (d[v] - a[v]) / $, A = a[v], k = A + T * i[v];\n                a[v] = k, d[v] = A, S[v] = -$;\n            }\n        });\n        let p = r.slice(0);\n        o.forEach(($, v)=>{\n            p[$] = Math.ceil((d[$] - a[$]) / i[$]);\n        });\n        let m = {\n            dims: p,\n            dataType: e1[0].dataType\n        }, u = M(\"output\", e1[0].dataType, p.length), h = E(\"input\", e1[0].dataType, e1[0].dims.length), _ = C.size(p), y = [\n            {\n                name: \"outputSize\",\n                type: \"u32\"\n            },\n            {\n                name: \"starts\",\n                type: \"u32\",\n                length: a.length\n            },\n            {\n                name: \"signs\",\n                type: \"i32\",\n                length: l.length\n            },\n            {\n                name: \"steps\",\n                type: \"u32\",\n                length: i.length\n            }\n        ], g = [\n            {\n                type: 12,\n                data: _\n            },\n            {\n                type: 12,\n                data: a\n            },\n            {\n                type: 6,\n                data: l\n            },\n            {\n                type: 12,\n                data: i\n            },\n            ...N(e1[0].dims, p)\n        ], x = ($)=>\"\\n      \".concat($.registerUniforms(y).declareVariables(h, u), \"\\n        \").concat(Jh(h, u, r), \"\\n        \").concat($.mainStart(), \"\\n          \").concat($.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\"), \"\\n          let output_indices = \").concat(u.offsetToIndices(\"global_idx\"), \";\\n          let input_indices = calculateInputIndices(output_indices);\\n          \").concat(u.setByOffset(\"global_idx\", h.getByIndices(\"input_indices\")), \"\\n      }\");\n        return {\n            name: \"Slice\",\n            shaderCache: {\n                hint: \"\".concat(l.length, \"_\").concat(a.length, \"_\").concat(i.length),\n                inputDependencies: [\n                    \"rank\"\n                ]\n            },\n            getShaderSource: x,\n            getRunData: ()=>({\n                    outputs: [\n                        m\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(n / 64)\n                    },\n                    programUniforms: g\n                })\n        };\n    }, Nl = (e1, t)=>{\n        Qh(e1.inputs, t);\n        let r = Xh(e1.inputs, t);\n        e1.compute(eg(e1.inputs, r), {\n            inputs: [\n                0\n            ]\n        });\n    }, Vl = (e1)=>{\n        let t = e1.starts, r = e1.ends, n = e1.axes;\n        return re({\n            starts: t,\n            ends: r,\n            axes: n\n        });\n    };\n});\nvar tg, rg, Ll, Gl, Hl = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    Se();\n    dt();\n    ae();\n    tg = (e1)=>{\n        if (!e1 || e1.length !== 1) throw new Error(\"Softmax op requires 1 input.\");\n    }, rg = (e1, t)=>{\n        let r = e1.inputs[0], n = r.dims, o = C.size(n), i = n.length, a = C.normalizeAxis(t.axis, i), d = a < n.length - 1, l, p = [];\n        d ? (p = Array.from({\n            length: i\n        }, (P, D)=>D), p[a] = i - 1, p[i - 1] = a, l = e1.compute(Pe(r, p), {\n            inputs: [\n                r\n            ],\n            outputs: [\n                -1\n            ]\n        })[0]) : l = r;\n        let m = l.dims, u = m[i - 1], h = o / u, _ = me(u), y = u / _, g = 64;\n        h === 1 && (g = 256);\n        let x = (P, D)=>D === 4 ? \"max(max(\".concat(P, \".x, \").concat(P, \".y), max(\").concat(P, \".z, \").concat(P, \".w))\") : D === 2 ? \"max(\".concat(P, \".x, \").concat(P, \".y)\") : D === 3 ? \"max(max(\".concat(P, \".x, \").concat(P, \".y), \").concat(P, \".z)\") : P, $ = E(\"x\", l.dataType, l.dims, _), v = M(\"result\", l.dataType, l.dims, _), S = $.type.value, T = _e(l.dataType) === \"f32\" ? \"var threadMax = \".concat(S, \"(-3.402823e+38f);\") : \"var threadMax = \".concat(S, \"(-65504.0h);\"), A = (P)=>\"\\n      var<workgroup> rowMaxShared : \".concat(S, \";\\n      var<workgroup> rowSumShared : \").concat(S, \";\\n      var<workgroup> threadShared : array<\").concat(S, \", \").concat(g, \">;\\n\\n      fn getValue(row: i32, col: i32, row_stride: i32) -> \").concat(S, \" {\\n        let index = row * row_stride + col;\\n        return x[index];\\n      }\\n\\n      fn setValue(row: i32, col: i32, row_stride: i32, value: \").concat(S, \") {\\n        let index = row * row_stride + col;\\n        result[index] = value;\\n      }\\n      \").concat(P.registerUniform(\"packedCols\", \"i32\").declareVariables($, v), \"\\n      \").concat(P.mainStart(g), \"\\n        let gindex = i32(global_idx);\\n        let lindex = i32(local_idx);\\n        const wg = \").concat(g, \";\\n        let row = gindex / wg;\\n        let cols = uniforms.packedCols;\\n        let row_stride : i32 = uniforms.packedCols;\\n\\n        // find the rows max\\n        \").concat(T, \"\\n        for (var col = lindex; col < cols; col += wg) {\\n          let value = getValue(row, col, row_stride);\\n          threadMax = max(threadMax, value);\\n        }\\n        if (lindex < cols) {\\n          threadShared[lindex] = threadMax;\\n        }\\n        workgroupBarrier();\\n\\n        var reduceSize = min(cols, wg);\\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\\n          reduceSize = currSize + (reduceSize & 1);\\n          if (lindex < currSize) {\\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\\n          }\\n          workgroupBarrier();\\n        }\\n        if (lindex == 0) {\\n          rowMaxShared = \").concat(S, \"(\").concat(x(\"threadShared[0]\", _), \");\\n        }\\n        workgroupBarrier();\\n\\n        // find the rows sum\\n        var threadSum = \").concat(S, \"(0.0);\\n        for (var col = lindex; col < cols; col += wg) {\\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\\n          threadSum += subExp;\\n        }\\n        threadShared[lindex] = threadSum;\\n        workgroupBarrier();\\n\\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\\n          if (lindex < currSize) {\\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\\n          }\\n          workgroupBarrier();\\n        }\\n        if (lindex == 0) {\\n          rowSumShared = \").concat(S, \"(\").concat(Fe(\"threadShared[0]\", _), \");\\n        }\\n        workgroupBarrier();\\n\\n        // calculate final value for each element in the row\\n        for (var col = lindex; col < cols; col += wg) {\\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\\n          setValue(row, col, row_stride, value);\\n        }\\n      }\"), k = e1.compute({\n            name: \"Softmax\",\n            shaderCache: {\n                hint: \"\".concat(_, \";\").concat(g),\n                inputDependencies: [\n                    \"type\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: m,\n                            dataType: l.dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: h\n                    },\n                    programUniforms: [\n                        {\n                            type: 6,\n                            data: y\n                        }\n                    ]\n                }),\n            getShaderSource: A\n        }, {\n            inputs: [\n                l\n            ],\n            outputs: [\n                d ? -1 : 0\n            ]\n        })[0];\n        d && e1.compute(Pe(k, p), {\n            inputs: [\n                k\n            ]\n        });\n    }, Ll = (e1, t)=>{\n        tg(e1.inputs), rg(e1, t);\n    }, Gl = (e1)=>re({\n            axis: e1.axis\n        });\n});\nvar Fl, ng, og, ig, ql, Kl = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    Fl = (e1)=>Array.from(e1.getBigInt64Array(), Number), ng = (e1)=>{\n        if (!e1 || e1.length !== 2) throw new Error(\"Tile requires 2 inputs.\");\n        if (e1[0].dataType !== 1 && e1[0].dataType !== 10 && e1[0].dataType !== 6 && e1[0].dataType !== 12) throw new Error(\"Tile only support float, float16, int32, and uint32 data types\");\n        if (e1[1].dataType !== 7) throw new Error(\"Tile `repeats` input should be of int64 data type\");\n        if (e1[1].dims.length !== 1) throw new Error(\"Tile `repeats` input should be 1-D\");\n        if (Fl(e1[1]).length !== e1[0].dims.length) throw new Error(\"Tile `repeats` input should have same number of elements as rank of input data tensor\");\n    }, og = (e1, t)=>{\n        let r = [];\n        for(let n = 0; n < e1.length; ++n)r.push(e1[n] * t[n]);\n        return r;\n    }, ig = (e1, t)=>{\n        let r = e1[0].dims, n = t !== null && t !== void 0 ? t : Fl(e1[1]), o = og(r, n), i = C.size(o), a = e1[0].dataType, d = E(\"input\", a, r.length), l = M(\"output\", a, o.length), p = (m)=>\"\\n      const inputShape = \".concat(d.indices(...r), \";\\n      \").concat(m.registerUniform(\"output_size\", \"u32\").declareVariables(d, l), \"\\n      \").concat(m.mainStart(), \"\\n      \").concat(m.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\"), \"\\n      let output_indices = \").concat(l.offsetToIndices(\"global_idx\"), \";\\n      var input_indices: \").concat(d.type.indices, \";\\n      for (var i = 0; i < \").concat(r.length, \"; i++) {\\n        let input_dim_i = \").concat(d.indicesGet(\"uniforms.input_shape\", \"i\"), \";\\n        let input_dim_value = \").concat(l.indicesGet(\"output_indices\", \"i\"), \"  % input_dim_i;\\n\\n        \").concat(d.indicesSet(\"input_indices\", \"i\", \"input_dim_value\"), \"\\n      }\\n      \").concat(l.setByOffset(\"global_idx\", d.getByIndices(\"input_indices\")), \"\\n    }\");\n        return {\n            name: \"Tile\",\n            shaderCache: {\n                hint: \"\".concat(n),\n                inputDependencies: [\n                    \"rank\"\n                ]\n            },\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: o,\n                            dataType: e1[0].dataType\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(i / 64)\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: i\n                        },\n                        ...N(e1[0].dims, o)\n                    ]\n                }),\n            getShaderSource: p\n        };\n    }, ql = (e1)=>{\n        ng(e1.inputs), e1.compute(ig(e1.inputs), {\n            inputs: [\n                0\n            ]\n        });\n    };\n});\nvar ag, sg, jl, Yl = U(()=>{\n    \"use strict\";\n    te();\n    oe();\n    ae();\n    ag = (e1, t, r, n, o)=>{\n        let i = M(\"output_data\", o, r.length, 4), a = E(\"a_data\", t[1].dataType, t[1].dims.length, 4), d = E(\"b_data\", t[2].dataType, t[2].dims.length, 4), l = E(\"c_data\", t[0].dataType, t[0].dims.length, 4), p, m = (u, h, _)=>\"select(\".concat(h, \", \").concat(u, \", \").concat(_, \")\");\n        if (!n) p = i.setByOffset(\"global_idx\", m(a.getByOffset(\"global_idx\"), d.getByOffset(\"global_idx\"), l.getByOffset(\"global_idx\")));\n        else {\n            let u = function(h, _) {\n                let y = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"\";\n                let g = \"a_data[index_a\".concat(_, \"][component_a\").concat(_, \"]\"), x = \"b_data[index_b\".concat(_, \"][component_b\").concat(_, \"]\"), $ = \"bool(c_data[index_c\".concat(_, \"] & (0xffu << (component_c\").concat(_, \" * 8)))\");\n                return \"\\n            let output_indices\".concat(_, \" = \").concat(i.offsetToIndices(\"global_idx * 4u + \".concat(_, \"u\")), \";\\n            let offset_a\").concat(_, \" = \").concat(a.broadcastedIndicesToOffset(\"output_indices\".concat(_), i), \";\\n            let offset_b\").concat(_, \" = \").concat(d.broadcastedIndicesToOffset(\"output_indices\".concat(_), i), \";\\n            let offset_c\").concat(_, \" = \").concat(l.broadcastedIndicesToOffset(\"output_indices\".concat(_), i), \";\\n            let index_a\").concat(_, \" = offset_a\").concat(_, \" / 4u;\\n            let index_b\").concat(_, \" = offset_b\").concat(_, \" / 4u;\\n            let index_c\").concat(_, \" = offset_c\").concat(_, \" / 4u;\\n            let component_a\").concat(_, \" = offset_a\").concat(_, \" % 4u;\\n            let component_b\").concat(_, \" = offset_b\").concat(_, \" % 4u;\\n            let component_c\").concat(_, \" = offset_c\").concat(_, \" % 4u;\\n            \").concat(h, \"[\").concat(_, \"] = \").concat(y, \"(\").concat(m(g, x, $), \");\\n          \");\n            };\n            o === 9 ? p = \"\\n            var data = vec4<u32>(0);\\n            \".concat(u(\"data\", 0, \"u32\"), \"\\n            \").concat(u(\"data\", 1, \"u32\"), \"\\n            \").concat(u(\"data\", 2, \"u32\"), \"\\n            \").concat(u(\"data\", 3, \"u32\"), \"\\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));\") : p = \"\\n            \".concat(u(\"output_data[global_idx]\", 0), \"\\n            \").concat(u(\"output_data[global_idx]\", 1), \"\\n            \").concat(u(\"output_data[global_idx]\", 2), \"\\n            \").concat(u(\"output_data[global_idx]\", 3), \"\\n          \");\n        }\n        return \"\\n        \".concat(e1.registerUniform(\"vec_size\", \"u32\").declareVariables(l, a, d, i), \"\\n        \").concat(e1.mainStart(), \"\\n        \").concat(e1.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\"), \"\\n        \").concat(p, \"\\n      }\");\n    }, sg = (e1)=>{\n        let t = e1[1].dims, r = e1[2].dims, n = e1[0].dims, o = e1[1].dataType, i = !(C.areEqual(t, r) && C.areEqual(r, n)), a = t, d = C.size(t);\n        if (i) {\n            let p = tt.calcShape(tt.calcShape(t, r, !1), n, !1);\n            if (!p) throw new Error(\"Can't perform where op on the given tensors\");\n            a = p, d = C.size(a);\n        }\n        let l = Math.ceil(d / 4);\n        return {\n            name: \"Where\",\n            shaderCache: {\n                inputDependencies: [\n                    \"rank\",\n                    \"rank\",\n                    \"rank\"\n                ]\n            },\n            getShaderSource: (p)=>ag(p, e1, a, i, o),\n            getRunData: ()=>({\n                    outputs: [\n                        {\n                            dims: a,\n                            dataType: o\n                        }\n                    ],\n                    dispatchGroup: {\n                        x: Math.ceil(d / 64 / 4)\n                    },\n                    programUniforms: [\n                        {\n                            type: 12,\n                            data: l\n                        },\n                        ...N(n, t, r, a)\n                    ]\n                })\n        };\n    }, jl = (e1)=>{\n        e1.compute(sg(e1.inputs));\n    };\n});\nvar Zl, Ql = U(()=>{\n    \"use strict\";\n    Ps();\n    Fr();\n    Ds();\n    Ms();\n    vu();\n    zu();\n    Bu();\n    Qu();\n    od();\n    sd();\n    ld();\n    hd();\n    yd();\n    wd();\n    xd();\n    Id();\n    kd();\n    zd();\n    Bd();\n    Ud();\n    qd();\n    Yd();\n    Qd();\n    Jd();\n    rl();\n    So();\n    ol();\n    vl();\n    Sl();\n    Il();\n    kl();\n    Gr();\n    Ol();\n    Bl();\n    Rl();\n    Wl();\n    Hl();\n    Io();\n    Kl();\n    dt();\n    Kr();\n    Yl();\n    Zl = new Map([\n        [\n            \"Abs\",\n            [\n                Rs\n            ]\n        ],\n        [\n            \"Acos\",\n            [\n                Us\n            ]\n        ],\n        [\n            \"Acosh\",\n            [\n                Ns\n            ]\n        ],\n        [\n            \"Add\",\n            [\n                $u\n            ]\n        ],\n        [\n            \"ArgMax\",\n            [\n                Es,\n                co\n            ]\n        ],\n        [\n            \"ArgMin\",\n            [\n                ks,\n                co\n            ]\n        ],\n        [\n            \"Asin\",\n            [\n                Vs\n            ]\n        ],\n        [\n            \"Asinh\",\n            [\n                Ws\n            ]\n        ],\n        [\n            \"Atan\",\n            [\n                Ls\n            ]\n        ],\n        [\n            \"Atanh\",\n            [\n                Gs\n            ]\n        ],\n        [\n            \"Attention\",\n            [\n                zs\n            ]\n        ],\n        [\n            \"AveragePool\",\n            [\n                pl,\n                cl\n            ]\n        ],\n        [\n            \"BatchNormalization\",\n            [\n                Os\n            ]\n        ],\n        [\n            \"BiasAdd\",\n            [\n                Bs\n            ]\n        ],\n        [\n            \"BiasSplitGelu\",\n            [\n                wu\n            ]\n        ],\n        [\n            \"Cast\",\n            [\n                Fs,\n                Hs\n            ]\n        ],\n        [\n            \"Ceil\",\n            [\n                Ks\n            ]\n        ],\n        [\n            \"Clip\",\n            [\n                qs\n            ]\n        ],\n        [\n            \"Concat\",\n            [\n                Ou,\n                Du\n            ]\n        ],\n        [\n            \"Conv\",\n            [\n                wo,\n                _o\n            ]\n        ],\n        [\n            \"ConvTranspose\",\n            [\n                nd,\n                td\n            ]\n        ],\n        [\n            \"Cos\",\n            [\n                js\n            ]\n        ],\n        [\n            \"Cosh\",\n            [\n                Ys\n            ]\n        ],\n        [\n            \"CumSum\",\n            [\n                id,\n                ad\n            ]\n        ],\n        [\n            \"DepthToSpace\",\n            [\n                ud,\n                dd\n            ]\n        ],\n        [\n            \"DequantizeLinear\",\n            [\n                $l,\n                xl\n            ]\n        ],\n        [\n            \"Div\",\n            [\n                xu\n            ]\n        ],\n        [\n            \"Einsum\",\n            [\n                md,\n                fd\n            ]\n        ],\n        [\n            \"Elu\",\n            [\n                Zs,\n                Xt\n            ]\n        ],\n        [\n            \"Equal\",\n            [\n                Su\n            ]\n        ],\n        [\n            \"Erf\",\n            [\n                Qs\n            ]\n        ],\n        [\n            \"Exp\",\n            [\n                Xs\n            ]\n        ],\n        [\n            \"Expand\",\n            [\n                bd\n            ]\n        ],\n        [\n            \"FastGelu\",\n            [\n                _d\n            ]\n        ],\n        [\n            \"Floor\",\n            [\n                Js\n            ]\n        ],\n        [\n            \"FusedConv\",\n            [\n                wo,\n                _o\n            ]\n        ],\n        [\n            \"Gather\",\n            [\n                $d,\n                vd\n            ]\n        ],\n        [\n            \"GatherElements\",\n            [\n                Pd,\n                Ed\n            ]\n        ],\n        [\n            \"GatherBlockQuantized\",\n            [\n                Cd,\n                Ad\n            ]\n        ],\n        [\n            \"GatherND\",\n            [\n                Sd,\n                Td\n            ]\n        ],\n        [\n            \"Gelu\",\n            [\n                eu\n            ]\n        ],\n        [\n            \"Gemm\",\n            [\n                Dd,\n                Od\n            ]\n        ],\n        [\n            \"GlobalAveragePool\",\n            [\n                hl,\n                fl\n            ]\n        ],\n        [\n            \"GlobalMaxPool\",\n            [\n                wl,\n                _l\n            ]\n        ],\n        [\n            \"Greater\",\n            [\n                Au\n            ]\n        ],\n        [\n            \"GreaterOrEqual\",\n            [\n                Eu\n            ]\n        ],\n        [\n            \"GridSample\",\n            [\n                Md,\n                Rd\n            ]\n        ],\n        [\n            \"GroupQueryAttention\",\n            [\n                Fd\n            ]\n        ],\n        [\n            \"HardSigmoid\",\n            [\n                uu,\n                su\n            ]\n        ],\n        [\n            \"InstanceNormalization\",\n            [\n                jd\n            ]\n        ],\n        [\n            \"LayerNormalization\",\n            [\n                Zd\n            ]\n        ],\n        [\n            \"LeakyRelu\",\n            [\n                tu,\n                Xt\n            ]\n        ],\n        [\n            \"Less\",\n            [\n                ku\n            ]\n        ],\n        [\n            \"LessOrEqual\",\n            [\n                Pu\n            ]\n        ],\n        [\n            \"Log\",\n            [\n                bu\n            ]\n        ],\n        [\n            \"MatMul\",\n            [\n                Xd\n            ]\n        ],\n        [\n            \"MatMulNBits\",\n            [\n                el,\n                tl\n            ]\n        ],\n        [\n            \"MaxPool\",\n            [\n                bl,\n                yl\n            ]\n        ],\n        [\n            \"Mul\",\n            [\n                Tu\n            ]\n        ],\n        [\n            \"MultiHeadAttention\",\n            [\n                Wd,\n                Vd\n            ]\n        ],\n        [\n            \"Neg\",\n            [\n                nu\n            ]\n        ],\n        [\n            \"Not\",\n            [\n                ru\n            ]\n        ],\n        [\n            \"Pad\",\n            [\n                nl\n            ]\n        ],\n        [\n            \"Pow\",\n            [\n                Iu\n            ]\n        ],\n        [\n            \"QuickGelu\",\n            [\n                yu,\n                Xt\n            ]\n        ],\n        [\n            \"Range\",\n            [\n                Tl\n            ]\n        ],\n        [\n            \"Reciprocal\",\n            [\n                ou\n            ]\n        ],\n        [\n            \"ReduceMin\",\n            [\n                xs\n            ]\n        ],\n        [\n            \"ReduceMean\",\n            [\n                ys\n            ]\n        ],\n        [\n            \"ReduceMax\",\n            [\n                $s\n            ]\n        ],\n        [\n            \"ReduceSum\",\n            [\n                Ts\n            ]\n        ],\n        [\n            \"ReduceProd\",\n            [\n                Ss\n            ]\n        ],\n        [\n            \"ReduceL1\",\n            [\n                _s\n            ]\n        ],\n        [\n            \"ReduceL2\",\n            [\n                ws\n            ]\n        ],\n        [\n            \"ReduceLogSum\",\n            [\n                Cs\n            ]\n        ],\n        [\n            \"ReduceLogSumExp\",\n            [\n                vs\n            ]\n        ],\n        [\n            \"ReduceSumSquare\",\n            [\n                Is\n            ]\n        ],\n        [\n            \"Relu\",\n            [\n                iu\n            ]\n        ],\n        [\n            \"Resize\",\n            [\n                Pl,\n                zl\n            ]\n        ],\n        [\n            \"RotaryEmbedding\",\n            [\n                Dl\n            ]\n        ],\n        [\n            \"ScatterND\",\n            [\n                Al,\n                Cl\n            ]\n        ],\n        [\n            \"Sigmoid\",\n            [\n                au\n            ]\n        ],\n        [\n            \"Sin\",\n            [\n                du\n            ]\n        ],\n        [\n            \"Sinh\",\n            [\n                lu\n            ]\n        ],\n        [\n            \"Slice\",\n            [\n                Nl,\n                Vl\n            ]\n        ],\n        [\n            \"SkipLayerNormalization\",\n            [\n                Ml\n            ]\n        ],\n        [\n            \"Split\",\n            [\n                Ld,\n                Gd\n            ]\n        ],\n        [\n            \"Sqrt\",\n            [\n                cu\n            ]\n        ],\n        [\n            \"Softmax\",\n            [\n                Ll,\n                Gl\n            ]\n        ],\n        [\n            \"Sub\",\n            [\n                Cu\n            ]\n        ],\n        [\n            \"Tan\",\n            [\n                pu\n            ]\n        ],\n        [\n            \"Tanh\",\n            [\n                fu\n            ]\n        ],\n        [\n            \"ThresholdedRelu\",\n            [\n                gu,\n                Xt\n            ]\n        ],\n        [\n            \"Tile\",\n            [\n                ql\n            ]\n        ],\n        [\n            \"Transpose\",\n            [\n                is,\n                as\n            ]\n        ],\n        [\n            \"Where\",\n            [\n                jl\n            ]\n        ]\n    ]);\n});\nvar nn, Xl = U(()=>{\n    \"use strict\";\n    We();\n    et();\n    ae();\n    nn = class {\n        getArtifact(t) {\n            return this.repo.get(t);\n        }\n        setArtifact(t, r) {\n            this.repo.set(t, r);\n        }\n        run(t, r, n, o, i) {\n            Ue(t.programInfo.name);\n            let a = this.backend.device, d = this.backend.getComputePassEncoder();\n            this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2);\n            let l = [];\n            for (let m of r)l.push({\n                binding: l.length,\n                resource: {\n                    buffer: m.buffer\n                }\n            });\n            for (let m of n)l.push({\n                binding: l.length,\n                resource: {\n                    buffer: m.buffer\n                }\n            });\n            i && l.push({\n                binding: l.length,\n                resource: i\n            });\n            let p = a.createBindGroup({\n                layout: t.computePipeline.getBindGroupLayout(0),\n                entries: l,\n                label: t.programInfo.name\n            });\n            if (this.backend.sessionStatus === \"capturing\") {\n                let m = {\n                    kernelId: this.backend.currentKernelId,\n                    computePipeline: t.computePipeline,\n                    bindGroup: p,\n                    dispatchGroup: o\n                };\n                this.backend.capturedCommandList.get(this.backend.currentSessionId).push(m);\n            }\n            d.setPipeline(t.computePipeline), d.setBindGroup(0, p), d.dispatchWorkgroups(...o), this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2 + 1), this.backend.pendingDispatchNumber++, (this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber || this.backend.queryType === \"at-passes\") && this.backend.endComputePass(), this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber && this.backend.flush(), De(t.programInfo.name);\n        }\n        dispose() {}\n        build(t, r) {\n            Ue(t.name);\n            let n = this.backend.device, o = [];\n            [\n                {\n                    feature: \"shader-f16\",\n                    extension: \"f16\"\n                },\n                {\n                    feature: \"subgroups\",\n                    extension: \"subgroups\"\n                },\n                {\n                    feature: \"subgroups-f16\",\n                    extension: \"subgroups_f16\"\n                }\n            ].forEach((u)=>{\n                n.features.has(u.feature) && o.push(\"enable \".concat(u.extension, \";\"));\n            });\n            let a = ns(r, this.backend.device.limits), d = t.getShaderSource(a), l = \"\".concat(o.join(\"\\n\"), \"\\n\").concat(a.additionalImplementations, \"\\n\").concat(d), p = n.createShaderModule({\n                code: l,\n                label: t.name\n            });\n            ue(\"verbose\", ()=>\"[WebGPU] \".concat(t.name, \" shader code: \").concat(l));\n            let m = n.createComputePipeline({\n                compute: {\n                    module: p,\n                    entryPoint: \"main\"\n                },\n                layout: \"auto\",\n                label: t.name\n            });\n            return De(t.name), {\n                programInfo: t,\n                computePipeline: m,\n                uniformVariablesInfo: a.variablesInfo\n            };\n        }\n        normalizeDispatchGroupSize(t) {\n            let r = typeof t == \"number\" ? t : t.x, n = typeof t == \"number\" ? 1 : t.y || 1, o = typeof t == \"number\" ? 1 : t.z || 1, i = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n            if (r <= i && n <= i && o <= i) return [\n                r,\n                n,\n                o\n            ];\n            let a = r * n * o, d = Math.ceil(Math.sqrt(a));\n            if (d > i) {\n                if (d = Math.ceil(Math.cbrt(a)), d > i) throw new Error(\"Total dispatch size exceeds WebGPU maximum.\");\n                return [\n                    d,\n                    d,\n                    d\n                ];\n            } else return [\n                d,\n                d,\n                1\n            ];\n        }\n        constructor(t){\n            this.backend = t;\n            this.repo = new Map, this.attributesBound = !1;\n        }\n    };\n});\nvar ug, dg, Co, Ao, on, Jl = U(()=>{\n    \"use strict\";\n    We();\n    te();\n    et();\n    Jn();\n    Ja();\n    Ql();\n    Xl();\n    ug = (e1, t)=>{\n        if (t.length !== e1.length) throw new Error(\"inputDependencies length \".concat(t.length, \" is not equal to inputTensors length \").concat(e1.length, \".\"));\n        let r = [];\n        for(let n = 0; n < e1.length; ++n){\n            let o = e1[n].dataType;\n            switch(t[n]){\n                case \"none\":\n                    {\n                        r.push(\"\");\n                        break;\n                    }\n                case \"type\":\n                    {\n                        r.push(\"\".concat(o));\n                        break;\n                    }\n                case \"rank\":\n                    {\n                        let i = e1[n].dims.length;\n                        r.push(\"\".concat(o, \";\").concat(i));\n                        break;\n                    }\n                case \"dims\":\n                    {\n                        let i = e1[n].dims.join(\",\");\n                        r.push(\"\".concat(o, \";\").concat(i));\n                        break;\n                    }\n                default:\n                    throw new Error(\"unsupported input dependency: \".concat(t[n]));\n            }\n        }\n        return r.join(\"|\");\n    }, dg = (e1, t, r)=>{\n        var _e_shaderCache, _e_shaderCache1;\n        let n = e1.name;\n        var _e_shaderCache_inputDependencies;\n        return ((_e_shaderCache = e1.shaderCache) === null || _e_shaderCache === void 0 ? void 0 : _e_shaderCache.hint) && (n += \"[\" + e1.shaderCache.hint + \"]\"), n += \":\" + r + \":\".concat(ug(t, (_e_shaderCache_inputDependencies = (_e_shaderCache1 = e1.shaderCache) === null || _e_shaderCache1 === void 0 ? void 0 : _e_shaderCache1.inputDependencies) !== null && _e_shaderCache_inputDependencies !== void 0 ? _e_shaderCache_inputDependencies : new Array(t.length).fill(\"dims\"))), n;\n    }, Co = class {\n        isArchitecture(t) {\n            return this.architecture === t;\n        }\n        isVendor(t) {\n            return this.vendor === t;\n        }\n        constructor(t){\n            t && (this.architecture = t.architecture, this.vendor = t.vendor);\n        }\n    }, Ao = class {\n        constructor(t){\n            this.subgroupsSupported = t.features.has(\"subgroups\"), this.subgroupsF16Supported = t.features.has(\"subgroups\");\n            let r = t.limits;\n            !this.subgroupsSupported || !r.minSubgroupSize || !r.maxSubgroupSize ? this.subgroupSizeRange = void 0 : this.subgroupSizeRange = [\n                r.minSubgroupSize,\n                r.maxSubgroupSize\n            ];\n        }\n    }, on = class {\n        get currentKernelCustomData() {\n            if (this.currentKernelId === null) throw new Error(\"currentKernelCustomData(): currentKernelId is null. (should not happen)\");\n            let t = this.kernelCustomData.get(this.currentKernelId);\n            return t || (t = {}, this.kernelCustomData.set(this.currentKernelId, t)), t;\n        }\n        async initialize(t, r) {\n            this.env = t;\n            let n = [], o = {\n                requiredLimits: {\n                    maxComputeWorkgroupStorageSize: r.limits.maxComputeWorkgroupStorageSize,\n                    maxComputeWorkgroupsPerDimension: r.limits.maxComputeWorkgroupsPerDimension,\n                    maxStorageBufferBindingSize: r.limits.maxStorageBufferBindingSize,\n                    maxBufferSize: r.limits.maxBufferSize,\n                    maxComputeInvocationsPerWorkgroup: r.limits.maxComputeInvocationsPerWorkgroup,\n                    maxComputeWorkgroupSizeX: r.limits.maxComputeWorkgroupSizeX,\n                    maxComputeWorkgroupSizeY: r.limits.maxComputeWorkgroupSizeY,\n                    maxComputeWorkgroupSizeZ: r.limits.maxComputeWorkgroupSizeZ\n                },\n                requiredFeatures: n\n            }, i = (a)=>r.features.has(a) && n.push(a) && !0;\n            i(\"chromium-experimental-timestamp-query-inside-passes\") || i(\"timestamp-query\"), i(\"shader-f16\"), i(\"subgroups\") && i(\"subgroups-f16\"), this.device = await r.requestDevice(o), this.deviceInfo = new Ao(this.device), this.adapterInfo = new Co(r.info || await r.requestAdapterInfo()), this.gpuDataManager = Xa(this), this.programManager = new nn(this), this.kernels = new Map, this.kernelPersistentData = new Map, this.kernelCustomData = new Map, Rr(t.logLevel, !!t.debug), this.device.onuncapturederror = (a)=>{\n                a.error instanceof GPUValidationError && console.error(\"An uncaught WebGPU validation error was raised: \".concat(a.error.message));\n            }, Object.defineProperty(this.env.webgpu, \"device\", {\n                value: this.device,\n                writable: !1,\n                enumerable: !0,\n                configurable: !1\n            }), Object.defineProperty(this.env.webgpu, \"adapter\", {\n                value: r,\n                writable: !1,\n                enumerable: !0,\n                configurable: !1\n            }), this.setQueryType();\n        }\n        dispose() {\n            typeof this.querySet < \"u\" && this.querySet.destroy(), this.gpuDataManager.dispose();\n        }\n        getCommandEncoder() {\n            return this.commandEncoder || (this.commandEncoder = this.device.createCommandEncoder()), this.commandEncoder;\n        }\n        getComputePassEncoder() {\n            if (!this.computePassEncoder) {\n                let t = this.getCommandEncoder(), r = {};\n                this.queryType === \"at-passes\" && (r.timestampWrites = {\n                    querySet: this.querySet,\n                    beginningOfPassWriteIndex: this.pendingDispatchNumber * 2,\n                    endOfPassWriteIndex: this.pendingDispatchNumber * 2 + 1\n                }), this.computePassEncoder = t.beginComputePass(r);\n            }\n            return this.computePassEncoder;\n        }\n        endComputePass() {\n            this.computePassEncoder && (this.computePassEncoder.end(), this.computePassEncoder = null);\n        }\n        flush() {\n            if (!this.commandEncoder) return;\n            Ue(), this.endComputePass();\n            let t;\n            this.queryType !== \"none\" && (this.commandEncoder.resolveQuerySet(this.querySet, 0, this.pendingDispatchNumber * 2, this.queryResolveBuffer, 0), t = this.device.createBuffer({\n                size: this.pendingDispatchNumber * 2 * 8,\n                usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST\n            }), this.pendingQueries.set(t, this.pendingKernels), this.pendingKernels = [], this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer, 0, t, 0, this.pendingDispatchNumber * 2 * 8)), this.device.queue.submit([\n                this.commandEncoder.finish()\n            ]), this.gpuDataManager.refreshPendingBuffers(), this.commandEncoder = null, this.pendingDispatchNumber = 0, this.queryType !== \"none\" && t.mapAsync(GPUMapMode.READ).then(()=>{\n                let r = new BigUint64Array(t.getMappedRange()), n = this.pendingQueries.get(t);\n                for(let o = 0; o < r.length / 2; o++){\n                    var _this_env_webgpu_profiling;\n                    let i = n[o], a = i.kernelId, d = this.kernels.get(a), l = d.kernelType, p = d.kernelName, m = i.programName, u = i.inputTensorViews, h = i.outputTensorViews, _ = r[o * 2], y = r[o * 2 + 1];\n                    typeof this.queryTimeBase > \"u\" && (this.queryTimeBase = _);\n                    let g = Number(_ - this.queryTimeBase), x = Number(y - this.queryTimeBase);\n                    if (!Number.isSafeInteger(g) || !Number.isSafeInteger(x)) throw new RangeError(\"incorrect timestamp range\");\n                    if ((_this_env_webgpu_profiling = this.env.webgpu.profiling) === null || _this_env_webgpu_profiling === void 0 ? void 0 : _this_env_webgpu_profiling.ondata) this.env.webgpu.profiling.ondata({\n                        version: 1,\n                        inputsMetadata: u.map(($)=>({\n                                dims: $.dims,\n                                dataType: bt($.dataType)\n                            })),\n                        outputsMetadata: h.map(($)=>({\n                                dims: $.dims,\n                                dataType: bt($.dataType)\n                            })),\n                        kernelId: a,\n                        kernelType: l,\n                        kernelName: p,\n                        programName: m,\n                        startTime: g,\n                        endTime: x\n                    });\n                    else {\n                        let $ = \"\";\n                        u.forEach((S, T)=>{\n                            $ += \"input[\".concat(T, \"]: [\").concat(S.dims, \"] | \").concat(bt(S.dataType), \", \");\n                        });\n                        let v = \"\";\n                        h.forEach((S, T)=>{\n                            v += \"output[\".concat(T, \"]: [\").concat(S.dims, \"] | \").concat(bt(S.dataType), \", \");\n                        }), console.log('[profiling] kernel \"'.concat(a, \"|\").concat(l, \"|\").concat(p, \"|\").concat(m, '\" ').concat($).concat(v, \"execution time: \").concat(x - g, \" ns\"));\n                    }\n                    wr(\"GPU\", \"\".concat(m, \"::\").concat(_, \"::\").concat(y));\n                }\n                t.unmap(), this.pendingQueries.delete(t);\n            }), De();\n        }\n        run(t, r, n, o, i, a) {\n            Ue(t.name);\n            let d = [];\n            for(let S = 0; S < r.length; ++S){\n                let T = r[S].data;\n                if (T === 0) continue;\n                let A = this.gpuDataManager.get(T);\n                if (!A) throw new Error(\"no GPU data for input: \".concat(T));\n                d.push(A);\n            }\n            let { outputs: l, dispatchGroup: p, programUniforms: m } = t.getRunData(r), u = n.length === 0 ? l.map((S, T)=>T) : n;\n            if (u.length !== l.length) throw new Error(\"Output size \".concat(u.length, \" must be equal to \").concat(l.length, \".\"));\n            let h = [], _ = [];\n            for(let S = 0; S < l.length; ++S){\n                if (!Number.isInteger(u[S]) || u[S] < -3 || u[S] >= a) throw new Error(\"Invalid output index: \".concat(u[S]));\n                if (u[S] === -3) continue;\n                let T = u[S] === -1, A = u[S] === -2, k = T || A ? i(l[S].dataType, l[S].dims) : o(u[S], l[S].dataType, l[S].dims);\n                if (h.push(k), k.data === 0) continue;\n                let P = this.gpuDataManager.get(k.data);\n                if (!P) throw new Error(\"no GPU data for output: \".concat(k.data));\n                if (T && this.temporaryData.push(P), A) {\n                    let D = this.kernelPersistentData.get(this.currentKernelId);\n                    D || (D = [], this.kernelPersistentData.set(this.currentKernelId, D)), D.push(P);\n                }\n                _.push(P);\n            }\n            if (d.length !== r.length || _.length !== h.length) {\n                if (_.length === 0) return De(t.name), h;\n                throw new Error(\"Program \".concat(t.name, \" has zero-sized tensor(s) in inputs or outputs. This is not supported now.\"));\n            }\n            let y;\n            if (m) {\n                let S = 0, T = [];\n                m.forEach((D)=>{\n                    let R = typeof D.data == \"number\" ? [\n                        D.data\n                    ] : D.data;\n                    if (R.length === 0) return;\n                    let G = D.type === 10 ? 2 : 4, K, j;\n                    D.type === 10 ? (j = R.length > 4 ? 16 : R.length > 2 ? 8 : R.length * G, K = R.length > 4 ? 16 : G * R.length) : (j = R.length <= 2 ? R.length * G : 16, K = 16), S = Math.ceil(S / j) * j, T.push(S);\n                    let V = D.type === 10 ? 8 : 4;\n                    S += R.length > 4 ? Math.ceil(R.length / V) * K : R.length * G;\n                });\n                let A = 16;\n                S = Math.ceil(S / A) * A;\n                let k = new ArrayBuffer(S);\n                m.forEach((D, R)=>{\n                    let G = T[R], K = typeof D.data == \"number\" ? [\n                        D.data\n                    ] : D.data;\n                    if (D.type === 6) new Int32Array(k, G, K.length).set(K);\n                    else if (D.type === 12) new Uint32Array(k, G, K.length).set(K);\n                    else if (D.type === 10) new Uint16Array(k, G, K.length).set(K);\n                    else if (D.type === 1) new Float32Array(k, G, K.length).set(K);\n                    else throw new Error(\"Unsupported uniform type: \".concat(bt(D.type)));\n                });\n                let P = this.gpuDataManager.create(S, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\n                this.device.queue.writeBuffer(P.buffer, 0, k, 0, S), this.gpuDataManager.release(P.id), y = {\n                    offset: 0,\n                    size: S,\n                    buffer: P.buffer\n                };\n            }\n            let g = this.programManager.normalizeDispatchGroupSize(p), x = g[1] === 1 && g[2] === 1, $ = dg(t, r, x), v = this.programManager.getArtifact($);\n            if (v || (v = this.programManager.build(t, g), this.programManager.setArtifact($, v), ue(\"info\", ()=>\"[artifact] key: \".concat($, \", programName: \").concat(t.name))), m && v.uniformVariablesInfo) {\n                if (m.length !== v.uniformVariablesInfo.length) throw new Error(\"Uniform variables count mismatch: expect \".concat(v.uniformVariablesInfo.length, \", got \").concat(m.length, ' in program \"').concat(v.programInfo.name, '\".'));\n                for(let S = 0; S < m.length; S++){\n                    let T = m[S], A = T.type, k = typeof T.data == \"number\" ? 1 : T.data.length, [P, D] = v.uniformVariablesInfo[S];\n                    if (A !== P || k !== D) throw new Error(\"Uniform variable \".concat(S, \" mismatch: expect type \").concat(P, \" with size \").concat(D, \", got type \").concat(A, \" with size \").concat(k, ' in program \"').concat(v.programInfo.name, '\".'));\n                }\n            }\n            if (ue(\"info\", ()=>'[ProgramManager] run \"'.concat(t.name, '\" (key=').concat($, \") with \").concat(g[0], \"x\").concat(g[1], \"x\").concat(g[2])), this.queryType !== \"none\" || this.sessionStatus === \"capturing\") {\n                let S = {\n                    kernelId: this.currentKernelId,\n                    programName: v.programInfo.name,\n                    inputTensorViews: r,\n                    outputTensorViews: h\n                };\n                this.pendingKernels.push(S), this.sessionStatus === \"capturing\" && this.capturedPendingKernels.get(this.currentSessionId).push(S);\n            }\n            return this.programManager.run(v, d, _, g, y), De(t.name), h;\n        }\n        upload(t, r) {\n            this.gpuDataManager.upload(t, r);\n        }\n        memcpy(t, r) {\n            this.gpuDataManager.memcpy(t, r);\n        }\n        async download(t, r) {\n            await this.gpuDataManager.download(t, r);\n        }\n        alloc(t) {\n            return this.gpuDataManager.create(t).id;\n        }\n        free(t) {\n            return this.gpuDataManager.release(t);\n        }\n        createKernel(t, r, n, o) {\n            let i = Zl.get(t);\n            if (!i) throw new Error(\"kernel not implemented: \".concat(t));\n            let a = {\n                kernelType: t,\n                kernelName: o,\n                kernelEntry: i[0],\n                attributes: [\n                    i[1],\n                    n\n                ]\n            };\n            this.kernels.set(r, a);\n        }\n        releaseKernel(t) {\n            let r = this.kernelPersistentData.get(t);\n            if (r) {\n                for (let n of r)this.gpuDataManager.release(n.id);\n                this.kernelPersistentData.delete(t);\n            }\n            this.kernelCustomData.delete(t), this.kernels.delete(t);\n        }\n        computeKernel(t, r, n) {\n            let o = this.kernels.get(t);\n            if (!o) throw new Error(\"kernel not created: \".concat(t));\n            let i = o.kernelType, a = o.kernelName, d = o.kernelEntry, l = o.attributes;\n            if (this.currentKernelId !== null) throw new Error('kernel \"['.concat(i, \"] \").concat(a, '\" is not allowed to be called recursively'));\n            this.currentKernelId = t, l[0] && (l[1] = l[0](l[1]), l[0] = void 0), ue(\"info\", ()=>'[WebGPU] Start to run kernel \"['.concat(i, \"] \").concat(a, '\"...'));\n            let p = this.env.debug;\n            this.temporaryData = [];\n            try {\n                return p && this.device.pushErrorScope(\"validation\"), d(r, l[1]), 0;\n            } catch (m) {\n                return n.push(Promise.resolve('[WebGPU] Kernel \"['.concat(i, \"] \").concat(a, '\" failed. ').concat(m))), 1;\n            } finally{\n                p && n.push(this.device.popErrorScope().then((m)=>m ? 'GPU validation error for kernel \"['.concat(i, \"] \").concat(a, '\": ').concat(m.message) : null));\n                for (let m of this.temporaryData)this.gpuDataManager.release(m.id);\n                this.temporaryData = [], this.currentKernelId = null;\n            }\n        }\n        registerBuffer(t, r, n, o) {\n            let i = this.sessionExternalDataMapping.get(t);\n            i || (i = new Map, this.sessionExternalDataMapping.set(t, i));\n            let a = i.get(r), d = this.gpuDataManager.registerExternalBuffer(n, o, a);\n            return i.set(r, [\n                d,\n                n\n            ]), d;\n        }\n        unregisterBuffers(t) {\n            let r = this.sessionExternalDataMapping.get(t);\n            r && (r.forEach((n)=>this.gpuDataManager.unregisterExternalBuffer(n[0])), this.sessionExternalDataMapping.delete(t));\n        }\n        getBuffer(t) {\n            let r = this.gpuDataManager.get(t);\n            if (!r) throw new Error(\"no GPU data for buffer: \".concat(t));\n            return r.buffer;\n        }\n        createDownloader(t, r, n) {\n            return async ()=>{\n                let o = await no(this, t, r);\n                return Ur(o.buffer, n);\n            };\n        }\n        writeTimestamp(t) {\n            this.queryType === \"inside-passes\" && this.computePassEncoder.writeTimestamp(this.querySet, t);\n        }\n        setQueryType() {\n            var _this_env_webgpu_profiling;\n            this.queryType = \"none\", (((_this_env_webgpu_profiling = this.env.webgpu.profiling) === null || _this_env_webgpu_profiling === void 0 ? void 0 : _this_env_webgpu_profiling.mode) === \"default\" || (typeof this.env.trace > \"u\" ? this.env.wasm.trace : this.env.trace)) && (this.device.features.has(\"chromium-experimental-timestamp-query-inside-passes\") ? this.queryType = \"inside-passes\" : this.device.features.has(\"timestamp-query\") && (this.queryType = \"at-passes\"), this.queryType !== \"none\" && typeof this.querySet > \"u\" && (this.querySet = this.device.createQuerySet({\n                type: \"timestamp\",\n                count: this.maxDispatchNumber * 2\n            }), this.queryResolveBuffer = this.device.createBuffer({\n                size: this.maxDispatchNumber * 2 * 8,\n                usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE\n            })));\n        }\n        captureBegin() {\n            ue(\"info\", \"captureBegin\"), this.capturedCommandList.get(this.currentSessionId) || this.capturedCommandList.set(this.currentSessionId, []), this.capturedPendingKernels.get(this.currentSessionId) || this.capturedPendingKernels.set(this.currentSessionId, []), this.flush(), this.sessionStatus = \"capturing\";\n        }\n        captureEnd() {\n            ue(\"info\", \"captureEnd\"), this.flush(), this.sessionStatus = \"default\";\n        }\n        replay() {\n            ue(\"info\", \"replay\"), this.sessionStatus = \"replaying\";\n            let t = this.capturedCommandList.get(this.currentSessionId), r = this.capturedPendingKernels.get(this.currentSessionId), n = t.length;\n            this.pendingKernels = [];\n            for(let o = 0; o < n; o++){\n                let i = this.getComputePassEncoder(), a = t[o];\n                this.writeTimestamp(this.pendingDispatchNumber * 2), i.setPipeline(a.computePipeline), i.setBindGroup(0, a.bindGroup), i.dispatchWorkgroups(...a.dispatchGroup), this.writeTimestamp(this.pendingDispatchNumber * 2 + 1), this.pendingDispatchNumber++, this.queryType !== \"none\" && this.pendingKernels.push(r[o]), (this.pendingDispatchNumber >= this.maxDispatchNumber || this.queryType === \"at-passes\") && this.endComputePass(), this.pendingDispatchNumber >= this.maxDispatchNumber && this.flush();\n            }\n            this.flush(), this.sessionStatus = \"default\";\n        }\n        onCreateSession() {\n            this.gpuDataManager.onCreateSession();\n        }\n        onReleaseSession(t) {\n            this.unregisterBuffers(t), this.capturedCommandList.has(t) && this.capturedCommandList.delete(t), this.capturedPendingKernels.has(t) && this.capturedPendingKernels.delete(t), this.gpuDataManager.onReleaseSession(t);\n        }\n        onRunStart(t) {\n            this.currentSessionId = t, this.setQueryType();\n        }\n        constructor(){\n            this.currentSessionId = null;\n            this.currentKernelId = null;\n            this.commandEncoder = null;\n            this.computePassEncoder = null;\n            this.maxDispatchNumber = 16;\n            this.pendingDispatchNumber = 0;\n            this.pendingKernels = [];\n            this.pendingQueries = new Map;\n            this.sessionStatus = \"default\";\n            this.capturedCommandList = new Map;\n            this.capturedPendingKernels = new Map;\n            this.sessionExternalDataMapping = new Map;\n        }\n    };\n});\nvar lg, ec, cg, tc, an, sn, ko, rc, nc = U(()=>{\n    \"use strict\";\n    et();\n    lg = 1, ec = ()=>lg++, cg = new Map([\n        [\n            \"float32\",\n            32\n        ],\n        [\n            \"float16\",\n            16\n        ],\n        [\n            \"int32\",\n            32\n        ],\n        [\n            \"uint32\",\n            32\n        ],\n        [\n            \"int64\",\n            64\n        ],\n        [\n            \"uint64\",\n            64\n        ],\n        [\n            \"int8\",\n            8\n        ],\n        [\n            \"uint8\",\n            8\n        ],\n        [\n            \"int4\",\n            4\n        ],\n        [\n            \"uint4\",\n            4\n        ]\n    ]), tc = (e1, t)=>{\n        let r = cg.get(e1);\n        if (!r) throw new Error(\"Unsupported data type.\");\n        return t.length > 0 ? Math.ceil(t.reduce((n, o)=>n * o) * r / 8) : 0;\n    }, an = class {\n        get tensor() {\n            return this.mlTensor;\n        }\n        get type() {\n            return this.dataType;\n        }\n        get shape() {\n            return this.tensorShape;\n        }\n        get byteLength() {\n            return tc(this.dataType, this.tensorShape);\n        }\n        destroy() {\n            ue(\"verbose\", ()=>\"[WebNN] TensorWrapper.destroy\"), this.mlTensor.destroy();\n        }\n        write(t) {\n            this.mlContext.writeTensor(this.mlTensor, t);\n        }\n        async read(t) {\n            return t ? this.mlContext.readTensor(this.mlTensor, t) : this.mlContext.readTensor(this.mlTensor);\n        }\n        canReuseTensor(t, r, n) {\n            return this.mlContext === t && this.dataType === r && this.tensorShape.length === n.length && this.tensorShape.every((o, i)=>o === n[i]);\n        }\n        constructor(t){\n            this.sessionId = t.sessionId, this.mlContext = t.context, this.mlTensor = t.tensor, this.dataType = t.dataType, this.tensorShape = t.shape;\n        }\n    }, sn = class {\n        get tensorWrapper() {\n            return this.wrapper;\n        }\n        releaseTensor() {\n            this.tensorWrapper && (this.tensorManager.releaseTensor(this.tensorWrapper), this.wrapper = void 0);\n        }\n        async ensureTensor(t, r, n, o) {\n            if (this.wrapper) {\n                if (this.wrapper.canReuseTensor(t, r, n)) return this.wrapper.tensor;\n                if (o) {\n                    if (this.wrapper.byteLength !== tc(r, n)) throw new Error(\"Unable to copy data to tensor with different size.\");\n                    this.activeUpload = new Uint8Array(await this.wrapper.read());\n                }\n                this.tensorManager.releaseTensor(this.wrapper);\n            }\n            let i = typeof MLTensorUsage > \"u\" ? void 0 : MLTensorUsage.READ | MLTensorUsage.WRITE;\n            return this.wrapper = await this.tensorManager.getCachedTensor(r, n, i, !0, !0), o && this.activeUpload && (this.wrapper.write(this.activeUpload), this.activeUpload = void 0), this.wrapper.tensor;\n        }\n        upload(t) {\n            if (this.wrapper) if (t.byteLength === this.wrapper.byteLength) {\n                this.wrapper.write(t);\n                return;\n            } else ue(\"verbose\", ()=>\"Data size does not match tensor size. Releasing tensor.\"), this.releaseTensor();\n            this.activeUpload ? this.activeUpload.set(t) : this.activeUpload = new Uint8Array(t);\n        }\n        async download(t) {\n            if (this.activeUpload) if (t) {\n                t instanceof ArrayBuffer ? new Uint8Array(t).set(this.activeUpload) : new Uint8Array(t.buffer, t.byteOffset, t.byteLength).set(this.activeUpload);\n                return;\n            } else return this.activeUpload.buffer;\n            if (!this.wrapper) throw new Error(\"Tensor has not been created.\");\n            return t ? this.wrapper.read(t) : this.wrapper.read();\n        }\n        constructor(t, r){\n            this.tensorManager = t;\n            this.wrapper = r;\n        }\n    }, ko = class {\n        reserveTensorId() {\n            let t = ec();\n            return this.tensorTrackersById.set(t, new sn(this)), t;\n        }\n        releaseTensorId(t) {\n            let r = this.tensorTrackersById.get(t);\n            r && (this.tensorTrackersById.delete(t), r.tensorWrapper && this.releaseTensor(r.tensorWrapper));\n        }\n        async ensureTensor(t, r, n, o) {\n            ue(\"verbose\", ()=>\"[WebNN] TensorManager.ensureTensor {tensorId: \".concat(t, \", dataType: \").concat(r, \", shape: \").concat(n, \", copyOld: \").concat(o, \"}\"));\n            let i = this.tensorTrackersById.get(t);\n            if (!i) throw new Error(\"Tensor not found.\");\n            return i.ensureTensor(this.backend.currentContext, r, n, o);\n        }\n        upload(t, r) {\n            let n = this.tensorTrackersById.get(t);\n            if (!n) throw new Error(\"Tensor not found.\");\n            n.upload(r);\n        }\n        async download(t, r) {\n            ue(\"verbose\", ()=>\"[WebNN] TensorManager.download {tensorId: \".concat(t, \", dstBuffer: \").concat(r === null || r === void 0 ? void 0 : r.byteLength, \"}\"));\n            let n = this.tensorTrackersById.get(t);\n            if (!n) throw new Error(\"Tensor not found.\");\n            return n.download(r);\n        }\n        releaseTensorsForSession(t) {\n            for (let r of this.freeTensors)r.sessionId === t && r.destroy();\n            this.freeTensors = this.freeTensors.filter((r)=>r.sessionId !== t);\n        }\n        registerTensor(t, r, n, o) {\n            let i = ec(), a = new an({\n                sessionId: this.backend.currentSessionId,\n                context: t,\n                tensor: r,\n                dataType: n,\n                shape: o\n            });\n            return this.tensorTrackersById.set(i, new sn(this, a)), this.externalTensors.add(a), i;\n        }\n        async getCachedTensor(t, r, n, o, i) {\n            let a = this.backend.currentSessionId, d = this.backend.currentContext;\n            for (let [p, m] of this.freeTensors.entries())if (m.canReuseTensor(d, t, r)) {\n                ue(\"verbose\", ()=>\"[WebNN] Reusing tensor {dataType: \".concat(t, \", shape: \").concat(r, \"}\"));\n                let u = this.freeTensors.splice(p, 1)[0];\n                return u.sessionId = a, u;\n            }\n            ue(\"verbose\", ()=>\"[WebNN] MLContext.createTensor {dataType: \".concat(t, \", shape: \").concat(r, \"}\"));\n            let l = await d.createTensor({\n                dataType: t,\n                shape: r,\n                dimensions: r,\n                usage: n,\n                writable: o,\n                readable: i\n            });\n            return new an({\n                sessionId: a,\n                context: d,\n                tensor: l,\n                dataType: t,\n                shape: r\n            });\n        }\n        releaseTensor(t) {\n            this.externalTensors.has(t) && this.externalTensors.delete(t), this.freeTensors.push(t);\n        }\n        constructor(t){\n            this.backend = t;\n            this.tensorTrackersById = new Map;\n            this.freeTensors = [];\n            this.externalTensors = new Set;\n        }\n    }, rc = function() {\n        for(var _len = arguments.length, e1 = new Array(_len), _key = 0; _key < _len; _key++){\n            e1[_key] = arguments[_key];\n        }\n        return new ko(...e1);\n    };\n});\nvar oc, pg, un, ic = U(()=>{\n    \"use strict\";\n    te();\n    gt();\n    Jn();\n    nc();\n    et();\n    oc = new Map([\n        [\n            1,\n            \"float32\"\n        ],\n        [\n            10,\n            \"float16\"\n        ],\n        [\n            6,\n            \"int32\"\n        ],\n        [\n            12,\n            \"uint32\"\n        ],\n        [\n            7,\n            \"int64\"\n        ],\n        [\n            13,\n            \"uint64\"\n        ],\n        [\n            22,\n            \"int4\"\n        ],\n        [\n            21,\n            \"uint4\"\n        ],\n        [\n            3,\n            \"int8\"\n        ],\n        [\n            2,\n            \"uint8\"\n        ],\n        [\n            9,\n            \"uint8\"\n        ]\n    ]), pg = (e1, t)=>{\n        if (e1 === t) return !0;\n        if (e1 === void 0 || t === void 0) return !1;\n        let r = Object.keys(e1).sort(), n = Object.keys(t).sort();\n        return r.length === n.length && r.every((o, i)=>o === n[i] && e1[o] === t[o]);\n    }, un = class {\n        get currentSessionId() {\n            if (this.activeSessionId === void 0) throw new Error(\"No active session\");\n            return this.activeSessionId;\n        }\n        onRunStart(t) {\n            this.activeSessionId = t;\n        }\n        async createMLContext(t) {\n            if (t instanceof GPUDevice) {\n                let n = this.mlContextCache.findIndex((o)=>o.gpuDevice === t);\n                if (n !== -1) return this.mlContextCache[n].mlContext;\n                {\n                    let o = await navigator.ml.createContext(t);\n                    return this.mlContextCache.push({\n                        gpuDevice: t,\n                        mlContext: o\n                    }), o;\n                }\n            } else if (t === void 0) {\n                let n = this.mlContextCache.findIndex((o)=>o.options === void 0 && o.gpuDevice === void 0);\n                if (n !== -1) return this.mlContextCache[n].mlContext;\n                {\n                    let o = await navigator.ml.createContext();\n                    return this.mlContextCache.push({\n                        mlContext: o\n                    }), o;\n                }\n            }\n            let r = this.mlContextCache.findIndex((n)=>pg(n.options, t));\n            if (r !== -1) return this.mlContextCache[r].mlContext;\n            {\n                let n = await navigator.ml.createContext(t);\n                return this.mlContextCache.push({\n                    options: t,\n                    mlContext: n\n                }), n;\n            }\n        }\n        get currentContext() {\n            let t = this.getMLContext(this.currentSessionId);\n            if (!t) throw new Error(\"No MLContext found for session \".concat(this.currentSessionId));\n            return t;\n        }\n        registerMLContext(t, r) {\n            this.mlContextBySessionId.set(t, r);\n            let n = this.sessionIdsByMLContext.get(r);\n            n || (n = new Set, this.sessionIdsByMLContext.set(r, n)), n.add(t);\n        }\n        onReleaseSession(t) {\n            let r = this.mlContextBySessionId.get(t);\n            if (!r) return;\n            this.tensorManager.releaseTensorsForSession(t), this.mlContextBySessionId.delete(t);\n            let n = this.sessionIdsByMLContext.get(r);\n            if (n.delete(t), n.size === 0) {\n                this.sessionIdsByMLContext.delete(r);\n                let o = this.mlContextCache.findIndex((i)=>i.mlContext === r);\n                o !== -1 && this.mlContextCache.splice(o, 1);\n            }\n        }\n        getMLContext(t) {\n            return this.mlContextBySessionId.get(t);\n        }\n        reserveTensorId() {\n            return this.tensorManager.reserveTensorId();\n        }\n        releaseTensorId(t) {\n            ue(\"verbose\", ()=>\"[WebNN] releaseTensorId {tensorId: \".concat(t, \"}\")), this.tensorManager.releaseTensorId(t);\n        }\n        async ensureTensor(t, r, n, o) {\n            let i = oc.get(r);\n            if (!i) throw new Error(\"Unsupported ONNX data type: \".concat(r));\n            return this.tensorManager.ensureTensor(t, i, n, o);\n        }\n        uploadTensor(t, r) {\n            if (!Ie().shouldTransferToMLTensor) throw new Error(\"Trying to upload to a MLTensor while shouldTransferToMLTensor is false\");\n            ue(\"verbose\", ()=>\"[WebNN] uploadTensor {tensorId: \".concat(t, \", data: \").concat(r.byteLength, \"}\")), this.tensorManager.upload(t, r);\n        }\n        async downloadTensor(t, r) {\n            return this.tensorManager.download(t, r);\n        }\n        createMLTensorDownloader(t, r) {\n            return async ()=>{\n                let n = await this.tensorManager.download(t);\n                return Ur(n, r);\n            };\n        }\n        registerMLTensor(t, r, n) {\n            let o = oc.get(r);\n            if (!o) throw new Error(\"Unsupported ONNX data type: \".concat(r));\n            let i = this.tensorManager.registerTensor(this.currentContext, t, o, n);\n            return ue(\"verbose\", ()=>\"[WebNN] registerMLTensor {tensor: \".concat(t, \", dataType: \").concat(o, \", dimensions: \").concat(n, \"} -> {tensorId: \").concat(i, \"}\")), i;\n        }\n        registerMLConstant(t, r, n, o, i, a) {\n            if (!a) throw new Error(\"External mounted files are not available.\");\n            let d = t;\n            t.startsWith(\"./\") && (d = t.substring(2));\n            let l = a.get(d);\n            if (!l) throw new Error(\"File with name \".concat(d, \" not found in preloaded files.\"));\n            if (r + n > l.byteLength) throw new Error(\"Out of bounds: data offset and length exceed the external file data size.\");\n            let p = l.slice(r, r + n).buffer, m;\n            switch(i.dataType){\n                case \"float32\":\n                    m = new Float32Array(p);\n                    break;\n                case \"float16\":\n                    m = new Uint16Array(p);\n                    break;\n                case \"int32\":\n                    m = new Int32Array(p);\n                    break;\n                case \"uint32\":\n                    m = new Uint32Array(p);\n                    break;\n                case \"int64\":\n                    m = new BigInt64Array(p);\n                    break;\n                case \"uint64\":\n                    m = new BigUint64Array(p);\n                    break;\n                case \"int8\":\n                    m = new Int8Array(p);\n                    break;\n                case \"int4\":\n                case \"uint4\":\n                case \"uint8\":\n                    m = new Uint8Array(p);\n                    break;\n                default:\n                    throw new Error(\"Unsupported data type: \".concat(i.dataType, \" in creating WebNN Constant from external data.\"));\n            }\n            return ue(\"verbose\", ()=>\"[WebNN] registerMLConstant {dataType: \".concat(i.dataType, \", shape: \").concat(i.shape, \"}}\")), o.constant(i, m);\n        }\n        flush() {}\n        constructor(t){\n            this.tensorManager = rc(this);\n            this.mlContextBySessionId = new Map;\n            this.sessionIdsByMLContext = new Map;\n            this.mlContextCache = [];\n            Rr(t.logLevel, !!t.debug);\n        }\n    };\n});\nvar ac = {};\nFt(ac, {\n    init: ()=>mg\n});\nvar rr, Eo, mg, sc = U(()=>{\n    \"use strict\";\n    te();\n    Jl();\n    et();\n    oe();\n    ic();\n    rr = class e1 {\n        getFloat32Array() {\n            if (this.dataType !== 1) throw new Error(\"Invalid data type\");\n            let t = C.size(this.dims);\n            return t === 0 ? new Float32Array : new Float32Array(this.module.HEAP8.buffer, this.data, t);\n        }\n        getBigInt64Array() {\n            if (this.dataType !== 7) throw new Error(\"Invalid data type\");\n            let t = C.size(this.dims);\n            return t === 0 ? new BigInt64Array : new BigInt64Array(this.module.HEAP8.buffer, this.data, t);\n        }\n        getInt32Array() {\n            if (this.dataType !== 6) throw new Error(\"Invalid data type\");\n            let t = C.size(this.dims);\n            return t === 0 ? new Int32Array : new Int32Array(this.module.HEAP8.buffer, this.data, t);\n        }\n        getUint16Array() {\n            if (this.dataType !== 10 && this.dataType !== 4) throw new Error(\"Invalid data type\");\n            let t = C.size(this.dims);\n            return t === 0 ? new Uint16Array : new Uint16Array(this.module.HEAP8.buffer, this.data, t);\n        }\n        reshape(t) {\n            if (C.size(t) !== C.size(this.dims)) throw new Error(\"Invalid new shape\");\n            return new e1(this.module, this.dataType, this.data, t);\n        }\n        constructor(t, r, n, o){\n            this.module = t;\n            this.dataType = r;\n            this.data = n;\n            this.dims = o;\n        }\n    }, Eo = class {\n        get kernelCustomData() {\n            return this.backend.currentKernelCustomData;\n        }\n        get customDataBuffer() {\n            return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\n        }\n        compute(t, r) {\n            var _r_inputs;\n            var _r_inputs_map, _r_outputs;\n            let n = (_r_inputs_map = r === null || r === void 0 ? void 0 : (_r_inputs = r.inputs) === null || _r_inputs === void 0 ? void 0 : _r_inputs.map((d)=>typeof d == \"number\" ? this.inputs[d] : d)) !== null && _r_inputs_map !== void 0 ? _r_inputs_map : this.inputs, o = (_r_outputs = r === null || r === void 0 ? void 0 : r.outputs) !== null && _r_outputs !== void 0 ? _r_outputs : [], i = (d, l, p)=>new rr(this.module, l, this.output(d, p), p), a = (d, l)=>{\n                let p = Ct(d, l);\n                if (!p) throw new Error(\"Unsupported data type: \".concat(d));\n                let m = p > 0 ? this.backend.gpuDataManager.create(p).id : 0;\n                return new rr(this.module, d, m, l);\n            };\n            return this.backend.run(t, n, o, i, a, this.outputCount);\n        }\n        output(t, r) {\n            let n = this.module.stackSave();\n            try {\n                let o = this.module.PTR_SIZE, i = o === 4 ? \"i32\" : \"i64\", a = this.module.stackAlloc((1 + r.length) * o);\n                this.module.setValue(a, r.length, i);\n                for(let d = 0; d < r.length; d++)this.module.setValue(a + o * (d + 1), r[d], i);\n                return this.module._JsepOutput(this.opKernelContext, t, a);\n            } catch (o) {\n                throw new Error(\"Failed to generate kernel's output[\".concat(t, \"] with dims [\").concat(r, \"]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: \").concat(o));\n            } finally{\n                this.module.stackRestore(n);\n            }\n        }\n        constructor(t, r, n){\n            this.module = t;\n            this.backend = r;\n            this.customDataOffset = 0;\n            this.customDataSize = 0;\n            this.adapterInfo = r.adapterInfo, this.deviceInfo = r.deviceInfo;\n            let o = t.PTR_SIZE, i = n / t.PTR_SIZE, a = o === 4 ? \"i32\" : \"i64\";\n            this.opKernelContext = Number(t.getValue(o * i++, a));\n            let d = Number(t.getValue(o * i++, a));\n            this.outputCount = Number(t.getValue(o * i++, a)), this.customDataOffset = Number(t.getValue(o * i++, \"*\")), this.customDataSize = Number(t.getValue(o * i++, a));\n            let l = [];\n            for(let p = 0; p < d; p++){\n                let m = Number(t.getValue(o * i++, a)), u = Number(t.getValue(o * i++, \"*\")), h = Number(t.getValue(o * i++, a)), _ = [];\n                for(let y = 0; y < h; y++)_.push(Number(t.getValue(o * i++, a)));\n                l.push(new rr(t, m, u, _));\n            }\n            this.inputs = l;\n        }\n    }, mg = async (e1, t, r, n)=>{\n        let o = t.jsepInit;\n        if (!o) throw new Error(\"Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.\");\n        if (e1 === \"webgpu\") {\n            let i = new on;\n            await i.initialize(r, n), o(\"webgpu\", [\n                i,\n                (a)=>i.alloc(Number(a)),\n                (a)=>i.free(a),\n                function(a, d, l) {\n                    let p = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;\n                    if (p) ue(\"verbose\", ()=>\"[WebGPU] jsepCopyGpuToGpu: src=\".concat(Number(a), \", dst=\").concat(Number(d), \", size=\").concat(Number(l))), i.memcpy(Number(a), Number(d));\n                    else {\n                        ue(\"verbose\", ()=>\"[WebGPU] jsepCopyCpuToGpu: dataOffset=\".concat(Number(a), \", gpuDataId=\").concat(Number(d), \", size=\").concat(Number(l)));\n                        let m = t.HEAPU8.subarray(Number(a >>> 0), Number(a >>> 0) + Number(l));\n                        i.upload(Number(d), m);\n                    }\n                },\n                async (a, d, l)=>{\n                    ue(\"verbose\", ()=>\"[WebGPU] jsepCopyGpuToCpu: gpuDataId=\".concat(a, \", dataOffset=\").concat(d, \", size=\").concat(l)), await i.download(Number(a), ()=>t.HEAPU8.subarray(Number(d) >>> 0, Number(d + l) >>> 0));\n                },\n                (a, d, l)=>i.createKernel(a, Number(d), l, t.UTF8ToString(t._JsepGetNodeName(Number(d)))),\n                (a)=>i.releaseKernel(a),\n                (a, d, l, p)=>{\n                    ue(\"verbose\", ()=>\"[WebGPU] jsepRun: sessionHandle=\".concat(l, \", kernel=\").concat(a, \", contextDataOffset=\").concat(d));\n                    let m = new Eo(t, i, Number(d));\n                    return i.computeKernel(Number(a), m, p);\n                },\n                ()=>i.captureBegin(),\n                ()=>i.captureEnd(),\n                ()=>i.replay()\n            ]);\n        } else {\n            let i = new un(r);\n            o(\"webnn\", [\n                i,\n                ()=>i.reserveTensorId(),\n                (a)=>i.releaseTensorId(a),\n                async (a, d, l, p)=>i.ensureTensor(a, d, l, p),\n                (a, d)=>{\n                    i.uploadTensor(a, d);\n                },\n                async (a, d)=>i.downloadTensor(a, d)\n            ]);\n        }\n    };\n});\nvar fg, Tr, Ir, Pt, hg, Kt, Cr, Ar, uc, kr, Er, Pr, qn = U(()=>{\n    \"use strict\";\n    Ha();\n    qa();\n    te();\n    gt();\n    Or();\n    Xn();\n    fg = (e1, t)=>{\n        Ie()._OrtInit(e1, t) !== 0 && pe(\"Can't initialize onnxruntime.\");\n    }, Tr = async (e1)=>{\n        fg(e1.wasm.numThreads, Zt(e1.logLevel));\n    }, Ir = async (e1, t)=>{\n        {\n            let r = (sc(), br(ac)).init;\n            if (t === \"webgpu\") {\n                if (typeof navigator > \"u\" || !navigator.gpu) throw new Error(\"WebGPU is not supported in current environment\");\n                let n = e1.webgpu.adapter;\n                if (n) {\n                    if (typeof n.limits != \"object\" || typeof n.features != \"object\" || typeof n.requestDevice != \"function\") throw new Error(\"Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.\");\n                } else {\n                    let o = e1.webgpu.powerPreference;\n                    if (o !== void 0 && o !== \"low-power\" && o !== \"high-performance\") throw new Error('Invalid powerPreference setting: \"'.concat(o, '\"'));\n                    let i = e1.webgpu.forceFallbackAdapter;\n                    if (i !== void 0 && typeof i != \"boolean\") throw new Error('Invalid forceFallbackAdapter setting: \"'.concat(i, '\"'));\n                    if (n = await navigator.gpu.requestAdapter({\n                        powerPreference: o,\n                        forceFallbackAdapter: i\n                    }), !n) throw new Error('Failed to get GPU adapter. You may need to enable flag \"--enable-unsafe-webgpu\" if you are using Chrome.');\n                }\n                await r(\"webgpu\", Ie(), e1, n);\n            }\n            if (t === \"webnn\") {\n                if (typeof navigator > \"u\" || !navigator.ml) throw new Error(\"WebNN is not supported in current environment\");\n                await r(\"webnn\", Ie(), e1);\n            }\n        }\n    }, Pt = new Map, hg = (e1)=>{\n        let t = Ie(), r = t.stackSave();\n        try {\n            let n = t.PTR_SIZE, o = t.stackAlloc(2 * n);\n            t._OrtGetInputOutputCount(e1, o, o + n) !== 0 && pe(\"Can't get session input/output count.\");\n            let a = n === 4 ? \"i32\" : \"i64\";\n            return [\n                Number(t.getValue(o, a)),\n                Number(t.getValue(o + n, a))\n            ];\n        } finally{\n            t.stackRestore(r);\n        }\n    }, Kt = (e1)=>{\n        let t = Ie(), r = t._malloc(e1.byteLength);\n        if (r === 0) throw new Error(\"Can't create a session. failed to allocate a buffer of size \".concat(e1.byteLength, \".\"));\n        return t.HEAPU8.set(e1, r), [\n            r,\n            e1.byteLength\n        ];\n    }, Cr = async (e1, t)=>{\n        let r, n, o = Ie();\n        Array.isArray(e1) ? [r, n] = e1 : e1.buffer === o.HEAPU8.buffer ? [r, n] = [\n            e1.byteOffset,\n            e1.byteLength\n        ] : [r, n] = Kt(e1);\n        let i = 0, a = 0, d = 0, l = [], p = [], m = [];\n        try {\n            var _o_jsepOnCreateSession;\n            if ([a, l] = Fa(t), (t === null || t === void 0 ? void 0 : t.externalData) && o.mountExternalData) {\n                let v = [];\n                for (let S of t.externalData){\n                    let T = typeof S == \"string\" ? S : S.path;\n                    v.push(Qt(typeof S == \"string\" ? S : S.data).then((A)=>{\n                        o.mountExternalData(T, A);\n                    }));\n                }\n                await Promise.all(v);\n            }\n            var _t_executionProviders;\n            for (let v of (_t_executionProviders = t === null || t === void 0 ? void 0 : t.executionProviders) !== null && _t_executionProviders !== void 0 ? _t_executionProviders : [])if ((typeof v == \"string\" ? v : v.name) === \"webnn\") {\n                if (o.shouldTransferToMLTensor = !1, typeof v != \"string\") {\n                    let T = v, A = T === null || T === void 0 ? void 0 : T.context, k = T === null || T === void 0 ? void 0 : T.gpuDevice, P = T === null || T === void 0 ? void 0 : T.deviceType, D = T === null || T === void 0 ? void 0 : T.powerPreference;\n                    A ? o.currentContext = A : k ? o.currentContext = await o.jsepCreateMLContext(k) : o.currentContext = await o.jsepCreateMLContext({\n                        deviceType: P,\n                        powerPreference: D\n                    });\n                } else o.currentContext = await o.jsepCreateMLContext();\n                break;\n            }\n            i = await o._OrtCreateSession(r, n, a), i === 0 && pe(\"Can't create a session.\"), (_o_jsepOnCreateSession = o.jsepOnCreateSession) === null || _o_jsepOnCreateSession === void 0 ? void 0 : _o_jsepOnCreateSession.call(o), o.currentContext && (o.jsepRegisterMLContext(i, o.currentContext), o.currentContext = void 0, o.shouldTransferToMLTensor = !0);\n            let [u, h] = hg(i), _ = !!(t === null || t === void 0 ? void 0 : t.enableGraphCapture), y = [], g = [], x = [];\n            for(let v = 0; v < u; v++){\n                let S = o._OrtGetInputName(i, v);\n                S === 0 && pe(\"Can't get an input name.\"), p.push(S), y.push(o.UTF8ToString(S));\n            }\n            for(let v = 0; v < h; v++){\n                let S = o._OrtGetOutputName(i, v);\n                S === 0 && pe(\"Can't get an output name.\"), m.push(S);\n                let T = o.UTF8ToString(S);\n                g.push(T);\n                {\n                    var _t_preferredOutputLocation;\n                    if (_ && (t === null || t === void 0 ? void 0 : t.preferredOutputLocation) === void 0) {\n                        x.push(\"gpu-buffer\");\n                        continue;\n                    }\n                    var _t_preferredOutputLocation_T;\n                    let A = typeof (t === null || t === void 0 ? void 0 : t.preferredOutputLocation) == \"string\" ? t.preferredOutputLocation : (_t_preferredOutputLocation_T = t === null || t === void 0 ? void 0 : (_t_preferredOutputLocation = t.preferredOutputLocation) === null || _t_preferredOutputLocation === void 0 ? void 0 : _t_preferredOutputLocation[T]) !== null && _t_preferredOutputLocation_T !== void 0 ? _t_preferredOutputLocation_T : \"cpu\";\n                    if (A !== \"cpu\" && A !== \"cpu-pinned\" && A !== \"gpu-buffer\" && A !== \"ml-tensor\") throw new Error(\"Not supported preferred output location: \".concat(A, \".\"));\n                    if (_ && A !== \"gpu-buffer\") throw new Error(\"Not supported preferred output location: \".concat(A, \". Only 'gpu-buffer' location is supported when enableGraphCapture is true.\"));\n                    x.push(A);\n                }\n            }\n            let $ = null;\n            return x.some((v)=>v === \"gpu-buffer\" || v === \"ml-tensor\") && (d = o._OrtCreateBinding(i), d === 0 && pe(\"Can't create IO binding.\"), $ = {\n                handle: d,\n                outputPreferredLocations: x,\n                outputPreferredLocationsEncoded: x.map((v)=>Qn(v))\n            }), Pt.set(i, [\n                i,\n                p,\n                m,\n                $,\n                _,\n                !1\n            ]), [\n                i,\n                y,\n                g\n            ];\n        } catch (u) {\n            throw p.forEach((h)=>o._OrtFree(h)), m.forEach((h)=>o._OrtFree(h)), d !== 0 && o._OrtReleaseBinding(d) !== 0 && pe(\"Can't release IO binding.\"), i !== 0 && o._OrtReleaseSession(i) !== 0 && pe(\"Can't release session.\"), u;\n        } finally{\n            var _o_unmountExternalData;\n            o._free(r), a !== 0 && o._OrtReleaseSessionOptions(a) !== 0 && pe(\"Can't release session options.\"), l.forEach((u)=>o._free(u)), (_o_unmountExternalData = o.unmountExternalData) === null || _o_unmountExternalData === void 0 ? void 0 : _o_unmountExternalData.call(o);\n        }\n    }, Ar = (e1)=>{\n        var _t_jsepOnReleaseSession;\n        let t = Ie(), r = Pt.get(e1);\n        if (!r) throw new Error(\"cannot release session. invalid session id: \".concat(e1));\n        let [n, o, i, a, d] = r;\n        a && (d && t._OrtClearBoundOutputs(a.handle) !== 0 && pe(\"Can't clear bound outputs.\"), t._OrtReleaseBinding(a.handle) !== 0 && pe(\"Can't release IO binding.\")), (_t_jsepOnReleaseSession = t.jsepOnReleaseSession) === null || _t_jsepOnReleaseSession === void 0 ? void 0 : _t_jsepOnReleaseSession.call(t, e1), o.forEach((l)=>t._OrtFree(l)), i.forEach((l)=>t._OrtFree(l)), t._OrtReleaseSession(n) !== 0 && pe(\"Can't release session.\"), Pt.delete(e1);\n    }, uc = function(e1, t, r, n, o) {\n        let i = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !1;\n        if (!e1) {\n            t.push(0);\n            return;\n        }\n        let a = Ie(), d = a.PTR_SIZE, l = e1[0], p = e1[1], m = e1[3], u, h;\n        if (l === \"string\" && (m === \"gpu-buffer\" || m === \"ml-tensor\")) throw new Error(\"String tensor is not supported on GPU.\");\n        if (i && m !== \"gpu-buffer\") throw new Error(\"External buffer must be provided for input/output index \".concat(o, \" when enableGraphCapture is true.\"));\n        if (m === \"gpu-buffer\") {\n            let g = e1[2].gpuBuffer;\n            h = Ct(Yt(l), p);\n            let x = a.jsepRegisterBuffer;\n            if (!x) throw new Error('Tensor location \"gpu-buffer\" is not supported without using WebGPU.');\n            u = x(n, o, g, h);\n        } else if (m === \"ml-tensor\") {\n            let g = e1[2].mlTensor;\n            h = Ct(Yt(l), p);\n            let x = a.jsepRegisterMLTensor;\n            if (!x) throw new Error('Tensor location \"ml-tensor\" is not supported without using WebNN.');\n            u = x(g, Yt(l), p);\n        } else {\n            let g = e1[2];\n            if (Array.isArray(g)) {\n                h = d * g.length, u = a._malloc(h), r.push(u);\n                for(let x = 0; x < g.length; x++){\n                    if (typeof g[x] != \"string\") throw new TypeError(\"tensor data at index \".concat(x, \" is not a string\"));\n                    a.setValue(u + x * d, ke(g[x], r), \"*\");\n                }\n            } else h = g.byteLength, u = a._malloc(h), r.push(u), a.HEAPU8.set(new Uint8Array(g.buffer, g.byteOffset, h), u);\n        }\n        let _ = a.stackSave(), y = a.stackAlloc(4 * p.length);\n        try {\n            p.forEach((x, $)=>a.setValue(y + $ * d, x, d === 4 ? \"i32\" : \"i64\"));\n            let g = a._OrtCreateTensor(Yt(l), u, h, y, p.length, Qn(m));\n            g === 0 && pe(\"Can't create tensor for input/output. session=\".concat(n, \", index=\").concat(o, \".\")), t.push(g);\n        } finally{\n            a.stackRestore(_);\n        }\n    }, kr = async (e1, t, r, n, o, i)=>{\n        let a = Ie(), d = a.PTR_SIZE, l = Pt.get(e1);\n        if (!l) throw new Error(\"cannot run inference. invalid session id: \".concat(e1));\n        let p = l[0], m = l[1], u = l[2], h = l[3], _ = l[4], y = l[5], g = t.length, x = n.length, $ = 0, v = [], S = [], T = [], A = [], k = a.stackSave(), P = a.stackAlloc(g * d), D = a.stackAlloc(g * d), R = a.stackAlloc(x * d), G = a.stackAlloc(x * d);\n        try {\n            var _a_jsepOnRunStart;\n            (_a_jsepOnRunStart = a.jsepOnRunStart) === null || _a_jsepOnRunStart === void 0 ? void 0 : _a_jsepOnRunStart.call(a, p), [$, v] = Ga(i);\n            for(let V = 0; V < g; V++)uc(r[V], S, A, e1, t[V], _);\n            for(let V = 0; V < x; V++)uc(o[V], T, A, e1, g + n[V], _);\n            for(let V = 0; V < g; V++)a.setValue(P + V * d, S[V], \"*\"), a.setValue(D + V * d, m[t[V]], \"*\");\n            for(let V = 0; V < x; V++)a.setValue(R + V * d, T[V], \"*\"), a.setValue(G + V * d, u[n[V]], \"*\");\n            if (h && !y) {\n                let { handle: V, outputPreferredLocations: Q, outputPreferredLocationsEncoded: se } = h;\n                if (m.length !== g) throw new Error(\"input count from feeds (\".concat(g, \") is expected to be always equal to model's input count (\").concat(m.length, \").\"));\n                for(let Y = 0; Y < g; Y++){\n                    let ee = t[Y];\n                    await a._OrtBindInput(V, m[ee], S[Y]) !== 0 && pe(\"Can't bind input[\".concat(Y, \"] for session=\").concat(e1, \".\"));\n                }\n                for(let Y = 0; Y < x; Y++){\n                    var _o_Y;\n                    let ee = n[Y];\n                    ((_o_Y = o[Y]) === null || _o_Y === void 0 ? void 0 : _o_Y[3]) ? a._OrtBindOutput(V, u[ee], T[Y], 0) !== 0 && pe(\"Can't bind pre-allocated output[\".concat(Y, \"] for session=\").concat(e1, \".\")) : a._OrtBindOutput(V, u[ee], 0, se[ee]) !== 0 && pe(\"Can't bind output[\".concat(Y, \"] to \").concat(Q[Y], \" for session=\").concat(e1, \".\"));\n                }\n                Pt.set(e1, [\n                    p,\n                    m,\n                    u,\n                    h,\n                    _,\n                    !0\n                ]);\n            }\n            let K;\n            h ? K = await a._OrtRunWithBinding(p, h.handle, x, R, $) : K = await a._OrtRun(p, D, P, g, G, x, R, $), K !== 0 && pe(\"failed to call OrtRun().\");\n            let j = [];\n            for(let V = 0; V < x; V++){\n                let Q = Number(a.getValue(R + V * d, \"*\"));\n                if (Q === T[V]) {\n                    j.push(o[V]);\n                    continue;\n                }\n                let se = a.stackSave(), Y = a.stackAlloc(4 * d), ee = !1, J, ne = 0;\n                try {\n                    a._OrtGetTensorData(Q, Y, Y + d, Y + 2 * d, Y + 3 * d) !== 0 && pe(\"Can't access output tensor data on index \".concat(V, \".\"));\n                    let Oe = d === 4 ? \"i32\" : \"i64\", $e = Number(a.getValue(Y, Oe));\n                    ne = a.getValue(Y + d, \"*\");\n                    let le = a.getValue(Y + d * 2, \"*\"), W = Number(a.getValue(Y + d * 3, Oe)), q = [];\n                    for(let we = 0; we < W; we++)q.push(Number(a.getValue(le + we * d, Oe)));\n                    a._OrtFree(le) !== 0 && pe(\"Can't free memory for tensor dims.\");\n                    let he = q.reduce((we, ye)=>we * ye, 1);\n                    J = bt($e);\n                    let Ge = h === null || h === void 0 ? void 0 : h.outputPreferredLocations[n[V]];\n                    if (J === \"string\") {\n                        if (Ge === \"gpu-buffer\" || Ge === \"ml-tensor\") throw new Error(\"String tensor is not supported on GPU.\");\n                        let we = [];\n                        for(let ye = 0; ye < he; ye++){\n                            let Ye = a.getValue(ne + ye * d, \"*\"), Lt = a.getValue(ne + (ye + 1) * d, \"*\"), fn = ye === he - 1 ? void 0 : Lt - Ye;\n                            we.push(a.UTF8ToString(Ye, fn));\n                        }\n                        j.push([\n                            J,\n                            q,\n                            we,\n                            \"cpu\"\n                        ]);\n                    } else if (Ge === \"gpu-buffer\" && he > 0) {\n                        let we = a.jsepGetBuffer;\n                        if (!we) throw new Error('preferredLocation \"gpu-buffer\" is not supported without using WebGPU.');\n                        let ye = we(ne), Ye = Ct($e, he);\n                        if (Ye === void 0 || !Br(J)) throw new Error(\"Unsupported data type: \".concat(J));\n                        ee = !0, j.push([\n                            J,\n                            q,\n                            {\n                                gpuBuffer: ye,\n                                download: a.jsepCreateDownloader(ye, Ye, J),\n                                dispose: ()=>{\n                                    a._OrtReleaseTensor(Q) !== 0 && pe(\"Can't release tensor.\");\n                                }\n                            },\n                            \"gpu-buffer\"\n                        ]);\n                    } else if (Ge === \"ml-tensor\" && he > 0) {\n                        let we = a.jsepEnsureTensor;\n                        if (!we) throw new Error('preferredLocation \"ml-tensor\" is not supported without using WebNN.');\n                        if (Ct($e, he) === void 0 || !Mr(J)) throw new Error(\"Unsupported data type: \".concat(J));\n                        let Ye = await we(ne, $e, q, !1);\n                        ee = !0, j.push([\n                            J,\n                            q,\n                            {\n                                mlTensor: Ye,\n                                download: a.jsepCreateMLTensorDownloader(ne, J),\n                                dispose: ()=>{\n                                    a.jsepReleaseTensorId(ne), a._OrtReleaseTensor(Q);\n                                }\n                            },\n                            \"ml-tensor\"\n                        ]);\n                    } else {\n                        let we = Dr(J), ye = new we(he);\n                        new Uint8Array(ye.buffer, ye.byteOffset, ye.byteLength).set(a.HEAPU8.subarray(ne, ne + ye.byteLength)), j.push([\n                            J,\n                            q,\n                            ye,\n                            \"cpu\"\n                        ]);\n                    }\n                } finally{\n                    a.stackRestore(se), J === \"string\" && ne && a._free(ne), ee || a._OrtReleaseTensor(Q);\n                }\n            }\n            return h && !_ && (a._OrtClearBoundOutputs(h.handle) !== 0 && pe(\"Can't clear bound outputs.\"), Pt.set(e1, [\n                p,\n                m,\n                u,\n                h,\n                _,\n                !1\n            ])), j;\n        } finally{\n            a.stackRestore(k), S.forEach((K)=>a._OrtReleaseTensor(K)), T.forEach((K)=>a._OrtReleaseTensor(K)), A.forEach((K)=>a._free(K)), $ !== 0 && a._OrtReleaseRunOptions($), v.forEach((K)=>a._free(K));\n        }\n    }, Er = (e1)=>{\n        let t = Ie(), r = Pt.get(e1);\n        if (!r) throw new Error(\"invalid session id\");\n        let n = r[0], o = t._OrtEndProfiling(n);\n        o === 0 && pe(\"Can't get an profile file name.\"), t._OrtFree(o);\n    }, Pr = (e1)=>{\n        let t = [];\n        for (let r of e1){\n            let n = r[2];\n            !Array.isArray(n) && \"buffer\" in n && t.push(n.buffer);\n        }\n        return t;\n    };\n});\nvar zt, Le, nr, ln, cn, dn, Po, zo, Vt, Wt, bg, dc, lc, cc, pc, mc, fc, hc, Oo = U(()=>{\n    \"use strict\";\n    We();\n    qn();\n    gt();\n    xr();\n    zt = ()=>!!ve.wasm.proxy && typeof document < \"u\", nr = !1, ln = !1, cn = !1, zo = new Map, Vt = (e1, t)=>{\n        let r = zo.get(e1);\n        r ? r.push(t) : zo.set(e1, [\n            t\n        ]);\n    }, Wt = ()=>{\n        if (nr || !ln || cn || !Le) throw new Error(\"worker not ready\");\n    }, bg = (e1)=>{\n        switch(e1.data.type){\n            case \"init-wasm\":\n                nr = !1, e1.data.err ? (cn = !0, Po[1](e1.data.err)) : (ln = !0, Po[0]()), dn && (URL.revokeObjectURL(dn), dn = void 0);\n                break;\n            case \"init-ep\":\n            case \"copy-from\":\n            case \"create\":\n            case \"release\":\n            case \"run\":\n            case \"end-profiling\":\n                {\n                    let t = zo.get(e1.data.type);\n                    e1.data.err ? t.shift()[1](e1.data.err) : t.shift()[0](e1.data.out);\n                    break;\n                }\n            default:\n        }\n    }, dc = async ()=>{\n        if (!ln) {\n            if (nr) throw new Error(\"multiple calls to 'initWasm()' detected.\");\n            if (cn) throw new Error(\"previous call to 'initWasm()' failed.\");\n            if (nr = !0, zt()) return new Promise((e1, t)=>{\n                Le === null || Le === void 0 ? void 0 : Le.terminate(), Va().then((param)=>{\n                    let [r, n] = param;\n                    try {\n                        var _url;\n                        Le = n, Le.onerror = (i)=>t(i), Le.onmessage = bg, Po = [\n                            e1,\n                            t\n                        ];\n                        let o = {\n                            type: \"init-wasm\",\n                            in: ve\n                        };\n                        !o.in.wasm.wasmPaths && (r || ((_url = \"file:///Users/amityadav/Desktop/Text-Behind%20Image/node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs\") === null || _url === void 0 ? void 0 : _url.startsWith(\"file:\"))) && (o.in.wasm.wasmPaths = {\n                            wasm: /* asset import */ new __webpack_require__.U(__webpack_require__(/*! ort-wasm-simd-threaded.jsep.wasm */ \"(app-pages-browser)/./node_modules/onnxruntime-web/dist/ort-wasm-simd-threaded.jsep.wasm\")).href\n                        }), Le.postMessage(o), dn = r;\n                    } catch (o) {\n                        t(o);\n                    }\n                }, t);\n            });\n            try {\n                await Sr(ve.wasm), await Tr(ve), ln = !0;\n            } catch (e1) {\n                throw cn = !0, e1;\n            } finally{\n                nr = !1;\n            }\n        }\n    }, lc = async (e1)=>{\n        if (zt()) return Wt(), new Promise((t, r)=>{\n            Vt(\"init-ep\", [\n                t,\n                r\n            ]);\n            let n = {\n                type: \"init-ep\",\n                in: {\n                    epName: e1,\n                    env: ve\n                }\n            };\n            Le.postMessage(n);\n        });\n        await Ir(ve, e1);\n    }, cc = async (e1)=>zt() ? (Wt(), new Promise((t, r)=>{\n            Vt(\"copy-from\", [\n                t,\n                r\n            ]);\n            let n = {\n                type: \"copy-from\",\n                in: {\n                    buffer: e1\n                }\n            };\n            Le.postMessage(n, [\n                e1.buffer\n            ]);\n        })) : Kt(e1), pc = async (e1, t)=>{\n        if (zt()) {\n            if (t === null || t === void 0 ? void 0 : t.preferredOutputLocation) throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');\n            return Wt(), new Promise((r, n)=>{\n                Vt(\"create\", [\n                    r,\n                    n\n                ]);\n                let o = {\n                    type: \"create\",\n                    in: {\n                        model: e1,\n                        options: {\n                            ...t\n                        }\n                    }\n                }, i = [];\n                e1 instanceof Uint8Array && i.push(e1.buffer), Le.postMessage(o, i);\n            });\n        } else return Cr(e1, t);\n    }, mc = async (e1)=>{\n        if (zt()) return Wt(), new Promise((t, r)=>{\n            Vt(\"release\", [\n                t,\n                r\n            ]);\n            let n = {\n                type: \"release\",\n                in: e1\n            };\n            Le.postMessage(n);\n        });\n        Ar(e1);\n    }, fc = async (e1, t, r, n, o, i)=>{\n        if (zt()) {\n            if (r.some((a)=>a[3] !== \"cpu\")) throw new Error(\"input tensor on GPU is not supported for proxy.\");\n            if (o.some((a)=>a)) throw new Error(\"pre-allocated output tensor is not supported for proxy.\");\n            return Wt(), new Promise((a, d)=>{\n                Vt(\"run\", [\n                    a,\n                    d\n                ]);\n                let l = r, p = {\n                    type: \"run\",\n                    in: {\n                        sessionId: e1,\n                        inputIndices: t,\n                        inputs: l,\n                        outputIndices: n,\n                        options: i\n                    }\n                };\n                Le.postMessage(p, Pr(l));\n            });\n        } else return kr(e1, t, r, n, o, i);\n    }, hc = async (e1)=>{\n        if (zt()) return Wt(), new Promise((t, r)=>{\n            Vt(\"end-profiling\", [\n                t,\n                r\n            ]);\n            let n = {\n                type: \"end-profiling\",\n                in: e1\n            };\n            Le.postMessage(n);\n        });\n        Er(e1);\n    };\n});\nvar gc, yg, pn, bc = U(()=>{\n    \"use strict\";\n    We();\n    Oo();\n    te();\n    $r();\n    Xn();\n    gc = (e1, t)=>{\n        switch(e1.location){\n            case \"cpu\":\n                return [\n                    e1.type,\n                    e1.dims,\n                    e1.data,\n                    \"cpu\"\n                ];\n            case \"gpu-buffer\":\n                return [\n                    e1.type,\n                    e1.dims,\n                    {\n                        gpuBuffer: e1.gpuBuffer\n                    },\n                    \"gpu-buffer\"\n                ];\n            case \"ml-tensor\":\n                return [\n                    e1.type,\n                    e1.dims,\n                    {\n                        mlTensor: e1.mlTensor\n                    },\n                    \"ml-tensor\"\n                ];\n            default:\n                throw new Error(\"invalid data location: \".concat(e1.location, \" for \").concat(t()));\n        }\n    }, yg = (e1)=>{\n        switch(e1[3]){\n            case \"cpu\":\n                return new He(e1[0], e1[2], e1[1]);\n            case \"gpu-buffer\":\n                {\n                    let t = e1[0];\n                    if (!Br(t)) throw new Error(\"not supported data type: \".concat(t, \" for deserializing GPU tensor\"));\n                    let { gpuBuffer: r, download: n, dispose: o } = e1[2];\n                    return He.fromGpuBuffer(r, {\n                        dataType: t,\n                        dims: e1[1],\n                        download: n,\n                        dispose: o\n                    });\n                }\n            case \"ml-tensor\":\n                {\n                    let t = e1[0];\n                    if (!Mr(t)) throw new Error(\"not supported data type: \".concat(t, \" for deserializing MLTensor tensor\"));\n                    let { mlTensor: r, download: n, dispose: o } = e1[2];\n                    return He.fromMLTensor(r, {\n                        dataType: t,\n                        dims: e1[1],\n                        download: n,\n                        dispose: o\n                    });\n                }\n            default:\n                throw new Error(\"invalid data location: \".concat(e1[3]));\n        }\n    }, pn = class {\n        async fetchModelAndCopyToWasmMemory(t) {\n            return cc(await Qt(t));\n        }\n        async loadModel(t, r) {\n            Ue();\n            let n;\n            typeof t == \"string\" ?  false ? 0 : n = await this.fetchModelAndCopyToWasmMemory(t) : n = t, [this.sessionId, this.inputNames, this.outputNames] = await pc(n, r), De();\n        }\n        async dispose() {\n            return mc(this.sessionId);\n        }\n        async run(t, r, n) {\n            Ue();\n            let o = [], i = [];\n            Object.entries(t).forEach((h)=>{\n                let _ = h[0], y = h[1], g = this.inputNames.indexOf(_);\n                if (g === -1) throw new Error(\"invalid input '\".concat(_, \"'\"));\n                o.push(y), i.push(g);\n            });\n            let a = [], d = [];\n            Object.entries(r).forEach((h)=>{\n                let _ = h[0], y = h[1], g = this.outputNames.indexOf(_);\n                if (g === -1) throw new Error(\"invalid output '\".concat(_, \"'\"));\n                a.push(y), d.push(g);\n            });\n            let l = o.map((h, _)=>gc(h, ()=>'input \"'.concat(this.inputNames[i[_]], '\"'))), p = a.map((h, _)=>h ? gc(h, ()=>'output \"'.concat(this.outputNames[d[_]], '\"')) : null), m = await fc(this.sessionId, i, l, d, p, n), u = {};\n            var _a_h;\n            for(let h = 0; h < m.length; h++)u[this.outputNames[d[h]]] = (_a_h = a[h]) !== null && _a_h !== void 0 ? _a_h : yg(m[h]);\n            return De(), u;\n        }\n        startProfiling() {}\n        endProfiling() {\n            hc(this.sessionId);\n        }\n    };\n});\nvar _c = {};\nFt(_c, {\n    OnnxruntimeWebAssemblyBackend: ()=>mn,\n    initializeFlags: ()=>yc,\n    wasmBackend: ()=>_g\n});\nvar yc, mn, _g, wc = U(()=>{\n    \"use strict\";\n    We();\n    Oo();\n    bc();\n    yc = ()=>{\n        if ((typeof ve.wasm.initTimeout != \"number\" || ve.wasm.initTimeout < 0) && (ve.wasm.initTimeout = 0), ve.wasm.simd === !1 && console.warn('Deprecated property \"env.wasm.simd\" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'), typeof ve.wasm.proxy != \"boolean\" && (ve.wasm.proxy = !1), typeof ve.wasm.trace != \"boolean\" && (ve.wasm.trace = !1), typeof ve.wasm.numThreads != \"number\" || !Number.isInteger(ve.wasm.numThreads) || ve.wasm.numThreads <= 0) if (typeof self < \"u\" && !self.crossOriginIsolated) ve.wasm.numThreads = 1;\n        else {\n            let e1 = typeof navigator > \"u\" ? Nn(\"node:os\").cpus().length : navigator.hardwareConcurrency;\n            ve.wasm.numThreads = Math.min(4, Math.ceil((e1 || 1) / 2));\n        }\n    }, mn = class {\n        async init(t) {\n            yc(), await dc(), await lc(t);\n        }\n        async createInferenceSessionHandler(t, r) {\n            let n = new pn;\n            return await n.loadModel(t, r), Promise.resolve(n);\n        }\n    }, _g = new mn;\n});\nWe();\nWe();\nWe();\nvar Ca = \"1.21.0-dev.20250114-228dd16893\";\nvar $1 = Fn;\n{\n    let e1 = (wc(), br(_c)).wasmBackend;\n    St(\"webgpu\", e1, 5), St(\"webnn\", e1, 5), St(\"cpu\", e1, 10), St(\"wasm\", e1, 10);\n}Object.defineProperty(ve.versions, \"web\", {\n    value: Ca,\n    enumerable: !0\n});\n /**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */  /**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */  /**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */  //# sourceMappingURL=ort.webgpu.bundle.min.mjs.map\nvar _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n$RefreshReg$(_c1, \"Sa$U\");\n$RefreshReg$(_c2, \"Sa\");\n$RefreshReg$(_c3, \"Ta$U\");\n$RefreshReg$(_c4, \"Ta\");\n$RefreshReg$(_c5, \"Ia$U\");\n$RefreshReg$(_c6, \"Ia\");\n$RefreshReg$(_c7, \"We$U\");\n$RefreshReg$(_c8, \"We\");\n$RefreshReg$(_c9, \"Nr$U\");\n$RefreshReg$(_c10, \"Nr\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs?4709\n"));

/***/ })

}]);